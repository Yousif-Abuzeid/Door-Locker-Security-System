
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003fec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ca  00800060  00003fec  00004080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080012a  0080012a  0000414a  2**0
                  ALLOC
  3 .stab         00003648  00000000  00000000  0000414c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014d9  00000000  00000000  00007794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00008c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00008dad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00008f1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000ab66  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ba51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000c800  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c960  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000cbed  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d3bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f5 1d 	jmp	0x3bea	; 0x3bea <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	ff e3       	ldi	r31, 0x3F	; 63
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 32       	cpi	r26, 0x2A	; 42
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e2       	ldi	r26, 0x2A	; 42
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <main>
      8a:	0c 94 f4 1f 	jmp	0x3fe8	; 0x3fe8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e0       	ldi	r26, 0x0F	; 15
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 78 1f 	jmp	0x3ef0	; 0x3ef0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e0       	ldi	r24, 0x0F	; 15
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 94 1f 	jmp	0x3f28	; 0x3f28 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a0 1f 	jmp	0x3f40	; 0x3f40 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 88 1f 	jmp	0x3f10	; 0x3f10 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a4 1f 	jmp	0x3f48	; 0x3f48 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <HMI_CallbackError>:
uint16 g_Pass_1;
uint16 g_Pass_2;
uint8 i;

UART_ConfigType UART_Configuration;
void HMI_CallbackError(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     b4e:	80 91 2a 01 	lds	r24, 0x012A
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 2a 01 	sts	0x012A, r24
	LCD_moveCursor(0,0);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
	LCD_displayString("ERROR");
     b60:	80 e6       	ldi	r24, 0x60	; 96
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
}
     b68:	cf 91       	pop	r28
     b6a:	df 91       	pop	r29
     b6c:	08 95       	ret

00000b6e <HMI_CallbackDoor>:
void HMI_CallbackDoor(void){
     b6e:	df 93       	push	r29
     b70:	cf 93       	push	r28
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
     b76:	80 91 2a 01 	lds	r24, 0x012A
     b7a:	8f 5f       	subi	r24, 0xFF	; 255
     b7c:	80 93 2a 01 	sts	0x012A, r24

	if(g_ticks==5){
     b80:	80 91 2a 01 	lds	r24, 0x012A
     b84:	85 30       	cpi	r24, 0x05	; 5
     b86:	79 f4       	brne	.+30     	; 0xba6 <HMI_CallbackDoor+0x38>

		LCD_clearScreen();
     b88:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
		LCD_displayString("Door is");
     b8c:	86 e6       	ldi	r24, 0x66	; 102
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
		LCD_moveCursor(1,0);
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
		LCD_displayString("Unlocked");
     b9c:	8e e6       	ldi	r24, 0x6E	; 110
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
     ba4:	1d c0       	rjmp	.+58     	; 0xbe0 <HMI_CallbackDoor+0x72>
	}else if(g_ticks==6){
     ba6:	80 91 2a 01 	lds	r24, 0x012A
     baa:	86 30       	cpi	r24, 0x06	; 6
     bac:	79 f4       	brne	.+30     	; 0xbcc <HMI_CallbackDoor+0x5e>

		LCD_clearScreen();
     bae:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
		LCD_displayString("Door is");
     bb2:	86 e6       	ldi	r24, 0x66	; 102
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
		LCD_moveCursor(1,0);
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
		LCD_displayString("Locking");
     bc2:	87 e7       	ldi	r24, 0x77	; 119
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
     bca:	0a c0       	rjmp	.+20     	; 0xbe0 <HMI_CallbackDoor+0x72>
	}else if(g_ticks==11){
     bcc:	80 91 2a 01 	lds	r24, 0x012A
     bd0:	8b 30       	cpi	r24, 0x0B	; 11
     bd2:	31 f4       	brne	.+12     	; 0xbe0 <HMI_CallbackDoor+0x72>

		LCD_clearScreen();
     bd4:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
		LCD_displayString("Door is Locked");
     bd8:	8f e7       	ldi	r24, 0x7F	; 127
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>


	}
}
     be0:	cf 91       	pop	r28
     be2:	df 91       	pop	r29
     be4:	08 95       	ret

00000be6 <APP_sendPassword>:

/*
 * Description: Function Sends the Password to Control Unit
 */
void APP_sendPassword(uint8* a_PassPtr){
     be6:	df 93       	push	r29
     be8:	cf 93       	push	r28
     bea:	00 d0       	rcall	.+0      	; 0xbec <APP_sendPassword+0x6>
     bec:	0f 92       	push	r0
     bee:	cd b7       	in	r28, 0x3d	; 61
     bf0:	de b7       	in	r29, 0x3e	; 62
     bf2:	9b 83       	std	Y+3, r25	; 0x03
     bf4:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 j=0; j<2; j++){
     bf6:	19 82       	std	Y+1, r1	; 0x01
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <APP_sendPassword+0x30>
		UART_sendByte(a_PassPtr[j]);
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	9b 81       	ldd	r25, Y+3	; 0x03
     c04:	fc 01       	movw	r30, r24
     c06:	e2 0f       	add	r30, r18
     c08:	f3 1f       	adc	r31, r19
     c0a:	80 81       	ld	r24, Z
     c0c:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>

/*
 * Description: Function Sends the Password to Control Unit
 */
void APP_sendPassword(uint8* a_PassPtr){
	for(uint8 j=0; j<2; j++){
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	89 81       	ldd	r24, Y+1	; 0x01
     c18:	82 30       	cpi	r24, 0x02	; 2
     c1a:	78 f3       	brcs	.-34     	; 0xbfa <APP_sendPassword+0x14>
		UART_sendByte(a_PassPtr[j]);
	}
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <HMI_setPassword>:


/*
 * Description: Function that sets the password of the system
 */
void HMI_setPassword(void){
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	ad 97       	sbiw	r28, 0x2d	; 45
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	f8 94       	cli
     c36:	de bf       	out	0x3e, r29	; 62
     c38:	0f be       	out	0x3f, r0	; 63
     c3a:	cd bf       	out	0x3d, r28	; 61

	do{
		g_Pass_1=0;
     c3c:	10 92 3b 01 	sts	0x013B, r1
     c40:	10 92 3a 01 	sts	0x013A, r1
		g_Pass_2=0;
     c44:	10 92 32 01 	sts	0x0132, r1
     c48:	10 92 31 01 	sts	0x0131, r1
		LCD_displayString("Plz enter pass:");
     c4c:	8e e8       	ldi	r24, 0x8E	; 142
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>

		LCD_moveCursor(1,0);
     c54:	81 e0       	ldi	r24, 0x01	; 1
     c56:	60 e0       	ldi	r22, 0x00	; 0
     c58:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
		for(i=0; i<5; i++){
     c5c:	10 92 30 01 	sts	0x0130, r1
     c60:	a4 c0       	rjmp	.+328    	; 0xdaa <HMI_setPassword+0x182>
			uint8 key=0xFF;
     c62:	8f ef       	ldi	r24, 0xFF	; 255
     c64:	8c a7       	std	Y+44, r24	; 0x2c
     c66:	75 c0       	rjmp	.+234    	; 0xd52 <HMI_setPassword+0x12a>
			while (key == 0xFF) {
				key = KEYPAD_getPressedKey();
     c68:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
     c6c:	8c a7       	std	Y+44, r24	; 0x2c
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	aa ef       	ldi	r26, 0xFA	; 250
     c74:	b3 e4       	ldi	r27, 0x43	; 67
     c76:	8f a3       	std	Y+39, r24	; 0x27
     c78:	98 a7       	std	Y+40, r25	; 0x28
     c7a:	a9 a7       	std	Y+41, r26	; 0x29
     c7c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7e:	6f a1       	ldd	r22, Y+39	; 0x27
     c80:	78 a5       	ldd	r23, Y+40	; 0x28
     c82:	89 a5       	ldd	r24, Y+41	; 0x29
     c84:	9a a5       	ldd	r25, Y+42	; 0x2a
     c86:	20 e0       	ldi	r18, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	4a ef       	ldi	r20, 0xFA	; 250
     c8c:	54 e4       	ldi	r21, 0x44	; 68
     c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c92:	dc 01       	movw	r26, r24
     c94:	cb 01       	movw	r24, r22
     c96:	8b a3       	std	Y+35, r24	; 0x23
     c98:	9c a3       	std	Y+36, r25	; 0x24
     c9a:	ad a3       	std	Y+37, r26	; 0x25
     c9c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c9e:	6b a1       	ldd	r22, Y+35	; 0x23
     ca0:	7c a1       	ldd	r23, Y+36	; 0x24
     ca2:	8d a1       	ldd	r24, Y+37	; 0x25
     ca4:	9e a1       	ldd	r25, Y+38	; 0x26
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 e8       	ldi	r20, 0x80	; 128
     cac:	5f e3       	ldi	r21, 0x3F	; 63
     cae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	2c f4       	brge	.+10     	; 0xcc0 <HMI_setPassword+0x98>
		__ticks = 1;
     cb6:	81 e0       	ldi	r24, 0x01	; 1
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	9a a3       	std	Y+34, r25	; 0x22
     cbc:	89 a3       	std	Y+33, r24	; 0x21
     cbe:	3f c0       	rjmp	.+126    	; 0xd3e <HMI_setPassword+0x116>
	else if (__tmp > 65535)
     cc0:	6b a1       	ldd	r22, Y+35	; 0x23
     cc2:	7c a1       	ldd	r23, Y+36	; 0x24
     cc4:	8d a1       	ldd	r24, Y+37	; 0x25
     cc6:	9e a1       	ldd	r25, Y+38	; 0x26
     cc8:	20 e0       	ldi	r18, 0x00	; 0
     cca:	3f ef       	ldi	r19, 0xFF	; 255
     ccc:	4f e7       	ldi	r20, 0x7F	; 127
     cce:	57 e4       	ldi	r21, 0x47	; 71
     cd0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd4:	18 16       	cp	r1, r24
     cd6:	4c f5       	brge	.+82     	; 0xd2a <HMI_setPassword+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd8:	6f a1       	ldd	r22, Y+39	; 0x27
     cda:	78 a5       	ldd	r23, Y+40	; 0x28
     cdc:	89 a5       	ldd	r24, Y+41	; 0x29
     cde:	9a a5       	ldd	r25, Y+42	; 0x2a
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e2       	ldi	r20, 0x20	; 32
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	bc 01       	movw	r22, r24
     cf2:	cd 01       	movw	r24, r26
     cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf8:	dc 01       	movw	r26, r24
     cfa:	cb 01       	movw	r24, r22
     cfc:	9a a3       	std	Y+34, r25	; 0x22
     cfe:	89 a3       	std	Y+33, r24	; 0x21
     d00:	0f c0       	rjmp	.+30     	; 0xd20 <HMI_setPassword+0xf8>
     d02:	88 ec       	ldi	r24, 0xC8	; 200
     d04:	90 e0       	ldi	r25, 0x00	; 0
     d06:	98 a3       	std	Y+32, r25	; 0x20
     d08:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d0a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d0c:	98 a1       	ldd	r25, Y+32	; 0x20
     d0e:	01 97       	sbiw	r24, 0x01	; 1
     d10:	f1 f7       	brne	.-4      	; 0xd0e <HMI_setPassword+0xe6>
     d12:	98 a3       	std	Y+32, r25	; 0x20
     d14:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d16:	89 a1       	ldd	r24, Y+33	; 0x21
     d18:	9a a1       	ldd	r25, Y+34	; 0x22
     d1a:	01 97       	sbiw	r24, 0x01	; 1
     d1c:	9a a3       	std	Y+34, r25	; 0x22
     d1e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d20:	89 a1       	ldd	r24, Y+33	; 0x21
     d22:	9a a1       	ldd	r25, Y+34	; 0x22
     d24:	00 97       	sbiw	r24, 0x00	; 0
     d26:	69 f7       	brne	.-38     	; 0xd02 <HMI_setPassword+0xda>
     d28:	14 c0       	rjmp	.+40     	; 0xd52 <HMI_setPassword+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d2a:	6b a1       	ldd	r22, Y+35	; 0x23
     d2c:	7c a1       	ldd	r23, Y+36	; 0x24
     d2e:	8d a1       	ldd	r24, Y+37	; 0x25
     d30:	9e a1       	ldd	r25, Y+38	; 0x26
     d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d36:	dc 01       	movw	r26, r24
     d38:	cb 01       	movw	r24, r22
     d3a:	9a a3       	std	Y+34, r25	; 0x22
     d3c:	89 a3       	std	Y+33, r24	; 0x21
     d3e:	89 a1       	ldd	r24, Y+33	; 0x21
     d40:	9a a1       	ldd	r25, Y+34	; 0x22
     d42:	9e 8f       	std	Y+30, r25	; 0x1e
     d44:	8d 8f       	std	Y+29, r24	; 0x1d
     d46:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d48:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	f1 f7       	brne	.-4      	; 0xd4a <HMI_setPassword+0x122>
     d4e:	9e 8f       	std	Y+30, r25	; 0x1e
     d50:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_displayString("Plz enter pass:");

		LCD_moveCursor(1,0);
		for(i=0; i<5; i++){
			uint8 key=0xFF;
			while (key == 0xFF) {
     d52:	8c a5       	ldd	r24, Y+44	; 0x2c
     d54:	8f 3f       	cpi	r24, 0xFF	; 255
     d56:	09 f4       	brne	.+2      	; 0xd5a <HMI_setPassword+0x132>
     d58:	87 cf       	rjmp	.-242    	; 0xc68 <HMI_setPassword+0x40>
				_delay_ms(500);
			}
			/*
			 * To get a number
			 */
			if(	key<=9 && key>=0){
     d5a:	8c a5       	ldd	r24, Y+44	; 0x2c
     d5c:	8a 30       	cpi	r24, 0x0A	; 10
     d5e:	d8 f4       	brcc	.+54     	; 0xd96 <HMI_setPassword+0x16e>

				LCD_displayCharacter('*');
     d60:	8a e2       	ldi	r24, 0x2A	; 42
     d62:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayCharacter>
				g_Pass_1=g_Pass_1*10+key;
     d66:	80 91 3a 01 	lds	r24, 0x013A
     d6a:	90 91 3b 01 	lds	r25, 0x013B
     d6e:	9c 01       	movw	r18, r24
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	c9 01       	movw	r24, r18
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	28 0f       	add	r18, r24
     d80:	39 1f       	adc	r19, r25
     d82:	8c a5       	ldd	r24, Y+44	; 0x2c
     d84:	88 2f       	mov	r24, r24
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	82 0f       	add	r24, r18
     d8a:	93 1f       	adc	r25, r19
     d8c:	90 93 3b 01 	sts	0x013B, r25
     d90:	80 93 3a 01 	sts	0x013A, r24
     d94:	05 c0       	rjmp	.+10     	; 0xda0 <HMI_setPassword+0x178>
			}else{
				/*
				 * To repeat until i get 5 numbers
				 */
				i--;
     d96:	80 91 30 01 	lds	r24, 0x0130
     d9a:	81 50       	subi	r24, 0x01	; 1
     d9c:	80 93 30 01 	sts	0x0130, r24
		g_Pass_1=0;
		g_Pass_2=0;
		LCD_displayString("Plz enter pass:");

		LCD_moveCursor(1,0);
		for(i=0; i<5; i++){
     da0:	80 91 30 01 	lds	r24, 0x0130
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 30 01 	sts	0x0130, r24
     daa:	80 91 30 01 	lds	r24, 0x0130
     dae:	85 30       	cpi	r24, 0x05	; 5
     db0:	08 f4       	brcc	.+2      	; 0xdb4 <HMI_setPassword+0x18c>
     db2:	57 cf       	rjmp	.-338    	; 0xc62 <HMI_setPassword+0x3a>

		}
		/*
		 * Wait till Enter is Pressed
		 */
		while(KEYPAD_getPressedKey()!='=');
     db4:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
     db8:	8d 33       	cpi	r24, 0x3D	; 61
     dba:	e1 f7       	brne	.-8      	; 0xdb4 <HMI_setPassword+0x18c>
		/*
		 * Tell the Control unit im sending the first
		 * Password
		 */
		UART_sendByte(SENDING_FIRST_PASS);
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
		APP_sendPassword((uint8*)&g_Pass_1);
     dc2:	8a e3       	ldi	r24, 0x3A	; 58
     dc4:	91 e0       	ldi	r25, 0x01	; 1
     dc6:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <APP_sendPassword>

		LCD_clearScreen();
     dca:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
		LCD_displayString("Plz re-enter the");
     dce:	8e e9       	ldi	r24, 0x9E	; 158
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
		LCD_moveCursor(1,0);
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
		LCD_displayString("same pass:");
     dde:	8f ea       	ldi	r24, 0xAF	; 175
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
		for(i=0; i<5; i++){
     de6:	10 92 30 01 	sts	0x0130, r1
     dea:	a4 c0       	rjmp	.+328    	; 0xf34 <HMI_setPassword+0x30c>
			uint8 key=0xFF;
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	8b a7       	std	Y+43, r24	; 0x2b
     df0:	75 c0       	rjmp	.+234    	; 0xedc <HMI_setPassword+0x2b4>
			while (key == 0xFF) {
				key = KEYPAD_getPressedKey();
     df2:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
     df6:	8b a7       	std	Y+43, r24	; 0x2b
     df8:	80 e0       	ldi	r24, 0x00	; 0
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	aa ef       	ldi	r26, 0xFA	; 250
     dfe:	b3 e4       	ldi	r27, 0x43	; 67
     e00:	89 8f       	std	Y+25, r24	; 0x19
     e02:	9a 8f       	std	Y+26, r25	; 0x1a
     e04:	ab 8f       	std	Y+27, r26	; 0x1b
     e06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e08:	69 8d       	ldd	r22, Y+25	; 0x19
     e0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	4a ef       	ldi	r20, 0xFA	; 250
     e16:	54 e4       	ldi	r21, 0x44	; 68
     e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	8d 8b       	std	Y+21, r24	; 0x15
     e22:	9e 8b       	std	Y+22, r25	; 0x16
     e24:	af 8b       	std	Y+23, r26	; 0x17
     e26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e28:	6d 89       	ldd	r22, Y+21	; 0x15
     e2a:	7e 89       	ldd	r23, Y+22	; 0x16
     e2c:	8f 89       	ldd	r24, Y+23	; 0x17
     e2e:	98 8d       	ldd	r25, Y+24	; 0x18
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	40 e8       	ldi	r20, 0x80	; 128
     e36:	5f e3       	ldi	r21, 0x3F	; 63
     e38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e3c:	88 23       	and	r24, r24
     e3e:	2c f4       	brge	.+10     	; 0xe4a <HMI_setPassword+0x222>
		__ticks = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	9c 8b       	std	Y+20, r25	; 0x14
     e46:	8b 8b       	std	Y+19, r24	; 0x13
     e48:	3f c0       	rjmp	.+126    	; 0xec8 <HMI_setPassword+0x2a0>
	else if (__tmp > 65535)
     e4a:	6d 89       	ldd	r22, Y+21	; 0x15
     e4c:	7e 89       	ldd	r23, Y+22	; 0x16
     e4e:	8f 89       	ldd	r24, Y+23	; 0x17
     e50:	98 8d       	ldd	r25, Y+24	; 0x18
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	3f ef       	ldi	r19, 0xFF	; 255
     e56:	4f e7       	ldi	r20, 0x7F	; 127
     e58:	57 e4       	ldi	r21, 0x47	; 71
     e5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e5e:	18 16       	cp	r1, r24
     e60:	4c f5       	brge	.+82     	; 0xeb4 <HMI_setPassword+0x28c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e62:	69 8d       	ldd	r22, Y+25	; 0x19
     e64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e2       	ldi	r20, 0x20	; 32
     e70:	51 e4       	ldi	r21, 0x41	; 65
     e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	9c 8b       	std	Y+20, r25	; 0x14
     e88:	8b 8b       	std	Y+19, r24	; 0x13
     e8a:	0f c0       	rjmp	.+30     	; 0xeaa <HMI_setPassword+0x282>
     e8c:	88 ec       	ldi	r24, 0xC8	; 200
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	9a 8b       	std	Y+18, r25	; 0x12
     e92:	89 8b       	std	Y+17, r24	; 0x11
     e94:	89 89       	ldd	r24, Y+17	; 0x11
     e96:	9a 89       	ldd	r25, Y+18	; 0x12
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	f1 f7       	brne	.-4      	; 0xe98 <HMI_setPassword+0x270>
     e9c:	9a 8b       	std	Y+18, r25	; 0x12
     e9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ea0:	8b 89       	ldd	r24, Y+19	; 0x13
     ea2:	9c 89       	ldd	r25, Y+20	; 0x14
     ea4:	01 97       	sbiw	r24, 0x01	; 1
     ea6:	9c 8b       	std	Y+20, r25	; 0x14
     ea8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     eaa:	8b 89       	ldd	r24, Y+19	; 0x13
     eac:	9c 89       	ldd	r25, Y+20	; 0x14
     eae:	00 97       	sbiw	r24, 0x00	; 0
     eb0:	69 f7       	brne	.-38     	; 0xe8c <HMI_setPassword+0x264>
     eb2:	14 c0       	rjmp	.+40     	; 0xedc <HMI_setPassword+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb4:	6d 89       	ldd	r22, Y+21	; 0x15
     eb6:	7e 89       	ldd	r23, Y+22	; 0x16
     eb8:	8f 89       	ldd	r24, Y+23	; 0x17
     eba:	98 8d       	ldd	r25, Y+24	; 0x18
     ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec0:	dc 01       	movw	r26, r24
     ec2:	cb 01       	movw	r24, r22
     ec4:	9c 8b       	std	Y+20, r25	; 0x14
     ec6:	8b 8b       	std	Y+19, r24	; 0x13
     ec8:	8b 89       	ldd	r24, Y+19	; 0x13
     eca:	9c 89       	ldd	r25, Y+20	; 0x14
     ecc:	98 8b       	std	Y+16, r25	; 0x10
     ece:	8f 87       	std	Y+15, r24	; 0x0f
     ed0:	8f 85       	ldd	r24, Y+15	; 0x0f
     ed2:	98 89       	ldd	r25, Y+16	; 0x10
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <HMI_setPassword+0x2ac>
     ed8:	98 8b       	std	Y+16, r25	; 0x10
     eda:	8f 87       	std	Y+15, r24	; 0x0f
		LCD_displayString("Plz re-enter the");
		LCD_moveCursor(1,0);
		LCD_displayString("same pass:");
		for(i=0; i<5; i++){
			uint8 key=0xFF;
			while (key == 0xFF) {
     edc:	8b a5       	ldd	r24, Y+43	; 0x2b
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	09 f4       	brne	.+2      	; 0xee4 <HMI_setPassword+0x2bc>
     ee2:	87 cf       	rjmp	.-242    	; 0xdf2 <HMI_setPassword+0x1ca>
				_delay_ms(500);
			}
			/*
			 * To get a number
			 */
			if(	key<=9 && key>=0){
     ee4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ee6:	8a 30       	cpi	r24, 0x0A	; 10
     ee8:	d8 f4       	brcc	.+54     	; 0xf20 <HMI_setPassword+0x2f8>

				LCD_displayCharacter('*');
     eea:	8a e2       	ldi	r24, 0x2A	; 42
     eec:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayCharacter>
				g_Pass_2=g_Pass_2*10+key;
     ef0:	80 91 31 01 	lds	r24, 0x0131
     ef4:	90 91 32 01 	lds	r25, 0x0132
     ef8:	9c 01       	movw	r18, r24
     efa:	22 0f       	add	r18, r18
     efc:	33 1f       	adc	r19, r19
     efe:	c9 01       	movw	r24, r18
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	88 0f       	add	r24, r24
     f06:	99 1f       	adc	r25, r25
     f08:	28 0f       	add	r18, r24
     f0a:	39 1f       	adc	r19, r25
     f0c:	8b a5       	ldd	r24, Y+43	; 0x2b
     f0e:	88 2f       	mov	r24, r24
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	90 93 32 01 	sts	0x0132, r25
     f1a:	80 93 31 01 	sts	0x0131, r24
     f1e:	05 c0       	rjmp	.+10     	; 0xf2a <HMI_setPassword+0x302>
			}else{
				/*
				 * To repeat until i get 5 numbers
				 */
				i--;
     f20:	80 91 30 01 	lds	r24, 0x0130
     f24:	81 50       	subi	r24, 0x01	; 1
     f26:	80 93 30 01 	sts	0x0130, r24

		LCD_clearScreen();
		LCD_displayString("Plz re-enter the");
		LCD_moveCursor(1,0);
		LCD_displayString("same pass:");
		for(i=0; i<5; i++){
     f2a:	80 91 30 01 	lds	r24, 0x0130
     f2e:	8f 5f       	subi	r24, 0xFF	; 255
     f30:	80 93 30 01 	sts	0x0130, r24
     f34:	80 91 30 01 	lds	r24, 0x0130
     f38:	85 30       	cpi	r24, 0x05	; 5
     f3a:	08 f4       	brcc	.+2      	; 0xf3e <HMI_setPassword+0x316>
     f3c:	57 cf       	rjmp	.-338    	; 0xdec <HMI_setPassword+0x1c4>

		}
		/*
		 * Wait till the Enter is pressed
		 */
		while(KEYPAD_getPressedKey()!='=');
     f3e:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
     f42:	8d 33       	cpi	r24, 0x3D	; 61
     f44:	e1 f7       	brne	.-8      	; 0xf3e <HMI_setPassword+0x316>

		/*
		 * Tell the Control unit im sending the second
		 * Password
		 */
		UART_sendByte(SENDING_SECOND_PASS);
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
		/*
		 * Send the Second password
		 */
		APP_sendPassword((uint8*)&g_Pass_2);
     f4c:	81 e3       	ldi	r24, 0x31	; 49
     f4e:	91 e0       	ldi	r25, 0x01	; 1
     f50:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <APP_sendPassword>
		uint8 command=UART_recieveByte();
     f54:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <UART_recieveByte>
     f58:	8d a7       	std	Y+45, r24	; 0x2d
		/*
		 * Wait for the control unit to tell u if
		 * the Passwords match
		 */
		if(command!=PASS_MATCH){
     f5a:	8d a5       	ldd	r24, Y+45	; 0x2d
     f5c:	8a 30       	cpi	r24, 0x0A	; 10
     f5e:	09 f4       	brne	.+2      	; 0xf62 <HMI_setPassword+0x33a>
     f60:	7e c0       	rjmp	.+252    	; 0x105e <HMI_setPassword+0x436>
			g_MistakeCount++;
     f62:	80 91 2c 01 	lds	r24, 0x012C
     f66:	8f 5f       	subi	r24, 0xFF	; 255
     f68:	80 93 2c 01 	sts	0x012C, r24
			LCD_clearScreen();
     f6c:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
			LCD_displayString("Wrong Password");
     f70:	8a eb       	ldi	r24, 0xBA	; 186
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	aa ef       	ldi	r26, 0xFA	; 250
     f7e:	b4 e4       	ldi	r27, 0x44	; 68
     f80:	8b 87       	std	Y+11, r24	; 0x0b
     f82:	9c 87       	std	Y+12, r25	; 0x0c
     f84:	ad 87       	std	Y+13, r26	; 0x0d
     f86:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f88:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f8e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4a ef       	ldi	r20, 0xFA	; 250
     f96:	54 e4       	ldi	r21, 0x44	; 68
     f98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	8f 83       	std	Y+7, r24	; 0x07
     fa2:	98 87       	std	Y+8, r25	; 0x08
     fa4:	a9 87       	std	Y+9, r26	; 0x09
     fa6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     fa8:	6f 81       	ldd	r22, Y+7	; 0x07
     faa:	78 85       	ldd	r23, Y+8	; 0x08
     fac:	89 85       	ldd	r24, Y+9	; 0x09
     fae:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	40 e8       	ldi	r20, 0x80	; 128
     fb6:	5f e3       	ldi	r21, 0x3F	; 63
     fb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fbc:	88 23       	and	r24, r24
     fbe:	2c f4       	brge	.+10     	; 0xfca <HMI_setPassword+0x3a2>
		__ticks = 1;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
     fc8:	3f c0       	rjmp	.+126    	; 0x1048 <HMI_setPassword+0x420>
	else if (__tmp > 65535)
     fca:	6f 81       	ldd	r22, Y+7	; 0x07
     fcc:	78 85       	ldd	r23, Y+8	; 0x08
     fce:	89 85       	ldd	r24, Y+9	; 0x09
     fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	3f ef       	ldi	r19, 0xFF	; 255
     fd6:	4f e7       	ldi	r20, 0x7F	; 127
     fd8:	57 e4       	ldi	r21, 0x47	; 71
     fda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fde:	18 16       	cp	r1, r24
     fe0:	4c f5       	brge	.+82     	; 0x1034 <HMI_setPassword+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fe2:	6b 85       	ldd	r22, Y+11	; 0x0b
     fe4:	7c 85       	ldd	r23, Y+12	; 0x0c
     fe6:	8d 85       	ldd	r24, Y+13	; 0x0d
     fe8:	9e 85       	ldd	r25, Y+14	; 0x0e
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e2       	ldi	r20, 0x20	; 32
     ff0:	51 e4       	ldi	r21, 0x41	; 65
     ff2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	bc 01       	movw	r22, r24
     ffc:	cd 01       	movw	r24, r26
     ffe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	9e 83       	std	Y+6, r25	; 0x06
    1008:	8d 83       	std	Y+5, r24	; 0x05
    100a:	0f c0       	rjmp	.+30     	; 0x102a <HMI_setPassword+0x402>
    100c:	88 ec       	ldi	r24, 0xC8	; 200
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	01 97       	sbiw	r24, 0x01	; 1
    101a:	f1 f7       	brne	.-4      	; 0x1018 <HMI_setPassword+0x3f0>
    101c:	9c 83       	std	Y+4, r25	; 0x04
    101e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1020:	8d 81       	ldd	r24, Y+5	; 0x05
    1022:	9e 81       	ldd	r25, Y+6	; 0x06
    1024:	01 97       	sbiw	r24, 0x01	; 1
    1026:	9e 83       	std	Y+6, r25	; 0x06
    1028:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    102a:	8d 81       	ldd	r24, Y+5	; 0x05
    102c:	9e 81       	ldd	r25, Y+6	; 0x06
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	69 f7       	brne	.-38     	; 0x100c <HMI_setPassword+0x3e4>
    1032:	19 c0       	rjmp	.+50     	; 0x1066 <HMI_setPassword+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1040:	dc 01       	movw	r26, r24
    1042:	cb 01       	movw	r24, r22
    1044:	9e 83       	std	Y+6, r25	; 0x06
    1046:	8d 83       	std	Y+5, r24	; 0x05
    1048:	8d 81       	ldd	r24, Y+5	; 0x05
    104a:	9e 81       	ldd	r25, Y+6	; 0x06
    104c:	9a 83       	std	Y+2, r25	; 0x02
    104e:	89 83       	std	Y+1, r24	; 0x01
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	01 97       	sbiw	r24, 0x01	; 1
    1056:	f1 f7       	brne	.-4      	; 0x1054 <HMI_setPassword+0x42c>
    1058:	9a 83       	std	Y+2, r25	; 0x02
    105a:	89 83       	std	Y+1, r24	; 0x01
    105c:	04 c0       	rjmp	.+8      	; 0x1066 <HMI_setPassword+0x43e>
			_delay_ms(2000);
		}else{
			LCD_clearScreen();
    105e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
			g_MistakeCount=0;
    1062:	10 92 2c 01 	sts	0x012C, r1
		}
		LCD_clearScreen();
    1066:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
	}
	/*
	 * Repeat until two matched passwords are entered
	 */
	while(g_MistakeCount!=0);
    106a:	80 91 2c 01 	lds	r24, 0x012C
    106e:	88 23       	and	r24, r24
    1070:	09 f0       	breq	.+2      	; 0x1074 <HMI_setPassword+0x44c>
    1072:	e4 cd       	rjmp	.-1080   	; 0xc3c <HMI_setPassword+0x14>

}
    1074:	ad 96       	adiw	r28, 0x2d	; 45
    1076:	0f b6       	in	r0, 0x3f	; 63
    1078:	f8 94       	cli
    107a:	de bf       	out	0x3e, r29	; 62
    107c:	0f be       	out	0x3f, r0	; 63
    107e:	cd bf       	out	0x3d, r28	; 61
    1080:	cf 91       	pop	r28
    1082:	df 91       	pop	r29
    1084:	08 95       	ret

00001086 <HMI_Menu>:

/*
 * Function that displays and do the main options of the system
 */
void HMI_Menu(){
    1086:	0f 93       	push	r16
    1088:	1f 93       	push	r17
    108a:	df 93       	push	r29
    108c:	cf 93       	push	r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	ca 57       	subi	r28, 0x7A	; 122
    1094:	d0 40       	sbci	r29, 0x00	; 0
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_displayString("+ : Open Door");
    10a0:	89 ec       	ldi	r24, 0xC9	; 201
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
	LCD_moveCursor(1,0);
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	60 e0       	ldi	r22, 0x00	; 0
    10ac:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
	LCD_displayString("- : Change Pass");
    10b0:	87 ed       	ldi	r24, 0xD7	; 215
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
	key = KEYPAD_getPressedKey();
    10b8:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
    10bc:	fe 01       	movw	r30, r28
    10be:	e9 5a       	subi	r30, 0xA9	; 169
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	80 83       	st	Z, r24
    10c4:	fe 01       	movw	r30, r28
    10c6:	ef 5a       	subi	r30, 0xAF	; 175
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a8 e4       	ldi	r26, 0x48	; 72
    10d0:	b2 e4       	ldi	r27, 0x42	; 66
    10d2:	80 83       	st	Z, r24
    10d4:	91 83       	std	Z+1, r25	; 0x01
    10d6:	a2 83       	std	Z+2, r26	; 0x02
    10d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10da:	8e 01       	movw	r16, r28
    10dc:	03 5b       	subi	r16, 0xB3	; 179
    10de:	1f 4f       	sbci	r17, 0xFF	; 255
    10e0:	fe 01       	movw	r30, r28
    10e2:	ef 5a       	subi	r30, 0xAF	; 175
    10e4:	ff 4f       	sbci	r31, 0xFF	; 255
    10e6:	60 81       	ld	r22, Z
    10e8:	71 81       	ldd	r23, Z+1	; 0x01
    10ea:	82 81       	ldd	r24, Z+2	; 0x02
    10ec:	93 81       	ldd	r25, Z+3	; 0x03
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	4a ef       	ldi	r20, 0xFA	; 250
    10f4:	54 e4       	ldi	r21, 0x44	; 68
    10f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10fa:	dc 01       	movw	r26, r24
    10fc:	cb 01       	movw	r24, r22
    10fe:	f8 01       	movw	r30, r16
    1100:	80 83       	st	Z, r24
    1102:	91 83       	std	Z+1, r25	; 0x01
    1104:	a2 83       	std	Z+2, r26	; 0x02
    1106:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1108:	fe 01       	movw	r30, r28
    110a:	e3 5b       	subi	r30, 0xB3	; 179
    110c:	ff 4f       	sbci	r31, 0xFF	; 255
    110e:	60 81       	ld	r22, Z
    1110:	71 81       	ldd	r23, Z+1	; 0x01
    1112:	82 81       	ldd	r24, Z+2	; 0x02
    1114:	93 81       	ldd	r25, Z+3	; 0x03
    1116:	20 e0       	ldi	r18, 0x00	; 0
    1118:	30 e0       	ldi	r19, 0x00	; 0
    111a:	40 e8       	ldi	r20, 0x80	; 128
    111c:	5f e3       	ldi	r21, 0x3F	; 63
    111e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1122:	88 23       	and	r24, r24
    1124:	44 f4       	brge	.+16     	; 0x1136 <HMI_Menu+0xb0>
		__ticks = 1;
    1126:	fe 01       	movw	r30, r28
    1128:	e5 5b       	subi	r30, 0xB5	; 181
    112a:	ff 4f       	sbci	r31, 0xFF	; 255
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	91 83       	std	Z+1, r25	; 0x01
    1132:	80 83       	st	Z, r24
    1134:	64 c0       	rjmp	.+200    	; 0x11fe <HMI_Menu+0x178>
	else if (__tmp > 65535)
    1136:	fe 01       	movw	r30, r28
    1138:	e3 5b       	subi	r30, 0xB3	; 179
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	60 81       	ld	r22, Z
    113e:	71 81       	ldd	r23, Z+1	; 0x01
    1140:	82 81       	ldd	r24, Z+2	; 0x02
    1142:	93 81       	ldd	r25, Z+3	; 0x03
    1144:	20 e0       	ldi	r18, 0x00	; 0
    1146:	3f ef       	ldi	r19, 0xFF	; 255
    1148:	4f e7       	ldi	r20, 0x7F	; 127
    114a:	57 e4       	ldi	r21, 0x47	; 71
    114c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1150:	18 16       	cp	r1, r24
    1152:	0c f0       	brlt	.+2      	; 0x1156 <HMI_Menu+0xd0>
    1154:	43 c0       	rjmp	.+134    	; 0x11dc <HMI_Menu+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1156:	fe 01       	movw	r30, r28
    1158:	ef 5a       	subi	r30, 0xAF	; 175
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e2       	ldi	r20, 0x20	; 32
    116a:	51 e4       	ldi	r21, 0x41	; 65
    116c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1170:	dc 01       	movw	r26, r24
    1172:	cb 01       	movw	r24, r22
    1174:	8e 01       	movw	r16, r28
    1176:	05 5b       	subi	r16, 0xB5	; 181
    1178:	1f 4f       	sbci	r17, 0xFF	; 255
    117a:	bc 01       	movw	r22, r24
    117c:	cd 01       	movw	r24, r26
    117e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1182:	dc 01       	movw	r26, r24
    1184:	cb 01       	movw	r24, r22
    1186:	f8 01       	movw	r30, r16
    1188:	91 83       	std	Z+1, r25	; 0x01
    118a:	80 83       	st	Z, r24
    118c:	1f c0       	rjmp	.+62     	; 0x11cc <HMI_Menu+0x146>
    118e:	fe 01       	movw	r30, r28
    1190:	e7 5b       	subi	r30, 0xB7	; 183
    1192:	ff 4f       	sbci	r31, 0xFF	; 255
    1194:	88 ec       	ldi	r24, 0xC8	; 200
    1196:	90 e0       	ldi	r25, 0x00	; 0
    1198:	91 83       	std	Z+1, r25	; 0x01
    119a:	80 83       	st	Z, r24
    119c:	fe 01       	movw	r30, r28
    119e:	e7 5b       	subi	r30, 0xB7	; 183
    11a0:	ff 4f       	sbci	r31, 0xFF	; 255
    11a2:	80 81       	ld	r24, Z
    11a4:	91 81       	ldd	r25, Z+1	; 0x01
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <HMI_Menu+0x120>
    11aa:	fe 01       	movw	r30, r28
    11ac:	e7 5b       	subi	r30, 0xB7	; 183
    11ae:	ff 4f       	sbci	r31, 0xFF	; 255
    11b0:	91 83       	std	Z+1, r25	; 0x01
    11b2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b4:	de 01       	movw	r26, r28
    11b6:	a5 5b       	subi	r26, 0xB5	; 181
    11b8:	bf 4f       	sbci	r27, 0xFF	; 255
    11ba:	fe 01       	movw	r30, r28
    11bc:	e5 5b       	subi	r30, 0xB5	; 181
    11be:	ff 4f       	sbci	r31, 0xFF	; 255
    11c0:	80 81       	ld	r24, Z
    11c2:	91 81       	ldd	r25, Z+1	; 0x01
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	11 96       	adiw	r26, 0x01	; 1
    11c8:	9c 93       	st	X, r25
    11ca:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11cc:	fe 01       	movw	r30, r28
    11ce:	e5 5b       	subi	r30, 0xB5	; 181
    11d0:	ff 4f       	sbci	r31, 0xFF	; 255
    11d2:	80 81       	ld	r24, Z
    11d4:	91 81       	ldd	r25, Z+1	; 0x01
    11d6:	00 97       	sbiw	r24, 0x00	; 0
    11d8:	d1 f6       	brne	.-76     	; 0x118e <HMI_Menu+0x108>
    11da:	b4 c0       	rjmp	.+360    	; 0x1344 <HMI_Menu+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11dc:	8e 01       	movw	r16, r28
    11de:	05 5b       	subi	r16, 0xB5	; 181
    11e0:	1f 4f       	sbci	r17, 0xFF	; 255
    11e2:	fe 01       	movw	r30, r28
    11e4:	e3 5b       	subi	r30, 0xB3	; 179
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	60 81       	ld	r22, Z
    11ea:	71 81       	ldd	r23, Z+1	; 0x01
    11ec:	82 81       	ldd	r24, Z+2	; 0x02
    11ee:	93 81       	ldd	r25, Z+3	; 0x03
    11f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f4:	dc 01       	movw	r26, r24
    11f6:	cb 01       	movw	r24, r22
    11f8:	f8 01       	movw	r30, r16
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
    11fe:	de 01       	movw	r26, r28
    1200:	a9 5b       	subi	r26, 0xB9	; 185
    1202:	bf 4f       	sbci	r27, 0xFF	; 255
    1204:	fe 01       	movw	r30, r28
    1206:	e5 5b       	subi	r30, 0xB5	; 181
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	11 96       	adiw	r26, 0x01	; 1
    1210:	9c 93       	st	X, r25
    1212:	8e 93       	st	-X, r24
    1214:	fe 01       	movw	r30, r28
    1216:	e9 5b       	subi	r30, 0xB9	; 185
    1218:	ff 4f       	sbci	r31, 0xFF	; 255
    121a:	80 81       	ld	r24, Z
    121c:	91 81       	ldd	r25, Z+1	; 0x01
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	f1 f7       	brne	.-4      	; 0x121e <HMI_Menu+0x198>
    1222:	fe 01       	movw	r30, r28
    1224:	e9 5b       	subi	r30, 0xB9	; 185
    1226:	ff 4f       	sbci	r31, 0xFF	; 255
    1228:	91 83       	std	Z+1, r25	; 0x01
    122a:	80 83       	st	Z, r24
    122c:	8b c0       	rjmp	.+278    	; 0x1344 <HMI_Menu+0x2be>
	_delay_ms(50);
	while(key!='+' && key!='-'){
		key = KEYPAD_getPressedKey();
    122e:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
    1232:	fe 01       	movw	r30, r28
    1234:	e9 5a       	subi	r30, 0xA9	; 169
    1236:	ff 4f       	sbci	r31, 0xFF	; 255
    1238:	80 83       	st	Z, r24
    123a:	fe 01       	movw	r30, r28
    123c:	ed 5b       	subi	r30, 0xBD	; 189
    123e:	ff 4f       	sbci	r31, 0xFF	; 255
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	aa ef       	ldi	r26, 0xFA	; 250
    1246:	b3 e4       	ldi	r27, 0x43	; 67
    1248:	80 83       	st	Z, r24
    124a:	91 83       	std	Z+1, r25	; 0x01
    124c:	a2 83       	std	Z+2, r26	; 0x02
    124e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1250:	8e 01       	movw	r16, r28
    1252:	01 5c       	subi	r16, 0xC1	; 193
    1254:	1f 4f       	sbci	r17, 0xFF	; 255
    1256:	fe 01       	movw	r30, r28
    1258:	ed 5b       	subi	r30, 0xBD	; 189
    125a:	ff 4f       	sbci	r31, 0xFF	; 255
    125c:	60 81       	ld	r22, Z
    125e:	71 81       	ldd	r23, Z+1	; 0x01
    1260:	82 81       	ldd	r24, Z+2	; 0x02
    1262:	93 81       	ldd	r25, Z+3	; 0x03
    1264:	20 e0       	ldi	r18, 0x00	; 0
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	4a ef       	ldi	r20, 0xFA	; 250
    126a:	54 e4       	ldi	r21, 0x44	; 68
    126c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1270:	dc 01       	movw	r26, r24
    1272:	cb 01       	movw	r24, r22
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
    1278:	91 83       	std	Z+1, r25	; 0x01
    127a:	a2 83       	std	Z+2, r26	; 0x02
    127c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    127e:	fe 01       	movw	r30, r28
    1280:	ff 96       	adiw	r30, 0x3f	; 63
    1282:	60 81       	ld	r22, Z
    1284:	71 81       	ldd	r23, Z+1	; 0x01
    1286:	82 81       	ldd	r24, Z+2	; 0x02
    1288:	93 81       	ldd	r25, Z+3	; 0x03
    128a:	20 e0       	ldi	r18, 0x00	; 0
    128c:	30 e0       	ldi	r19, 0x00	; 0
    128e:	40 e8       	ldi	r20, 0x80	; 128
    1290:	5f e3       	ldi	r21, 0x3F	; 63
    1292:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1296:	88 23       	and	r24, r24
    1298:	2c f4       	brge	.+10     	; 0x12a4 <HMI_Menu+0x21e>
		__ticks = 1;
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	9e af       	std	Y+62, r25	; 0x3e
    12a0:	8d af       	std	Y+61, r24	; 0x3d
    12a2:	46 c0       	rjmp	.+140    	; 0x1330 <HMI_Menu+0x2aa>
	else if (__tmp > 65535)
    12a4:	fe 01       	movw	r30, r28
    12a6:	ff 96       	adiw	r30, 0x3f	; 63
    12a8:	60 81       	ld	r22, Z
    12aa:	71 81       	ldd	r23, Z+1	; 0x01
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	93 81       	ldd	r25, Z+3	; 0x03
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	3f ef       	ldi	r19, 0xFF	; 255
    12b4:	4f e7       	ldi	r20, 0x7F	; 127
    12b6:	57 e4       	ldi	r21, 0x47	; 71
    12b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12bc:	18 16       	cp	r1, r24
    12be:	64 f5       	brge	.+88     	; 0x1318 <HMI_Menu+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12c0:	fe 01       	movw	r30, r28
    12c2:	ed 5b       	subi	r30, 0xBD	; 189
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	82 81       	ldd	r24, Z+2	; 0x02
    12cc:	93 81       	ldd	r25, Z+3	; 0x03
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	40 e2       	ldi	r20, 0x20	; 32
    12d4:	51 e4       	ldi	r21, 0x41	; 65
    12d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	bc 01       	movw	r22, r24
    12e0:	cd 01       	movw	r24, r26
    12e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e6:	dc 01       	movw	r26, r24
    12e8:	cb 01       	movw	r24, r22
    12ea:	9e af       	std	Y+62, r25	; 0x3e
    12ec:	8d af       	std	Y+61, r24	; 0x3d
    12ee:	0f c0       	rjmp	.+30     	; 0x130e <HMI_Menu+0x288>
    12f0:	88 ec       	ldi	r24, 0xC8	; 200
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9c af       	std	Y+60, r25	; 0x3c
    12f6:	8b af       	std	Y+59, r24	; 0x3b
    12f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    12fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	f1 f7       	brne	.-4      	; 0x12fc <HMI_Menu+0x276>
    1300:	9c af       	std	Y+60, r25	; 0x3c
    1302:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1304:	8d ad       	ldd	r24, Y+61	; 0x3d
    1306:	9e ad       	ldd	r25, Y+62	; 0x3e
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9e af       	std	Y+62, r25	; 0x3e
    130c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    130e:	8d ad       	ldd	r24, Y+61	; 0x3d
    1310:	9e ad       	ldd	r25, Y+62	; 0x3e
    1312:	00 97       	sbiw	r24, 0x00	; 0
    1314:	69 f7       	brne	.-38     	; 0x12f0 <HMI_Menu+0x26a>
    1316:	16 c0       	rjmp	.+44     	; 0x1344 <HMI_Menu+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1318:	fe 01       	movw	r30, r28
    131a:	ff 96       	adiw	r30, 0x3f	; 63
    131c:	60 81       	ld	r22, Z
    131e:	71 81       	ldd	r23, Z+1	; 0x01
    1320:	82 81       	ldd	r24, Z+2	; 0x02
    1322:	93 81       	ldd	r25, Z+3	; 0x03
    1324:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1328:	dc 01       	movw	r26, r24
    132a:	cb 01       	movw	r24, r22
    132c:	9e af       	std	Y+62, r25	; 0x3e
    132e:	8d af       	std	Y+61, r24	; 0x3d
    1330:	8d ad       	ldd	r24, Y+61	; 0x3d
    1332:	9e ad       	ldd	r25, Y+62	; 0x3e
    1334:	9a af       	std	Y+58, r25	; 0x3a
    1336:	89 af       	std	Y+57, r24	; 0x39
    1338:	89 ad       	ldd	r24, Y+57	; 0x39
    133a:	9a ad       	ldd	r25, Y+58	; 0x3a
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	f1 f7       	brne	.-4      	; 0x133c <HMI_Menu+0x2b6>
    1340:	9a af       	std	Y+58, r25	; 0x3a
    1342:	89 af       	std	Y+57, r24	; 0x39
	LCD_displayString("+ : Open Door");
	LCD_moveCursor(1,0);
	LCD_displayString("- : Change Pass");
	key = KEYPAD_getPressedKey();
	_delay_ms(50);
	while(key!='+' && key!='-'){
    1344:	fe 01       	movw	r30, r28
    1346:	e9 5a       	subi	r30, 0xA9	; 169
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	80 81       	ld	r24, Z
    134c:	8b 32       	cpi	r24, 0x2B	; 43
    134e:	39 f0       	breq	.+14     	; 0x135e <HMI_Menu+0x2d8>
    1350:	fe 01       	movw	r30, r28
    1352:	e9 5a       	subi	r30, 0xA9	; 169
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 81       	ld	r24, Z
    1358:	8d 32       	cpi	r24, 0x2D	; 45
    135a:	09 f0       	breq	.+2      	; 0x135e <HMI_Menu+0x2d8>
    135c:	68 cf       	rjmp	.-304    	; 0x122e <HMI_Menu+0x1a8>
		key = KEYPAD_getPressedKey();
		_delay_ms(500);
	}
	switch(key){
    135e:	fe 01       	movw	r30, r28
    1360:	e9 5a       	subi	r30, 0xA9	; 169
    1362:	ff 4f       	sbci	r31, 0xFF	; 255
    1364:	80 81       	ld	r24, Z
    1366:	28 2f       	mov	r18, r24
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	ac 96       	adiw	r28, 0x2c	; 44
    136c:	3f af       	std	Y+63, r19	; 0x3f
    136e:	2e af       	std	Y+62, r18	; 0x3e
    1370:	ac 97       	sbiw	r28, 0x2c	; 44
    1372:	ac 96       	adiw	r28, 0x2c	; 44
    1374:	8e ad       	ldd	r24, Y+62	; 0x3e
    1376:	9f ad       	ldd	r25, Y+63	; 0x3f
    1378:	ac 97       	sbiw	r28, 0x2c	; 44
    137a:	8b 32       	cpi	r24, 0x2B	; 43
    137c:	91 05       	cpc	r25, r1
    137e:	49 f0       	breq	.+18     	; 0x1392 <HMI_Menu+0x30c>
    1380:	ac 96       	adiw	r28, 0x2c	; 44
    1382:	ee ad       	ldd	r30, Y+62	; 0x3e
    1384:	ff ad       	ldd	r31, Y+63	; 0x3f
    1386:	ac 97       	sbiw	r28, 0x2c	; 44
    1388:	ed 32       	cpi	r30, 0x2D	; 45
    138a:	f1 05       	cpc	r31, r1
    138c:	09 f4       	brne	.+2      	; 0x1390 <HMI_Menu+0x30a>
    138e:	23 c2       	rjmp	.+1094   	; 0x17d6 <HMI_Menu+0x750>
    1390:	eb c3       	rjmp	.+2006   	; 0x1b68 <HMI_Menu+0xae2>
	 * Open Door case
	 */
	case '+':

		do{
			LCD_clearScreen();
    1392:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
    1396:	8e e8       	ldi	r24, 0x8E	; 142
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
			LCD_moveCursor(1,0);
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	60 e0       	ldi	r22, 0x00	; 0
    13a2:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
			g_Pass_1=0;
    13a6:	10 92 3b 01 	sts	0x013B, r1
    13aa:	10 92 3a 01 	sts	0x013A, r1
			g_Pass_2=0;
    13ae:	10 92 32 01 	sts	0x0132, r1
    13b2:	10 92 31 01 	sts	0x0131, r1
			for(i=0; i<5; i++){
    13b6:	10 92 30 01 	sts	0x0130, r1
    13ba:	b3 c0       	rjmp	.+358    	; 0x1522 <HMI_Menu+0x49c>

				uint8 key=0xFF;
    13bc:	fe 01       	movw	r30, r28
    13be:	ea 5a       	subi	r30, 0xAA	; 170
    13c0:	ff 4f       	sbci	r31, 0xFF	; 255
    13c2:	8f ef       	ldi	r24, 0xFF	; 255
    13c4:	80 83       	st	Z, r24
    13c6:	78 c0       	rjmp	.+240    	; 0x14b8 <HMI_Menu+0x432>
				while (key == 0xFF) {
					key = KEYPAD_getPressedKey();
    13c8:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
    13cc:	fe 01       	movw	r30, r28
    13ce:	ea 5a       	subi	r30, 0xAA	; 170
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	80 83       	st	Z, r24
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	aa ef       	ldi	r26, 0xFA	; 250
    13da:	b3 e4       	ldi	r27, 0x43	; 67
    13dc:	8d ab       	std	Y+53, r24	; 0x35
    13de:	9e ab       	std	Y+54, r25	; 0x36
    13e0:	af ab       	std	Y+55, r26	; 0x37
    13e2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13e4:	6d a9       	ldd	r22, Y+53	; 0x35
    13e6:	7e a9       	ldd	r23, Y+54	; 0x36
    13e8:	8f a9       	ldd	r24, Y+55	; 0x37
    13ea:	98 ad       	ldd	r25, Y+56	; 0x38
    13ec:	20 e0       	ldi	r18, 0x00	; 0
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	4a ef       	ldi	r20, 0xFA	; 250
    13f2:	54 e4       	ldi	r21, 0x44	; 68
    13f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	89 ab       	std	Y+49, r24	; 0x31
    13fe:	9a ab       	std	Y+50, r25	; 0x32
    1400:	ab ab       	std	Y+51, r26	; 0x33
    1402:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1404:	69 a9       	ldd	r22, Y+49	; 0x31
    1406:	7a a9       	ldd	r23, Y+50	; 0x32
    1408:	8b a9       	ldd	r24, Y+51	; 0x33
    140a:	9c a9       	ldd	r25, Y+52	; 0x34
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	40 e8       	ldi	r20, 0x80	; 128
    1412:	5f e3       	ldi	r21, 0x3F	; 63
    1414:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1418:	88 23       	and	r24, r24
    141a:	2c f4       	brge	.+10     	; 0x1426 <HMI_Menu+0x3a0>
		__ticks = 1;
    141c:	81 e0       	ldi	r24, 0x01	; 1
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	98 ab       	std	Y+48, r25	; 0x30
    1422:	8f a7       	std	Y+47, r24	; 0x2f
    1424:	3f c0       	rjmp	.+126    	; 0x14a4 <HMI_Menu+0x41e>
	else if (__tmp > 65535)
    1426:	69 a9       	ldd	r22, Y+49	; 0x31
    1428:	7a a9       	ldd	r23, Y+50	; 0x32
    142a:	8b a9       	ldd	r24, Y+51	; 0x33
    142c:	9c a9       	ldd	r25, Y+52	; 0x34
    142e:	20 e0       	ldi	r18, 0x00	; 0
    1430:	3f ef       	ldi	r19, 0xFF	; 255
    1432:	4f e7       	ldi	r20, 0x7F	; 127
    1434:	57 e4       	ldi	r21, 0x47	; 71
    1436:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    143a:	18 16       	cp	r1, r24
    143c:	4c f5       	brge	.+82     	; 0x1490 <HMI_Menu+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    143e:	6d a9       	ldd	r22, Y+53	; 0x35
    1440:	7e a9       	ldd	r23, Y+54	; 0x36
    1442:	8f a9       	ldd	r24, Y+55	; 0x37
    1444:	98 ad       	ldd	r25, Y+56	; 0x38
    1446:	20 e0       	ldi	r18, 0x00	; 0
    1448:	30 e0       	ldi	r19, 0x00	; 0
    144a:	40 e2       	ldi	r20, 0x20	; 32
    144c:	51 e4       	ldi	r21, 0x41	; 65
    144e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1452:	dc 01       	movw	r26, r24
    1454:	cb 01       	movw	r24, r22
    1456:	bc 01       	movw	r22, r24
    1458:	cd 01       	movw	r24, r26
    145a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    145e:	dc 01       	movw	r26, r24
    1460:	cb 01       	movw	r24, r22
    1462:	98 ab       	std	Y+48, r25	; 0x30
    1464:	8f a7       	std	Y+47, r24	; 0x2f
    1466:	0f c0       	rjmp	.+30     	; 0x1486 <HMI_Menu+0x400>
    1468:	88 ec       	ldi	r24, 0xC8	; 200
    146a:	90 e0       	ldi	r25, 0x00	; 0
    146c:	9e a7       	std	Y+46, r25	; 0x2e
    146e:	8d a7       	std	Y+45, r24	; 0x2d
    1470:	8d a5       	ldd	r24, Y+45	; 0x2d
    1472:	9e a5       	ldd	r25, Y+46	; 0x2e
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	f1 f7       	brne	.-4      	; 0x1474 <HMI_Menu+0x3ee>
    1478:	9e a7       	std	Y+46, r25	; 0x2e
    147a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    147c:	8f a5       	ldd	r24, Y+47	; 0x2f
    147e:	98 a9       	ldd	r25, Y+48	; 0x30
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	98 ab       	std	Y+48, r25	; 0x30
    1484:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1486:	8f a5       	ldd	r24, Y+47	; 0x2f
    1488:	98 a9       	ldd	r25, Y+48	; 0x30
    148a:	00 97       	sbiw	r24, 0x00	; 0
    148c:	69 f7       	brne	.-38     	; 0x1468 <HMI_Menu+0x3e2>
    148e:	14 c0       	rjmp	.+40     	; 0x14b8 <HMI_Menu+0x432>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1490:	69 a9       	ldd	r22, Y+49	; 0x31
    1492:	7a a9       	ldd	r23, Y+50	; 0x32
    1494:	8b a9       	ldd	r24, Y+51	; 0x33
    1496:	9c a9       	ldd	r25, Y+52	; 0x34
    1498:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    149c:	dc 01       	movw	r26, r24
    149e:	cb 01       	movw	r24, r22
    14a0:	98 ab       	std	Y+48, r25	; 0x30
    14a2:	8f a7       	std	Y+47, r24	; 0x2f
    14a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    14a6:	98 a9       	ldd	r25, Y+48	; 0x30
    14a8:	9c a7       	std	Y+44, r25	; 0x2c
    14aa:	8b a7       	std	Y+43, r24	; 0x2b
    14ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    14ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    14b0:	01 97       	sbiw	r24, 0x01	; 1
    14b2:	f1 f7       	brne	.-4      	; 0x14b0 <HMI_Menu+0x42a>
    14b4:	9c a7       	std	Y+44, r25	; 0x2c
    14b6:	8b a7       	std	Y+43, r24	; 0x2b
			g_Pass_1=0;
			g_Pass_2=0;
			for(i=0; i<5; i++){

				uint8 key=0xFF;
				while (key == 0xFF) {
    14b8:	fe 01       	movw	r30, r28
    14ba:	ea 5a       	subi	r30, 0xAA	; 170
    14bc:	ff 4f       	sbci	r31, 0xFF	; 255
    14be:	80 81       	ld	r24, Z
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	09 f4       	brne	.+2      	; 0x14c6 <HMI_Menu+0x440>
    14c4:	81 cf       	rjmp	.-254    	; 0x13c8 <HMI_Menu+0x342>
					key = KEYPAD_getPressedKey();
					_delay_ms(500);
				}
				if(	key<=9 && key>=0){
    14c6:	fe 01       	movw	r30, r28
    14c8:	ea 5a       	subi	r30, 0xAA	; 170
    14ca:	ff 4f       	sbci	r31, 0xFF	; 255
    14cc:	80 81       	ld	r24, Z
    14ce:	8a 30       	cpi	r24, 0x0A	; 10
    14d0:	f0 f4       	brcc	.+60     	; 0x150e <HMI_Menu+0x488>

					LCD_displayCharacter('*');
    14d2:	8a e2       	ldi	r24, 0x2A	; 42
    14d4:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayCharacter>
					g_Pass_1=g_Pass_1*10+key;
    14d8:	80 91 3a 01 	lds	r24, 0x013A
    14dc:	90 91 3b 01 	lds	r25, 0x013B
    14e0:	9c 01       	movw	r18, r24
    14e2:	22 0f       	add	r18, r18
    14e4:	33 1f       	adc	r19, r19
    14e6:	c9 01       	movw	r24, r18
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	88 0f       	add	r24, r24
    14ee:	99 1f       	adc	r25, r25
    14f0:	28 0f       	add	r18, r24
    14f2:	39 1f       	adc	r19, r25
    14f4:	fe 01       	movw	r30, r28
    14f6:	ea 5a       	subi	r30, 0xAA	; 170
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	80 81       	ld	r24, Z
    14fc:	88 2f       	mov	r24, r24
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    1500:	82 0f       	add	r24, r18
    1502:	93 1f       	adc	r25, r19
    1504:	90 93 3b 01 	sts	0x013B, r25
    1508:	80 93 3a 01 	sts	0x013A, r24
    150c:	05 c0       	rjmp	.+10     	; 0x1518 <HMI_Menu+0x492>
				}else{
					i--;
    150e:	80 91 30 01 	lds	r24, 0x0130
    1512:	81 50       	subi	r24, 0x01	; 1
    1514:	80 93 30 01 	sts	0x0130, r24
			LCD_clearScreen();
			LCD_displayString("Plz enter pass:");
			LCD_moveCursor(1,0);
			g_Pass_1=0;
			g_Pass_2=0;
			for(i=0; i<5; i++){
    1518:	80 91 30 01 	lds	r24, 0x0130
    151c:	8f 5f       	subi	r24, 0xFF	; 255
    151e:	80 93 30 01 	sts	0x0130, r24
    1522:	80 91 30 01 	lds	r24, 0x0130
    1526:	85 30       	cpi	r24, 0x05	; 5
    1528:	08 f4       	brcc	.+2      	; 0x152c <HMI_Menu+0x4a6>
    152a:	48 cf       	rjmp	.-368    	; 0x13bc <HMI_Menu+0x336>
				}




			}while(KEYPAD_getPressedKey()!='=');
    152c:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
    1530:	8d 33       	cpi	r24, 0x3D	; 61
    1532:	e1 f7       	brne	.-8      	; 0x152c <HMI_Menu+0x4a6>
			UART_sendByte(CHECK_PASS);
    1534:	89 e0       	ldi	r24, 0x09	; 9
    1536:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
			APP_sendPassword((uint8*)&g_Pass_1);
    153a:	8a e3       	ldi	r24, 0x3A	; 58
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <APP_sendPassword>

			if(UART_recieveByte()==PASS_MATCH){
    1542:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <UART_recieveByte>
    1546:	8a 30       	cpi	r24, 0x0A	; 10
    1548:	09 f0       	breq	.+2      	; 0x154c <HMI_Menu+0x4c6>
    154a:	62 c0       	rjmp	.+196    	; 0x1610 <HMI_Menu+0x58a>
				/*
				 * Configure the timer for 3 seconds Compare mode
				 */
				Timer1_ConfigType Timer_Configuration={0,23437,F_CPU_1024,COMPARE};
    154c:	ce 01       	movw	r24, r28
    154e:	88 5a       	subi	r24, 0xA8	; 168
    1550:	9f 4f       	sbci	r25, 0xFF	; 255
    1552:	ae 96       	adiw	r28, 0x2e	; 46
    1554:	9f af       	std	Y+63, r25	; 0x3f
    1556:	8e af       	std	Y+62, r24	; 0x3e
    1558:	ae 97       	sbiw	r28, 0x2e	; 46
    155a:	23 e2       	ldi	r18, 0x23	; 35
    155c:	31 e0       	ldi	r19, 0x01	; 1
    155e:	e0 96       	adiw	r28, 0x30	; 48
    1560:	3f af       	std	Y+63, r19	; 0x3f
    1562:	2e af       	std	Y+62, r18	; 0x3e
    1564:	e0 97       	sbiw	r28, 0x30	; 48
    1566:	36 e0       	ldi	r19, 0x06	; 6
    1568:	e1 96       	adiw	r28, 0x31	; 49
    156a:	3f af       	std	Y+63, r19	; 0x3f
    156c:	e1 97       	sbiw	r28, 0x31	; 49
    156e:	e0 96       	adiw	r28, 0x30	; 48
    1570:	ee ad       	ldd	r30, Y+62	; 0x3e
    1572:	ff ad       	ldd	r31, Y+63	; 0x3f
    1574:	e0 97       	sbiw	r28, 0x30	; 48
    1576:	00 80       	ld	r0, Z
    1578:	e0 96       	adiw	r28, 0x30	; 48
    157a:	2e ad       	ldd	r18, Y+62	; 0x3e
    157c:	3f ad       	ldd	r19, Y+63	; 0x3f
    157e:	e0 97       	sbiw	r28, 0x30	; 48
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	e0 96       	adiw	r28, 0x30	; 48
    1586:	3f af       	std	Y+63, r19	; 0x3f
    1588:	2e af       	std	Y+62, r18	; 0x3e
    158a:	e0 97       	sbiw	r28, 0x30	; 48
    158c:	ae 96       	adiw	r28, 0x2e	; 46
    158e:	ee ad       	ldd	r30, Y+62	; 0x3e
    1590:	ff ad       	ldd	r31, Y+63	; 0x3f
    1592:	ae 97       	sbiw	r28, 0x2e	; 46
    1594:	00 82       	st	Z, r0
    1596:	ae 96       	adiw	r28, 0x2e	; 46
    1598:	2e ad       	ldd	r18, Y+62	; 0x3e
    159a:	3f ad       	ldd	r19, Y+63	; 0x3f
    159c:	ae 97       	sbiw	r28, 0x2e	; 46
    159e:	2f 5f       	subi	r18, 0xFF	; 255
    15a0:	3f 4f       	sbci	r19, 0xFF	; 255
    15a2:	ae 96       	adiw	r28, 0x2e	; 46
    15a4:	3f af       	std	Y+63, r19	; 0x3f
    15a6:	2e af       	std	Y+62, r18	; 0x3e
    15a8:	ae 97       	sbiw	r28, 0x2e	; 46
    15aa:	e1 96       	adiw	r28, 0x31	; 49
    15ac:	3f ad       	ldd	r19, Y+63	; 0x3f
    15ae:	e1 97       	sbiw	r28, 0x31	; 49
    15b0:	31 50       	subi	r19, 0x01	; 1
    15b2:	e1 96       	adiw	r28, 0x31	; 49
    15b4:	3f af       	std	Y+63, r19	; 0x3f
    15b6:	e1 97       	sbiw	r28, 0x31	; 49
    15b8:	e1 96       	adiw	r28, 0x31	; 49
    15ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    15bc:	e1 97       	sbiw	r28, 0x31	; 49
    15be:	88 23       	and	r24, r24
    15c0:	b1 f6       	brne	.-84     	; 0x156e <HMI_Menu+0x4e8>
				g_MistakeCount=0;
    15c2:	10 92 2c 01 	sts	0x012C, r1
				LCD_clearScreen();
    15c6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
				LCD_displayString("Door is ");
    15ca:	87 ee       	ldi	r24, 0xE7	; 231
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
				LCD_moveCursor(1,0);
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	60 e0       	ldi	r22, 0x00	; 0
    15d6:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
				LCD_displayString("Unlocking");
    15da:	80 ef       	ldi	r24, 0xF0	; 240
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
				/*
				 * Tell the control unit to open the door
				 */
				UART_sendByte(OPEN_DOOR);
    15e2:	86 e0       	ldi	r24, 0x06	; 6
    15e4:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
				/*
				 * Set the callback function
				 */
				Timer1_setCallBack(HMI_CallbackDoor);
    15e8:	87 eb       	ldi	r24, 0xB7	; 183
    15ea:	95 e0       	ldi	r25, 0x05	; 5
    15ec:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <Timer1_setCallBack>
				Timer1_init(&Timer_Configuration);
    15f0:	ce 01       	movw	r24, r28
    15f2:	88 5a       	subi	r24, 0xA8	; 168
    15f4:	9f 4f       	sbci	r25, 0xFF	; 255
    15f6:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Timer1_init>
				while(g_ticks!=12);
    15fa:	80 91 2a 01 	lds	r24, 0x012A
    15fe:	8c 30       	cpi	r24, 0x0C	; 12
    1600:	e1 f7       	brne	.-8      	; 0x15fa <HMI_Menu+0x574>
				LCD_clearScreen();
    1602:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
				/*
				 * Deinit the timer
				 */
				g_ticks=0;
    1606:	10 92 2a 01 	sts	0x012A, r1
				Timer1_deInit();
    160a:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <Timer1_deInit>
    160e:	7d c0       	rjmp	.+250    	; 0x170a <HMI_Menu+0x684>
			}else{
				LCD_clearScreen();
    1610:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
				LCD_displayString("Wrong Password");
    1614:	8a eb       	ldi	r24, 0xBA	; 186
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	aa ef       	ldi	r26, 0xFA	; 250
    1622:	b4 e4       	ldi	r27, 0x44	; 68
    1624:	8f a3       	std	Y+39, r24	; 0x27
    1626:	98 a7       	std	Y+40, r25	; 0x28
    1628:	a9 a7       	std	Y+41, r26	; 0x29
    162a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	6f a1       	ldd	r22, Y+39	; 0x27
    162e:	78 a5       	ldd	r23, Y+40	; 0x28
    1630:	89 a5       	ldd	r24, Y+41	; 0x29
    1632:	9a a5       	ldd	r25, Y+42	; 0x2a
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a ef       	ldi	r20, 0xFA	; 250
    163a:	54 e4       	ldi	r21, 0x44	; 68
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8b a3       	std	Y+35, r24	; 0x23
    1646:	9c a3       	std	Y+36, r25	; 0x24
    1648:	ad a3       	std	Y+37, r26	; 0x25
    164a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    164c:	6b a1       	ldd	r22, Y+35	; 0x23
    164e:	7c a1       	ldd	r23, Y+36	; 0x24
    1650:	8d a1       	ldd	r24, Y+37	; 0x25
    1652:	9e a1       	ldd	r25, Y+38	; 0x26
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <HMI_Menu+0x5e8>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9a a3       	std	Y+34, r25	; 0x22
    166a:	89 a3       	std	Y+33, r24	; 0x21
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <HMI_Menu+0x666>
	else if (__tmp > 65535)
    166e:	6b a1       	ldd	r22, Y+35	; 0x23
    1670:	7c a1       	ldd	r23, Y+36	; 0x24
    1672:	8d a1       	ldd	r24, Y+37	; 0x25
    1674:	9e a1       	ldd	r25, Y+38	; 0x26
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <HMI_Menu+0x652>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	6f a1       	ldd	r22, Y+39	; 0x27
    1688:	78 a5       	ldd	r23, Y+40	; 0x28
    168a:	89 a5       	ldd	r24, Y+41	; 0x29
    168c:	9a a5       	ldd	r25, Y+42	; 0x2a
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9a a3       	std	Y+34, r25	; 0x22
    16ac:	89 a3       	std	Y+33, r24	; 0x21
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <HMI_Menu+0x648>
    16b0:	88 ec       	ldi	r24, 0xC8	; 200
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	98 a3       	std	Y+32, r25	; 0x20
    16b6:	8f 8f       	std	Y+31, r24	; 0x1f
    16b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    16ba:	98 a1       	ldd	r25, Y+32	; 0x20
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <HMI_Menu+0x636>
    16c0:	98 a3       	std	Y+32, r25	; 0x20
    16c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	89 a1       	ldd	r24, Y+33	; 0x21
    16c6:	9a a1       	ldd	r25, Y+34	; 0x22
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9a a3       	std	Y+34, r25	; 0x22
    16cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	89 a1       	ldd	r24, Y+33	; 0x21
    16d0:	9a a1       	ldd	r25, Y+34	; 0x22
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <HMI_Menu+0x62a>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <HMI_Menu+0x67a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6b a1       	ldd	r22, Y+35	; 0x23
    16da:	7c a1       	ldd	r23, Y+36	; 0x24
    16dc:	8d a1       	ldd	r24, Y+37	; 0x25
    16de:	9e a1       	ldd	r25, Y+38	; 0x26
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9a a3       	std	Y+34, r25	; 0x22
    16ea:	89 a3       	std	Y+33, r24	; 0x21
    16ec:	89 a1       	ldd	r24, Y+33	; 0x21
    16ee:	9a a1       	ldd	r25, Y+34	; 0x22
    16f0:	9e 8f       	std	Y+30, r25	; 0x1e
    16f2:	8d 8f       	std	Y+29, r24	; 0x1d
    16f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    16f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <HMI_Menu+0x672>
    16fc:	9e 8f       	std	Y+30, r25	; 0x1e
    16fe:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2000);
				g_MistakeCount++;
    1700:	80 91 2c 01 	lds	r24, 0x012C
    1704:	8f 5f       	subi	r24, 0xFF	; 255
    1706:	80 93 2c 01 	sts	0x012C, r24
			}

		}while(g_MistakeCount<3 && g_MistakeCount!=0);
    170a:	80 91 2c 01 	lds	r24, 0x012C
    170e:	83 30       	cpi	r24, 0x03	; 3
    1710:	28 f4       	brcc	.+10     	; 0x171c <HMI_Menu+0x696>
    1712:	80 91 2c 01 	lds	r24, 0x012C
    1716:	88 23       	and	r24, r24
    1718:	09 f0       	breq	.+2      	; 0x171c <HMI_Menu+0x696>
    171a:	3b ce       	rjmp	.-906    	; 0x1392 <HMI_Menu+0x30c>
		if(g_MistakeCount==3){
    171c:	80 91 2c 01 	lds	r24, 0x012C
    1720:	83 30       	cpi	r24, 0x03	; 3
    1722:	09 f0       	breq	.+2      	; 0x1726 <HMI_Menu+0x6a0>
    1724:	21 c2       	rjmp	.+1090   	; 0x1b68 <HMI_Menu+0xae2>
			/*
			 * Enter Failure Mode
			 */

			Timer1_ConfigType Timer_Configuration_ERROR={0,0,F_CPU_1024,NORMAL};
    1726:	ce 01       	movw	r24, r28
    1728:	82 5a       	subi	r24, 0xA2	; 162
    172a:	9f 4f       	sbci	r25, 0xFF	; 255
    172c:	e3 96       	adiw	r28, 0x33	; 51
    172e:	9f af       	std	Y+63, r25	; 0x3f
    1730:	8e af       	std	Y+62, r24	; 0x3e
    1732:	e3 97       	sbiw	r28, 0x33	; 51
    1734:	ed e1       	ldi	r30, 0x1D	; 29
    1736:	f1 e0       	ldi	r31, 0x01	; 1
    1738:	e5 96       	adiw	r28, 0x35	; 53
    173a:	ff af       	std	Y+63, r31	; 0x3f
    173c:	ee af       	std	Y+62, r30	; 0x3e
    173e:	e5 97       	sbiw	r28, 0x35	; 53
    1740:	f6 e0       	ldi	r31, 0x06	; 6
    1742:	e6 96       	adiw	r28, 0x36	; 54
    1744:	ff af       	std	Y+63, r31	; 0x3f
    1746:	e6 97       	sbiw	r28, 0x36	; 54
    1748:	e5 96       	adiw	r28, 0x35	; 53
    174a:	ee ad       	ldd	r30, Y+62	; 0x3e
    174c:	ff ad       	ldd	r31, Y+63	; 0x3f
    174e:	e5 97       	sbiw	r28, 0x35	; 53
    1750:	00 80       	ld	r0, Z
    1752:	e5 96       	adiw	r28, 0x35	; 53
    1754:	2e ad       	ldd	r18, Y+62	; 0x3e
    1756:	3f ad       	ldd	r19, Y+63	; 0x3f
    1758:	e5 97       	sbiw	r28, 0x35	; 53
    175a:	2f 5f       	subi	r18, 0xFF	; 255
    175c:	3f 4f       	sbci	r19, 0xFF	; 255
    175e:	e5 96       	adiw	r28, 0x35	; 53
    1760:	3f af       	std	Y+63, r19	; 0x3f
    1762:	2e af       	std	Y+62, r18	; 0x3e
    1764:	e5 97       	sbiw	r28, 0x35	; 53
    1766:	e3 96       	adiw	r28, 0x33	; 51
    1768:	ee ad       	ldd	r30, Y+62	; 0x3e
    176a:	ff ad       	ldd	r31, Y+63	; 0x3f
    176c:	e3 97       	sbiw	r28, 0x33	; 51
    176e:	00 82       	st	Z, r0
    1770:	e3 96       	adiw	r28, 0x33	; 51
    1772:	2e ad       	ldd	r18, Y+62	; 0x3e
    1774:	3f ad       	ldd	r19, Y+63	; 0x3f
    1776:	e3 97       	sbiw	r28, 0x33	; 51
    1778:	2f 5f       	subi	r18, 0xFF	; 255
    177a:	3f 4f       	sbci	r19, 0xFF	; 255
    177c:	e3 96       	adiw	r28, 0x33	; 51
    177e:	3f af       	std	Y+63, r19	; 0x3f
    1780:	2e af       	std	Y+62, r18	; 0x3e
    1782:	e3 97       	sbiw	r28, 0x33	; 51
    1784:	e6 96       	adiw	r28, 0x36	; 54
    1786:	3f ad       	ldd	r19, Y+63	; 0x3f
    1788:	e6 97       	sbiw	r28, 0x36	; 54
    178a:	31 50       	subi	r19, 0x01	; 1
    178c:	e6 96       	adiw	r28, 0x36	; 54
    178e:	3f af       	std	Y+63, r19	; 0x3f
    1790:	e6 97       	sbiw	r28, 0x36	; 54
    1792:	e6 96       	adiw	r28, 0x36	; 54
    1794:	8f ad       	ldd	r24, Y+63	; 0x3f
    1796:	e6 97       	sbiw	r28, 0x36	; 54
    1798:	88 23       	and	r24, r24
    179a:	b1 f6       	brne	.-84     	; 0x1748 <HMI_Menu+0x6c2>
			Timer1_setCallBack(HMI_CallbackError);
    179c:	83 ea       	ldi	r24, 0xA3	; 163
    179e:	95 e0       	ldi	r25, 0x05	; 5
    17a0:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <Timer1_setCallBack>
			Timer1_init(&Timer_Configuration_ERROR);
    17a4:	ce 01       	movw	r24, r28
    17a6:	82 5a       	subi	r24, 0xA2	; 162
    17a8:	9f 4f       	sbci	r25, 0xFF	; 255
    17aa:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Timer1_init>
			UART_sendByte(BUZZER_ON);
    17ae:	8b e0       	ldi	r24, 0x0B	; 11
    17b0:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
			LCD_displayString("ERROR");
    17b4:	80 e6       	ldi	r24, 0x60	; 96
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>

			while(g_ticks!=7);
    17bc:	80 91 2a 01 	lds	r24, 0x012A
    17c0:	87 30       	cpi	r24, 0x07	; 7
    17c2:	e1 f7       	brne	.-8      	; 0x17bc <HMI_Menu+0x736>
			Timer1_deInit();
    17c4:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <Timer1_deInit>
			LCD_clearScreen();
    17c8:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
			g_ticks=0;
    17cc:	10 92 2a 01 	sts	0x012A, r1
			g_MistakeCount=0;
    17d0:	10 92 2c 01 	sts	0x012C, r1
    17d4:	c9 c1       	rjmp	.+914    	; 0x1b68 <HMI_Menu+0xae2>
		/*
		 * Change Password Case
		 */
	case '-':
		do{
			g_Pass_1=0;
    17d6:	10 92 3b 01 	sts	0x013B, r1
    17da:	10 92 3a 01 	sts	0x013A, r1
			g_Pass_2=0;
    17de:	10 92 32 01 	sts	0x0132, r1
    17e2:	10 92 31 01 	sts	0x0131, r1
			LCD_clearScreen();
    17e6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
			LCD_displayString("Plz enter old");
    17ea:	8a ef       	ldi	r24, 0xFA	; 250
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
			LCD_moveCursor(1,0);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
			LCD_displayString("pass: ");
    17fa:	88 e0       	ldi	r24, 0x08	; 8
    17fc:	91 e0       	ldi	r25, 0x01	; 1
    17fe:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>

			for(i=0; i<5; i++){
    1802:	10 92 30 01 	sts	0x0130, r1
    1806:	b3 c0       	rjmp	.+358    	; 0x196e <HMI_Menu+0x8e8>
				uint8 key=0xFF;
    1808:	fe 01       	movw	r30, r28
    180a:	eb 5a       	subi	r30, 0xAB	; 171
    180c:	ff 4f       	sbci	r31, 0xFF	; 255
    180e:	8f ef       	ldi	r24, 0xFF	; 255
    1810:	80 83       	st	Z, r24
    1812:	78 c0       	rjmp	.+240    	; 0x1904 <HMI_Menu+0x87e>
				while (key == 0xFF) {
					key = KEYPAD_getPressedKey();
    1814:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
    1818:	fe 01       	movw	r30, r28
    181a:	eb 5a       	subi	r30, 0xAB	; 171
    181c:	ff 4f       	sbci	r31, 0xFF	; 255
    181e:	80 83       	st	Z, r24
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	aa ef       	ldi	r26, 0xFA	; 250
    1826:	b3 e4       	ldi	r27, 0x43	; 67
    1828:	89 8f       	std	Y+25, r24	; 0x19
    182a:	9a 8f       	std	Y+26, r25	; 0x1a
    182c:	ab 8f       	std	Y+27, r26	; 0x1b
    182e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1830:	69 8d       	ldd	r22, Y+25	; 0x19
    1832:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1834:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1836:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	4a ef       	ldi	r20, 0xFA	; 250
    183e:	54 e4       	ldi	r21, 0x44	; 68
    1840:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	8d 8b       	std	Y+21, r24	; 0x15
    184a:	9e 8b       	std	Y+22, r25	; 0x16
    184c:	af 8b       	std	Y+23, r26	; 0x17
    184e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1850:	6d 89       	ldd	r22, Y+21	; 0x15
    1852:	7e 89       	ldd	r23, Y+22	; 0x16
    1854:	8f 89       	ldd	r24, Y+23	; 0x17
    1856:	98 8d       	ldd	r25, Y+24	; 0x18
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	40 e8       	ldi	r20, 0x80	; 128
    185e:	5f e3       	ldi	r21, 0x3F	; 63
    1860:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1864:	88 23       	and	r24, r24
    1866:	2c f4       	brge	.+10     	; 0x1872 <HMI_Menu+0x7ec>
		__ticks = 1;
    1868:	81 e0       	ldi	r24, 0x01	; 1
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	9c 8b       	std	Y+20, r25	; 0x14
    186e:	8b 8b       	std	Y+19, r24	; 0x13
    1870:	3f c0       	rjmp	.+126    	; 0x18f0 <HMI_Menu+0x86a>
	else if (__tmp > 65535)
    1872:	6d 89       	ldd	r22, Y+21	; 0x15
    1874:	7e 89       	ldd	r23, Y+22	; 0x16
    1876:	8f 89       	ldd	r24, Y+23	; 0x17
    1878:	98 8d       	ldd	r25, Y+24	; 0x18
    187a:	20 e0       	ldi	r18, 0x00	; 0
    187c:	3f ef       	ldi	r19, 0xFF	; 255
    187e:	4f e7       	ldi	r20, 0x7F	; 127
    1880:	57 e4       	ldi	r21, 0x47	; 71
    1882:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1886:	18 16       	cp	r1, r24
    1888:	4c f5       	brge	.+82     	; 0x18dc <HMI_Menu+0x856>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    188a:	69 8d       	ldd	r22, Y+25	; 0x19
    188c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    188e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1890:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	40 e2       	ldi	r20, 0x20	; 32
    1898:	51 e4       	ldi	r21, 0x41	; 65
    189a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    189e:	dc 01       	movw	r26, r24
    18a0:	cb 01       	movw	r24, r22
    18a2:	bc 01       	movw	r22, r24
    18a4:	cd 01       	movw	r24, r26
    18a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18aa:	dc 01       	movw	r26, r24
    18ac:	cb 01       	movw	r24, r22
    18ae:	9c 8b       	std	Y+20, r25	; 0x14
    18b0:	8b 8b       	std	Y+19, r24	; 0x13
    18b2:	0f c0       	rjmp	.+30     	; 0x18d2 <HMI_Menu+0x84c>
    18b4:	88 ec       	ldi	r24, 0xC8	; 200
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	9a 8b       	std	Y+18, r25	; 0x12
    18ba:	89 8b       	std	Y+17, r24	; 0x11
    18bc:	89 89       	ldd	r24, Y+17	; 0x11
    18be:	9a 89       	ldd	r25, Y+18	; 0x12
    18c0:	01 97       	sbiw	r24, 0x01	; 1
    18c2:	f1 f7       	brne	.-4      	; 0x18c0 <HMI_Menu+0x83a>
    18c4:	9a 8b       	std	Y+18, r25	; 0x12
    18c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18c8:	8b 89       	ldd	r24, Y+19	; 0x13
    18ca:	9c 89       	ldd	r25, Y+20	; 0x14
    18cc:	01 97       	sbiw	r24, 0x01	; 1
    18ce:	9c 8b       	std	Y+20, r25	; 0x14
    18d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	8b 89       	ldd	r24, Y+19	; 0x13
    18d4:	9c 89       	ldd	r25, Y+20	; 0x14
    18d6:	00 97       	sbiw	r24, 0x00	; 0
    18d8:	69 f7       	brne	.-38     	; 0x18b4 <HMI_Menu+0x82e>
    18da:	14 c0       	rjmp	.+40     	; 0x1904 <HMI_Menu+0x87e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    18dc:	6d 89       	ldd	r22, Y+21	; 0x15
    18de:	7e 89       	ldd	r23, Y+22	; 0x16
    18e0:	8f 89       	ldd	r24, Y+23	; 0x17
    18e2:	98 8d       	ldd	r25, Y+24	; 0x18
    18e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	9c 8b       	std	Y+20, r25	; 0x14
    18ee:	8b 8b       	std	Y+19, r24	; 0x13
    18f0:	8b 89       	ldd	r24, Y+19	; 0x13
    18f2:	9c 89       	ldd	r25, Y+20	; 0x14
    18f4:	98 8b       	std	Y+16, r25	; 0x10
    18f6:	8f 87       	std	Y+15, r24	; 0x0f
    18f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18fa:	98 89       	ldd	r25, Y+16	; 0x10
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <HMI_Menu+0x876>
    1900:	98 8b       	std	Y+16, r25	; 0x10
    1902:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_moveCursor(1,0);
			LCD_displayString("pass: ");

			for(i=0; i<5; i++){
				uint8 key=0xFF;
				while (key == 0xFF) {
    1904:	fe 01       	movw	r30, r28
    1906:	eb 5a       	subi	r30, 0xAB	; 171
    1908:	ff 4f       	sbci	r31, 0xFF	; 255
    190a:	80 81       	ld	r24, Z
    190c:	8f 3f       	cpi	r24, 0xFF	; 255
    190e:	09 f4       	brne	.+2      	; 0x1912 <HMI_Menu+0x88c>
    1910:	81 cf       	rjmp	.-254    	; 0x1814 <HMI_Menu+0x78e>
					key = KEYPAD_getPressedKey();
					_delay_ms(500);
				}
				if(	key<=9 && key>=0){
    1912:	fe 01       	movw	r30, r28
    1914:	eb 5a       	subi	r30, 0xAB	; 171
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	80 81       	ld	r24, Z
    191a:	8a 30       	cpi	r24, 0x0A	; 10
    191c:	f0 f4       	brcc	.+60     	; 0x195a <HMI_Menu+0x8d4>

					LCD_displayCharacter('*');
    191e:	8a e2       	ldi	r24, 0x2A	; 42
    1920:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayCharacter>
					g_Pass_1=g_Pass_1*10+key;
    1924:	80 91 3a 01 	lds	r24, 0x013A
    1928:	90 91 3b 01 	lds	r25, 0x013B
    192c:	9c 01       	movw	r18, r24
    192e:	22 0f       	add	r18, r18
    1930:	33 1f       	adc	r19, r19
    1932:	c9 01       	movw	r24, r18
    1934:	88 0f       	add	r24, r24
    1936:	99 1f       	adc	r25, r25
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	28 0f       	add	r18, r24
    193e:	39 1f       	adc	r19, r25
    1940:	fe 01       	movw	r30, r28
    1942:	eb 5a       	subi	r30, 0xAB	; 171
    1944:	ff 4f       	sbci	r31, 0xFF	; 255
    1946:	80 81       	ld	r24, Z
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	82 0f       	add	r24, r18
    194e:	93 1f       	adc	r25, r19
    1950:	90 93 3b 01 	sts	0x013B, r25
    1954:	80 93 3a 01 	sts	0x013A, r24
    1958:	05 c0       	rjmp	.+10     	; 0x1964 <HMI_Menu+0x8de>
				}else{
					i--;
    195a:	80 91 30 01 	lds	r24, 0x0130
    195e:	81 50       	subi	r24, 0x01	; 1
    1960:	80 93 30 01 	sts	0x0130, r24
			LCD_clearScreen();
			LCD_displayString("Plz enter old");
			LCD_moveCursor(1,0);
			LCD_displayString("pass: ");

			for(i=0; i<5; i++){
    1964:	80 91 30 01 	lds	r24, 0x0130
    1968:	8f 5f       	subi	r24, 0xFF	; 255
    196a:	80 93 30 01 	sts	0x0130, r24
    196e:	80 91 30 01 	lds	r24, 0x0130
    1972:	85 30       	cpi	r24, 0x05	; 5
    1974:	08 f4       	brcc	.+2      	; 0x1978 <HMI_Menu+0x8f2>
    1976:	48 cf       	rjmp	.-368    	; 0x1808 <HMI_Menu+0x782>
				}




			}while(KEYPAD_getPressedKey()!='=');
    1978:	0e 94 4c 11 	call	0x2298	; 0x2298 <KEYPAD_getPressedKey>
    197c:	8d 33       	cpi	r24, 0x3D	; 61
    197e:	e1 f7       	brne	.-8      	; 0x1978 <HMI_Menu+0x8f2>
			UART_sendByte(CHECK_PASS);
    1980:	89 e0       	ldi	r24, 0x09	; 9
    1982:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
			APP_sendPassword((uint8*)&g_Pass_1);
    1986:	8a e3       	ldi	r24, 0x3A	; 58
    1988:	91 e0       	ldi	r25, 0x01	; 1
    198a:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <APP_sendPassword>
			if(UART_recieveByte()==PASS_MATCH){
    198e:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <UART_recieveByte>
    1992:	8a 30       	cpi	r24, 0x0A	; 10
    1994:	39 f4       	brne	.+14     	; 0x19a4 <HMI_Menu+0x91e>
				/*
				 * Set a new password
				 */
				g_MistakeCount=0;
    1996:	10 92 2c 01 	sts	0x012C, r1
				LCD_clearScreen();
    199a:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
				HMI_setPassword();
    199e:	0e 94 14 06 	call	0xc28	; 0xc28 <HMI_setPassword>
    19a2:	86 c0       	rjmp	.+268    	; 0x1ab0 <HMI_Menu+0xa2a>
				break;

			}else{

				g_MistakeCount++;
    19a4:	80 91 2c 01 	lds	r24, 0x012C
    19a8:	8f 5f       	subi	r24, 0xFF	; 255
    19aa:	80 93 2c 01 	sts	0x012C, r24
				LCD_clearScreen();
    19ae:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
				LCD_displayString("Wrong Password");
    19b2:	8a eb       	ldi	r24, 0xBA	; 186
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
    19ba:	80 e0       	ldi	r24, 0x00	; 0
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	aa ef       	ldi	r26, 0xFA	; 250
    19c0:	b4 e4       	ldi	r27, 0x44	; 68
    19c2:	8b 87       	std	Y+11, r24	; 0x0b
    19c4:	9c 87       	std	Y+12, r25	; 0x0c
    19c6:	ad 87       	std	Y+13, r26	; 0x0d
    19c8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    19cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    19ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    19d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	4a ef       	ldi	r20, 0xFA	; 250
    19d8:	54 e4       	ldi	r21, 0x44	; 68
    19da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19de:	dc 01       	movw	r26, r24
    19e0:	cb 01       	movw	r24, r22
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	a9 87       	std	Y+9, r26	; 0x09
    19e8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19ea:	6f 81       	ldd	r22, Y+7	; 0x07
    19ec:	78 85       	ldd	r23, Y+8	; 0x08
    19ee:	89 85       	ldd	r24, Y+9	; 0x09
    19f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f2:	20 e0       	ldi	r18, 0x00	; 0
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	40 e8       	ldi	r20, 0x80	; 128
    19f8:	5f e3       	ldi	r21, 0x3F	; 63
    19fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19fe:	88 23       	and	r24, r24
    1a00:	2c f4       	brge	.+10     	; 0x1a0c <HMI_Menu+0x986>
		__ticks = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9e 83       	std	Y+6, r25	; 0x06
    1a08:	8d 83       	std	Y+5, r24	; 0x05
    1a0a:	3f c0       	rjmp	.+126    	; 0x1a8a <HMI_Menu+0xa04>
	else if (__tmp > 65535)
    1a0c:	6f 81       	ldd	r22, Y+7	; 0x07
    1a0e:	78 85       	ldd	r23, Y+8	; 0x08
    1a10:	89 85       	ldd	r24, Y+9	; 0x09
    1a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	3f ef       	ldi	r19, 0xFF	; 255
    1a18:	4f e7       	ldi	r20, 0x7F	; 127
    1a1a:	57 e4       	ldi	r21, 0x47	; 71
    1a1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	4c f5       	brge	.+82     	; 0x1a76 <HMI_Menu+0x9f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2c:	20 e0       	ldi	r18, 0x00	; 0
    1a2e:	30 e0       	ldi	r19, 0x00	; 0
    1a30:	40 e2       	ldi	r20, 0x20	; 32
    1a32:	51 e4       	ldi	r21, 0x41	; 65
    1a34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a38:	dc 01       	movw	r26, r24
    1a3a:	cb 01       	movw	r24, r22
    1a3c:	bc 01       	movw	r22, r24
    1a3e:	cd 01       	movw	r24, r26
    1a40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a44:	dc 01       	movw	r26, r24
    1a46:	cb 01       	movw	r24, r22
    1a48:	9e 83       	std	Y+6, r25	; 0x06
    1a4a:	8d 83       	std	Y+5, r24	; 0x05
    1a4c:	0f c0       	rjmp	.+30     	; 0x1a6c <HMI_Menu+0x9e6>
    1a4e:	88 ec       	ldi	r24, 0xC8	; 200
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	9c 83       	std	Y+4, r25	; 0x04
    1a54:	8b 83       	std	Y+3, r24	; 0x03
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <HMI_Menu+0x9d4>
    1a5e:	9c 83       	std	Y+4, r25	; 0x04
    1a60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a62:	8d 81       	ldd	r24, Y+5	; 0x05
    1a64:	9e 81       	ldd	r25, Y+6	; 0x06
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	9e 83       	std	Y+6, r25	; 0x06
    1a6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a70:	00 97       	sbiw	r24, 0x00	; 0
    1a72:	69 f7       	brne	.-38     	; 0x1a4e <HMI_Menu+0x9c8>
    1a74:	14 c0       	rjmp	.+40     	; 0x1a9e <HMI_Menu+0xa18>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a76:	6f 81       	ldd	r22, Y+7	; 0x07
    1a78:	78 85       	ldd	r23, Y+8	; 0x08
    1a7a:	89 85       	ldd	r24, Y+9	; 0x09
    1a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	9e 83       	std	Y+6, r25	; 0x06
    1a88:	8d 83       	std	Y+5, r24	; 0x05
    1a8a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a8c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	89 81       	ldd	r24, Y+1	; 0x01
    1a94:	9a 81       	ldd	r25, Y+2	; 0x02
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	f1 f7       	brne	.-4      	; 0x1a96 <HMI_Menu+0xa10>
    1a9a:	9a 83       	std	Y+2, r25	; 0x02
    1a9c:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
			}

		}while(g_MistakeCount<3 && g_MistakeCount!=0);
    1a9e:	80 91 2c 01 	lds	r24, 0x012C
    1aa2:	83 30       	cpi	r24, 0x03	; 3
    1aa4:	28 f4       	brcc	.+10     	; 0x1ab0 <HMI_Menu+0xa2a>
    1aa6:	80 91 2c 01 	lds	r24, 0x012C
    1aaa:	88 23       	and	r24, r24
    1aac:	09 f0       	breq	.+2      	; 0x1ab0 <HMI_Menu+0xa2a>
    1aae:	93 ce       	rjmp	.-730    	; 0x17d6 <HMI_Menu+0x750>
		if(g_MistakeCount==3){
    1ab0:	80 91 2c 01 	lds	r24, 0x012C
    1ab4:	83 30       	cpi	r24, 0x03	; 3
    1ab6:	09 f0       	breq	.+2      	; 0x1aba <HMI_Menu+0xa34>
    1ab8:	57 c0       	rjmp	.+174    	; 0x1b68 <HMI_Menu+0xae2>
			/*
			 * Configure the timer NORMAL Mode
			 */
			Timer1_ConfigType Timer_Configuration_ERROR={0,0,F_CPU_1024,NORMAL};
    1aba:	ce 01       	movw	r24, r28
    1abc:	8c 59       	subi	r24, 0x9C	; 156
    1abe:	9f 4f       	sbci	r25, 0xFF	; 255
    1ac0:	e8 96       	adiw	r28, 0x38	; 56
    1ac2:	9f af       	std	Y+63, r25	; 0x3f
    1ac4:	8e af       	std	Y+62, r24	; 0x3e
    1ac6:	e8 97       	sbiw	r28, 0x38	; 56
    1ac8:	e7 e1       	ldi	r30, 0x17	; 23
    1aca:	f1 e0       	ldi	r31, 0x01	; 1
    1acc:	ea 96       	adiw	r28, 0x3a	; 58
    1ace:	ff af       	std	Y+63, r31	; 0x3f
    1ad0:	ee af       	std	Y+62, r30	; 0x3e
    1ad2:	ea 97       	sbiw	r28, 0x3a	; 58
    1ad4:	f6 e0       	ldi	r31, 0x06	; 6
    1ad6:	eb 96       	adiw	r28, 0x3b	; 59
    1ad8:	ff af       	std	Y+63, r31	; 0x3f
    1ada:	eb 97       	sbiw	r28, 0x3b	; 59
    1adc:	ea 96       	adiw	r28, 0x3a	; 58
    1ade:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ae0:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ae2:	ea 97       	sbiw	r28, 0x3a	; 58
    1ae4:	00 80       	ld	r0, Z
    1ae6:	ea 96       	adiw	r28, 0x3a	; 58
    1ae8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1aea:	3f ad       	ldd	r19, Y+63	; 0x3f
    1aec:	ea 97       	sbiw	r28, 0x3a	; 58
    1aee:	2f 5f       	subi	r18, 0xFF	; 255
    1af0:	3f 4f       	sbci	r19, 0xFF	; 255
    1af2:	ea 96       	adiw	r28, 0x3a	; 58
    1af4:	3f af       	std	Y+63, r19	; 0x3f
    1af6:	2e af       	std	Y+62, r18	; 0x3e
    1af8:	ea 97       	sbiw	r28, 0x3a	; 58
    1afa:	e8 96       	adiw	r28, 0x38	; 56
    1afc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1afe:	ff ad       	ldd	r31, Y+63	; 0x3f
    1b00:	e8 97       	sbiw	r28, 0x38	; 56
    1b02:	00 82       	st	Z, r0
    1b04:	e8 96       	adiw	r28, 0x38	; 56
    1b06:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b08:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b0a:	e8 97       	sbiw	r28, 0x38	; 56
    1b0c:	2f 5f       	subi	r18, 0xFF	; 255
    1b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b10:	e8 96       	adiw	r28, 0x38	; 56
    1b12:	3f af       	std	Y+63, r19	; 0x3f
    1b14:	2e af       	std	Y+62, r18	; 0x3e
    1b16:	e8 97       	sbiw	r28, 0x38	; 56
    1b18:	eb 96       	adiw	r28, 0x3b	; 59
    1b1a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b1c:	eb 97       	sbiw	r28, 0x3b	; 59
    1b1e:	31 50       	subi	r19, 0x01	; 1
    1b20:	eb 96       	adiw	r28, 0x3b	; 59
    1b22:	3f af       	std	Y+63, r19	; 0x3f
    1b24:	eb 97       	sbiw	r28, 0x3b	; 59
    1b26:	eb 96       	adiw	r28, 0x3b	; 59
    1b28:	8f ad       	ldd	r24, Y+63	; 0x3f
    1b2a:	eb 97       	sbiw	r28, 0x3b	; 59
    1b2c:	88 23       	and	r24, r24
    1b2e:	b1 f6       	brne	.-84     	; 0x1adc <HMI_Menu+0xa56>
			Timer1_setCallBack(HMI_CallbackError);
    1b30:	83 ea       	ldi	r24, 0xA3	; 163
    1b32:	95 e0       	ldi	r25, 0x05	; 5
    1b34:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <Timer1_setCallBack>
			Timer1_init(&Timer_Configuration_ERROR);
    1b38:	ce 01       	movw	r24, r28
    1b3a:	8c 59       	subi	r24, 0x9C	; 156
    1b3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1b3e:	0e 94 6d 1d 	call	0x3ada	; 0x3ada <Timer1_init>
			UART_sendByte(BUZZER_ON);
    1b42:	8b e0       	ldi	r24, 0x0B	; 11
    1b44:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
			LCD_displayString("ERROR");
    1b48:	80 e6       	ldi	r24, 0x60	; 96
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
			/*
			 * wait for 60 seconds
			 */
			while(g_ticks!=7);
    1b50:	80 91 2a 01 	lds	r24, 0x012A
    1b54:	87 30       	cpi	r24, 0x07	; 7
    1b56:	e1 f7       	brne	.-8      	; 0x1b50 <HMI_Menu+0xaca>
			Timer1_deInit();
    1b58:	0e 94 c7 1d 	call	0x3b8e	; 0x3b8e <Timer1_deInit>
			LCD_clearScreen();
    1b5c:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
			g_ticks=0;
    1b60:	10 92 2a 01 	sts	0x012A, r1
			g_MistakeCount=0;
    1b64:	10 92 2c 01 	sts	0x012C, r1

		//HMI_setPassword();
		break;

	}
}
    1b68:	c6 58       	subi	r28, 0x86	; 134
    1b6a:	df 4f       	sbci	r29, 0xFF	; 255
    1b6c:	0f b6       	in	r0, 0x3f	; 63
    1b6e:	f8 94       	cli
    1b70:	de bf       	out	0x3e, r29	; 62
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	cd bf       	out	0x3d, r28	; 61
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	08 95       	ret

00001b80 <main>:

int main(){
    1b80:	df 93       	push	r29
    1b82:	cf 93       	push	r28
    1b84:	cd b7       	in	r28, 0x3d	; 61
    1b86:	de b7       	in	r29, 0x3e	; 62
	UART_Configuration.baud_rate=BuadRate_9600;
    1b88:	80 e8       	ldi	r24, 0x80	; 128
    1b8a:	95 e2       	ldi	r25, 0x25	; 37
    1b8c:	a0 e0       	ldi	r26, 0x00	; 0
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	80 93 36 01 	sts	0x0136, r24
    1b94:	90 93 37 01 	sts	0x0137, r25
    1b98:	a0 93 38 01 	sts	0x0138, r26
    1b9c:	b0 93 39 01 	sts	0x0139, r27
	UART_Configuration.bit_data=Eight_bit_Mode;
    1ba0:	83 e0       	ldi	r24, 0x03	; 3
    1ba2:	80 93 33 01 	sts	0x0133, r24
	UART_Configuration.parity=Parity_Disabled;
    1ba6:	10 92 34 01 	sts	0x0134, r1
	UART_Configuration.stop_bit=One_Bit;
    1baa:	10 92 35 01 	sts	0x0135, r1

	LCD_init();
    1bae:	0e 94 d6 1b 	call	0x37ac	; 0x37ac <LCD_init>
	UART_init(&UART_Configuration);
    1bb2:	83 e3       	ldi	r24, 0x33	; 51
    1bb4:	91 e0       	ldi	r25, 0x01	; 1
    1bb6:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <UART_init>
	/*
	 * Enable global interrupt
	 */
	asm("SEI");
    1bba:	78 94       	sei
	while(1){

		/*
		 * Ask the control unit if there is password saved
		 */
		UART_sendByte(ASK_FOR_PASS);
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>

		g_CommandReceived=UART_recieveByte();
    1bc2:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <UART_recieveByte>
    1bc6:	80 93 2f 01 	sts	0x012F, r24

		if(g_CommandReceived==PASS_SET){
    1bca:	80 91 2f 01 	lds	r24, 0x012F
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	29 f4       	brne	.+10     	; 0x1bdc <main+0x5c>
			/*
			 * if the password is set show the options
			 */
			HMI_Menu();
    1bd2:	0e 94 43 08 	call	0x1086	; 0x1086 <HMI_Menu>
			LCD_clearScreen();
    1bd6:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
    1bda:	f0 cf       	rjmp	.-32     	; 0x1bbc <main+0x3c>
		}else{
			/*
			 * if the password is not set
			 * set a new password
			 */
			HMI_setPassword();
    1bdc:	0e 94 14 06 	call	0xc28	; 0xc28 <HMI_setPassword>
			LCD_clearScreen();
    1be0:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <LCD_clearScreen>
    1be4:	eb cf       	rjmp	.-42     	; 0x1bbc <main+0x3c>

00001be6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	00 d0       	rcall	.+0      	; 0x1bec <GPIO_setupPinDirection+0x6>
    1bec:	00 d0       	rcall	.+0      	; 0x1bee <GPIO_setupPinDirection+0x8>
    1bee:	0f 92       	push	r0
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	6a 83       	std	Y+2, r22	; 0x02
    1bf8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfc:	88 30       	cpi	r24, 0x08	; 8
    1bfe:	08 f0       	brcs	.+2      	; 0x1c02 <GPIO_setupPinDirection+0x1c>
    1c00:	d5 c0       	rjmp	.+426    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
    1c02:	89 81       	ldd	r24, Y+1	; 0x01
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	08 f0       	brcs	.+2      	; 0x1c0a <GPIO_setupPinDirection+0x24>
    1c08:	d1 c0       	rjmp	.+418    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c0a:	89 81       	ldd	r24, Y+1	; 0x01
    1c0c:	28 2f       	mov	r18, r24
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	3d 83       	std	Y+5, r19	; 0x05
    1c12:	2c 83       	std	Y+4, r18	; 0x04
    1c14:	8c 81       	ldd	r24, Y+4	; 0x04
    1c16:	9d 81       	ldd	r25, Y+5	; 0x05
    1c18:	81 30       	cpi	r24, 0x01	; 1
    1c1a:	91 05       	cpc	r25, r1
    1c1c:	09 f4       	brne	.+2      	; 0x1c20 <GPIO_setupPinDirection+0x3a>
    1c1e:	43 c0       	rjmp	.+134    	; 0x1ca6 <GPIO_setupPinDirection+0xc0>
    1c20:	2c 81       	ldd	r18, Y+4	; 0x04
    1c22:	3d 81       	ldd	r19, Y+5	; 0x05
    1c24:	22 30       	cpi	r18, 0x02	; 2
    1c26:	31 05       	cpc	r19, r1
    1c28:	2c f4       	brge	.+10     	; 0x1c34 <GPIO_setupPinDirection+0x4e>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	00 97       	sbiw	r24, 0x00	; 0
    1c30:	71 f0       	breq	.+28     	; 0x1c4e <GPIO_setupPinDirection+0x68>
    1c32:	bc c0       	rjmp	.+376    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
    1c34:	2c 81       	ldd	r18, Y+4	; 0x04
    1c36:	3d 81       	ldd	r19, Y+5	; 0x05
    1c38:	22 30       	cpi	r18, 0x02	; 2
    1c3a:	31 05       	cpc	r19, r1
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <GPIO_setupPinDirection+0x5a>
    1c3e:	5f c0       	rjmp	.+190    	; 0x1cfe <GPIO_setupPinDirection+0x118>
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	9d 81       	ldd	r25, Y+5	; 0x05
    1c44:	83 30       	cpi	r24, 0x03	; 3
    1c46:	91 05       	cpc	r25, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <GPIO_setupPinDirection+0x66>
    1c4a:	85 c0       	rjmp	.+266    	; 0x1d56 <GPIO_setupPinDirection+0x170>
    1c4c:	af c0       	rjmp	.+350    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	81 30       	cpi	r24, 0x01	; 1
    1c52:	a1 f4       	brne	.+40     	; 0x1c7c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c54:	aa e3       	ldi	r26, 0x3A	; 58
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	ea e3       	ldi	r30, 0x3A	; 58
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	48 2f       	mov	r20, r24
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	28 2f       	mov	r18, r24
    1c64:	30 e0       	ldi	r19, 0x00	; 0
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	02 2e       	mov	r0, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <GPIO_setupPinDirection+0x8c>
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <GPIO_setupPinDirection+0x88>
    1c76:	84 2b       	or	r24, r20
    1c78:	8c 93       	st	X, r24
    1c7a:	98 c0       	rjmp	.+304    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c7c:	aa e3       	ldi	r26, 0x3A	; 58
    1c7e:	b0 e0       	ldi	r27, 0x00	; 0
    1c80:	ea e3       	ldi	r30, 0x3A	; 58
    1c82:	f0 e0       	ldi	r31, 0x00	; 0
    1c84:	80 81       	ld	r24, Z
    1c86:	48 2f       	mov	r20, r24
    1c88:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8a:	28 2f       	mov	r18, r24
    1c8c:	30 e0       	ldi	r19, 0x00	; 0
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	02 2e       	mov	r0, r18
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <GPIO_setupPinDirection+0xb4>
    1c96:	88 0f       	add	r24, r24
    1c98:	99 1f       	adc	r25, r25
    1c9a:	0a 94       	dec	r0
    1c9c:	e2 f7       	brpl	.-8      	; 0x1c96 <GPIO_setupPinDirection+0xb0>
    1c9e:	80 95       	com	r24
    1ca0:	84 23       	and	r24, r20
    1ca2:	8c 93       	st	X, r24
    1ca4:	83 c0       	rjmp	.+262    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	a1 f4       	brne	.+40     	; 0x1cd4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cac:	a7 e3       	ldi	r26, 0x37	; 55
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	e7 e3       	ldi	r30, 0x37	; 55
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2f       	mov	r20, r24
    1cb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cba:	28 2f       	mov	r18, r24
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	02 2e       	mov	r0, r18
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <GPIO_setupPinDirection+0xe4>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <GPIO_setupPinDirection+0xe0>
    1cce:	84 2b       	or	r24, r20
    1cd0:	8c 93       	st	X, r24
    1cd2:	6c c0       	rjmp	.+216    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1cd4:	a7 e3       	ldi	r26, 0x37	; 55
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e7 e3       	ldi	r30, 0x37	; 55
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	48 2f       	mov	r20, r24
    1ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce2:	28 2f       	mov	r18, r24
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	81 e0       	ldi	r24, 0x01	; 1
    1ce8:	90 e0       	ldi	r25, 0x00	; 0
    1cea:	02 2e       	mov	r0, r18
    1cec:	02 c0       	rjmp	.+4      	; 0x1cf2 <GPIO_setupPinDirection+0x10c>
    1cee:	88 0f       	add	r24, r24
    1cf0:	99 1f       	adc	r25, r25
    1cf2:	0a 94       	dec	r0
    1cf4:	e2 f7       	brpl	.-8      	; 0x1cee <GPIO_setupPinDirection+0x108>
    1cf6:	80 95       	com	r24
    1cf8:	84 23       	and	r24, r20
    1cfa:	8c 93       	st	X, r24
    1cfc:	57 c0       	rjmp	.+174    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1d00:	81 30       	cpi	r24, 0x01	; 1
    1d02:	a1 f4       	brne	.+40     	; 0x1d2c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d04:	a4 e3       	ldi	r26, 0x34	; 52
    1d06:	b0 e0       	ldi	r27, 0x00	; 0
    1d08:	e4 e3       	ldi	r30, 0x34	; 52
    1d0a:	f0 e0       	ldi	r31, 0x00	; 0
    1d0c:	80 81       	ld	r24, Z
    1d0e:	48 2f       	mov	r20, r24
    1d10:	8a 81       	ldd	r24, Y+2	; 0x02
    1d12:	28 2f       	mov	r18, r24
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	02 2e       	mov	r0, r18
    1d1c:	02 c0       	rjmp	.+4      	; 0x1d22 <GPIO_setupPinDirection+0x13c>
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	0a 94       	dec	r0
    1d24:	e2 f7       	brpl	.-8      	; 0x1d1e <GPIO_setupPinDirection+0x138>
    1d26:	84 2b       	or	r24, r20
    1d28:	8c 93       	st	X, r24
    1d2a:	40 c0       	rjmp	.+128    	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d2c:	a4 e3       	ldi	r26, 0x34	; 52
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	e4 e3       	ldi	r30, 0x34	; 52
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <GPIO_setupPinDirection+0x164>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <GPIO_setupPinDirection+0x160>
    1d4e:	80 95       	com	r24
    1d50:	84 23       	and	r24, r20
    1d52:	8c 93       	st	X, r24
    1d54:	2b c0       	rjmp	.+86     	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	81 30       	cpi	r24, 0x01	; 1
    1d5a:	a1 f4       	brne	.+40     	; 0x1d84 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d5c:	a1 e3       	ldi	r26, 0x31	; 49
    1d5e:	b0 e0       	ldi	r27, 0x00	; 0
    1d60:	e1 e3       	ldi	r30, 0x31	; 49
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	80 81       	ld	r24, Z
    1d66:	48 2f       	mov	r20, r24
    1d68:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	81 e0       	ldi	r24, 0x01	; 1
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	02 2e       	mov	r0, r18
    1d74:	02 c0       	rjmp	.+4      	; 0x1d7a <GPIO_setupPinDirection+0x194>
    1d76:	88 0f       	add	r24, r24
    1d78:	99 1f       	adc	r25, r25
    1d7a:	0a 94       	dec	r0
    1d7c:	e2 f7       	brpl	.-8      	; 0x1d76 <GPIO_setupPinDirection+0x190>
    1d7e:	84 2b       	or	r24, r20
    1d80:	8c 93       	st	X, r24
    1d82:	14 c0       	rjmp	.+40     	; 0x1dac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d84:	a1 e3       	ldi	r26, 0x31	; 49
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e1 e3       	ldi	r30, 0x31	; 49
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 81       	ld	r24, Z
    1d8e:	48 2f       	mov	r20, r24
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 2e       	mov	r0, r18
    1d9c:	02 c0       	rjmp	.+4      	; 0x1da2 <GPIO_setupPinDirection+0x1bc>
    1d9e:	88 0f       	add	r24, r24
    1da0:	99 1f       	adc	r25, r25
    1da2:	0a 94       	dec	r0
    1da4:	e2 f7       	brpl	.-8      	; 0x1d9e <GPIO_setupPinDirection+0x1b8>
    1da6:	80 95       	com	r24
    1da8:	84 23       	and	r24, r20
    1daa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dac:	0f 90       	pop	r0
    1dae:	0f 90       	pop	r0
    1db0:	0f 90       	pop	r0
    1db2:	0f 90       	pop	r0
    1db4:	0f 90       	pop	r0
    1db6:	cf 91       	pop	r28
    1db8:	df 91       	pop	r29
    1dba:	08 95       	ret

00001dbc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1dbc:	df 93       	push	r29
    1dbe:	cf 93       	push	r28
    1dc0:	00 d0       	rcall	.+0      	; 0x1dc2 <GPIO_writePin+0x6>
    1dc2:	00 d0       	rcall	.+0      	; 0x1dc4 <GPIO_writePin+0x8>
    1dc4:	0f 92       	push	r0
    1dc6:	cd b7       	in	r28, 0x3d	; 61
    1dc8:	de b7       	in	r29, 0x3e	; 62
    1dca:	89 83       	std	Y+1, r24	; 0x01
    1dcc:	6a 83       	std	Y+2, r22	; 0x02
    1dce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd2:	88 30       	cpi	r24, 0x08	; 8
    1dd4:	08 f0       	brcs	.+2      	; 0x1dd8 <GPIO_writePin+0x1c>
    1dd6:	d5 c0       	rjmp	.+426    	; 0x1f82 <GPIO_writePin+0x1c6>
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	84 30       	cpi	r24, 0x04	; 4
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <GPIO_writePin+0x24>
    1dde:	d1 c0       	rjmp	.+418    	; 0x1f82 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1de0:	89 81       	ldd	r24, Y+1	; 0x01
    1de2:	28 2f       	mov	r18, r24
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	3d 83       	std	Y+5, r19	; 0x05
    1de8:	2c 83       	std	Y+4, r18	; 0x04
    1dea:	8c 81       	ldd	r24, Y+4	; 0x04
    1dec:	9d 81       	ldd	r25, Y+5	; 0x05
    1dee:	81 30       	cpi	r24, 0x01	; 1
    1df0:	91 05       	cpc	r25, r1
    1df2:	09 f4       	brne	.+2      	; 0x1df6 <GPIO_writePin+0x3a>
    1df4:	43 c0       	rjmp	.+134    	; 0x1e7c <GPIO_writePin+0xc0>
    1df6:	2c 81       	ldd	r18, Y+4	; 0x04
    1df8:	3d 81       	ldd	r19, Y+5	; 0x05
    1dfa:	22 30       	cpi	r18, 0x02	; 2
    1dfc:	31 05       	cpc	r19, r1
    1dfe:	2c f4       	brge	.+10     	; 0x1e0a <GPIO_writePin+0x4e>
    1e00:	8c 81       	ldd	r24, Y+4	; 0x04
    1e02:	9d 81       	ldd	r25, Y+5	; 0x05
    1e04:	00 97       	sbiw	r24, 0x00	; 0
    1e06:	71 f0       	breq	.+28     	; 0x1e24 <GPIO_writePin+0x68>
    1e08:	bc c0       	rjmp	.+376    	; 0x1f82 <GPIO_writePin+0x1c6>
    1e0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e0e:	22 30       	cpi	r18, 0x02	; 2
    1e10:	31 05       	cpc	r19, r1
    1e12:	09 f4       	brne	.+2      	; 0x1e16 <GPIO_writePin+0x5a>
    1e14:	5f c0       	rjmp	.+190    	; 0x1ed4 <GPIO_writePin+0x118>
    1e16:	8c 81       	ldd	r24, Y+4	; 0x04
    1e18:	9d 81       	ldd	r25, Y+5	; 0x05
    1e1a:	83 30       	cpi	r24, 0x03	; 3
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	09 f4       	brne	.+2      	; 0x1e22 <GPIO_writePin+0x66>
    1e20:	85 c0       	rjmp	.+266    	; 0x1f2c <GPIO_writePin+0x170>
    1e22:	af c0       	rjmp	.+350    	; 0x1f82 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e24:	8b 81       	ldd	r24, Y+3	; 0x03
    1e26:	81 30       	cpi	r24, 0x01	; 1
    1e28:	a1 f4       	brne	.+40     	; 0x1e52 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e2a:	ab e3       	ldi	r26, 0x3B	; 59
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	eb e3       	ldi	r30, 0x3B	; 59
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	02 2e       	mov	r0, r18
    1e42:	02 c0       	rjmp	.+4      	; 0x1e48 <GPIO_writePin+0x8c>
    1e44:	88 0f       	add	r24, r24
    1e46:	99 1f       	adc	r25, r25
    1e48:	0a 94       	dec	r0
    1e4a:	e2 f7       	brpl	.-8      	; 0x1e44 <GPIO_writePin+0x88>
    1e4c:	84 2b       	or	r24, r20
    1e4e:	8c 93       	st	X, r24
    1e50:	98 c0       	rjmp	.+304    	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <GPIO_writePin+0xb4>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <GPIO_writePin+0xb0>
    1e74:	80 95       	com	r24
    1e76:	84 23       	and	r24, r20
    1e78:	8c 93       	st	X, r24
    1e7a:	83 c0       	rjmp	.+262    	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7e:	81 30       	cpi	r24, 0x01	; 1
    1e80:	a1 f4       	brne	.+40     	; 0x1eaa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e82:	a8 e3       	ldi	r26, 0x38	; 56
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e8 e3       	ldi	r30, 0x38	; 56
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	48 2f       	mov	r20, r24
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	28 2f       	mov	r18, r24
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	02 2e       	mov	r0, r18
    1e9a:	02 c0       	rjmp	.+4      	; 0x1ea0 <GPIO_writePin+0xe4>
    1e9c:	88 0f       	add	r24, r24
    1e9e:	99 1f       	adc	r25, r25
    1ea0:	0a 94       	dec	r0
    1ea2:	e2 f7       	brpl	.-8      	; 0x1e9c <GPIO_writePin+0xe0>
    1ea4:	84 2b       	or	r24, r20
    1ea6:	8c 93       	st	X, r24
    1ea8:	6c c0       	rjmp	.+216    	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1eaa:	a8 e3       	ldi	r26, 0x38	; 56
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	e8 e3       	ldi	r30, 0x38	; 56
    1eb0:	f0 e0       	ldi	r31, 0x00	; 0
    1eb2:	80 81       	ld	r24, Z
    1eb4:	48 2f       	mov	r20, r24
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	28 2f       	mov	r18, r24
    1eba:	30 e0       	ldi	r19, 0x00	; 0
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	02 2e       	mov	r0, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <GPIO_writePin+0x10c>
    1ec4:	88 0f       	add	r24, r24
    1ec6:	99 1f       	adc	r25, r25
    1ec8:	0a 94       	dec	r0
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <GPIO_writePin+0x108>
    1ecc:	80 95       	com	r24
    1ece:	84 23       	and	r24, r20
    1ed0:	8c 93       	st	X, r24
    1ed2:	57 c0       	rjmp	.+174    	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	a1 f4       	brne	.+40     	; 0x1f02 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1eda:	a5 e3       	ldi	r26, 0x35	; 53
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e5 e3       	ldi	r30, 0x35	; 53
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	80 81       	ld	r24, Z
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee8:	28 2f       	mov	r18, r24
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	02 2e       	mov	r0, r18
    1ef2:	02 c0       	rjmp	.+4      	; 0x1ef8 <GPIO_writePin+0x13c>
    1ef4:	88 0f       	add	r24, r24
    1ef6:	99 1f       	adc	r25, r25
    1ef8:	0a 94       	dec	r0
    1efa:	e2 f7       	brpl	.-8      	; 0x1ef4 <GPIO_writePin+0x138>
    1efc:	84 2b       	or	r24, r20
    1efe:	8c 93       	st	X, r24
    1f00:	40 c0       	rjmp	.+128    	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f02:	a5 e3       	ldi	r26, 0x35	; 53
    1f04:	b0 e0       	ldi	r27, 0x00	; 0
    1f06:	e5 e3       	ldi	r30, 0x35	; 53
    1f08:	f0 e0       	ldi	r31, 0x00	; 0
    1f0a:	80 81       	ld	r24, Z
    1f0c:	48 2f       	mov	r20, r24
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	28 2f       	mov	r18, r24
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	02 2e       	mov	r0, r18
    1f1a:	02 c0       	rjmp	.+4      	; 0x1f20 <GPIO_writePin+0x164>
    1f1c:	88 0f       	add	r24, r24
    1f1e:	99 1f       	adc	r25, r25
    1f20:	0a 94       	dec	r0
    1f22:	e2 f7       	brpl	.-8      	; 0x1f1c <GPIO_writePin+0x160>
    1f24:	80 95       	com	r24
    1f26:	84 23       	and	r24, r20
    1f28:	8c 93       	st	X, r24
    1f2a:	2b c0       	rjmp	.+86     	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2e:	81 30       	cpi	r24, 0x01	; 1
    1f30:	a1 f4       	brne	.+40     	; 0x1f5a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f32:	a2 e3       	ldi	r26, 0x32	; 50
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	e2 e3       	ldi	r30, 0x32	; 50
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	48 2f       	mov	r20, r24
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	28 2f       	mov	r18, r24
    1f42:	30 e0       	ldi	r19, 0x00	; 0
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	02 2e       	mov	r0, r18
    1f4a:	02 c0       	rjmp	.+4      	; 0x1f50 <GPIO_writePin+0x194>
    1f4c:	88 0f       	add	r24, r24
    1f4e:	99 1f       	adc	r25, r25
    1f50:	0a 94       	dec	r0
    1f52:	e2 f7       	brpl	.-8      	; 0x1f4c <GPIO_writePin+0x190>
    1f54:	84 2b       	or	r24, r20
    1f56:	8c 93       	st	X, r24
    1f58:	14 c0       	rjmp	.+40     	; 0x1f82 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f5a:	a2 e3       	ldi	r26, 0x32	; 50
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e2 e3       	ldi	r30, 0x32	; 50
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	48 2f       	mov	r20, r24
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	02 2e       	mov	r0, r18
    1f72:	02 c0       	rjmp	.+4      	; 0x1f78 <GPIO_writePin+0x1bc>
    1f74:	88 0f       	add	r24, r24
    1f76:	99 1f       	adc	r25, r25
    1f78:	0a 94       	dec	r0
    1f7a:	e2 f7       	brpl	.-8      	; 0x1f74 <GPIO_writePin+0x1b8>
    1f7c:	80 95       	com	r24
    1f7e:	84 23       	and	r24, r20
    1f80:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f82:	0f 90       	pop	r0
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	cf 91       	pop	r28
    1f8e:	df 91       	pop	r29
    1f90:	08 95       	ret

00001f92 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f92:	df 93       	push	r29
    1f94:	cf 93       	push	r28
    1f96:	00 d0       	rcall	.+0      	; 0x1f98 <GPIO_readPin+0x6>
    1f98:	00 d0       	rcall	.+0      	; 0x1f9a <GPIO_readPin+0x8>
    1f9a:	0f 92       	push	r0
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	89 83       	std	Y+1, r24	; 0x01
    1fa2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa6:	88 30       	cpi	r24, 0x08	; 8
    1fa8:	08 f0       	brcs	.+2      	; 0x1fac <GPIO_readPin+0x1a>
    1faa:	9e c0       	rjmp	.+316    	; 0x20e8 <GPIO_readPin+0x156>
    1fac:	89 81       	ldd	r24, Y+1	; 0x01
    1fae:	84 30       	cpi	r24, 0x04	; 4
    1fb0:	08 f0       	brcs	.+2      	; 0x1fb4 <GPIO_readPin+0x22>
    1fb2:	9a c0       	rjmp	.+308    	; 0x20e8 <GPIO_readPin+0x156>
	{
		/* Do Nothing*/
			}
	else
	{
		switch(port_num){
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	3d 83       	std	Y+5, r19	; 0x05
    1fbc:	2c 83       	std	Y+4, r18	; 0x04
    1fbe:	4c 81       	ldd	r20, Y+4	; 0x04
    1fc0:	5d 81       	ldd	r21, Y+5	; 0x05
    1fc2:	41 30       	cpi	r20, 0x01	; 1
    1fc4:	51 05       	cpc	r21, r1
    1fc6:	b1 f1       	breq	.+108    	; 0x2034 <GPIO_readPin+0xa2>
    1fc8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fca:	9d 81       	ldd	r25, Y+5	; 0x05
    1fcc:	82 30       	cpi	r24, 0x02	; 2
    1fce:	91 05       	cpc	r25, r1
    1fd0:	34 f4       	brge	.+12     	; 0x1fde <GPIO_readPin+0x4c>
    1fd2:	2c 81       	ldd	r18, Y+4	; 0x04
    1fd4:	3d 81       	ldd	r19, Y+5	; 0x05
    1fd6:	21 15       	cp	r18, r1
    1fd8:	31 05       	cpc	r19, r1
    1fda:	71 f0       	breq	.+28     	; 0x1ff8 <GPIO_readPin+0x66>
    1fdc:	85 c0       	rjmp	.+266    	; 0x20e8 <GPIO_readPin+0x156>
    1fde:	4c 81       	ldd	r20, Y+4	; 0x04
    1fe0:	5d 81       	ldd	r21, Y+5	; 0x05
    1fe2:	42 30       	cpi	r20, 0x02	; 2
    1fe4:	51 05       	cpc	r21, r1
    1fe6:	09 f4       	brne	.+2      	; 0x1fea <GPIO_readPin+0x58>
    1fe8:	43 c0       	rjmp	.+134    	; 0x2070 <GPIO_readPin+0xde>
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	83 30       	cpi	r24, 0x03	; 3
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <GPIO_readPin+0x64>
    1ff4:	5b c0       	rjmp	.+182    	; 0x20ac <GPIO_readPin+0x11a>
    1ff6:	78 c0       	rjmp	.+240    	; 0x20e8 <GPIO_readPin+0x156>
		case PORTA_ID:
			return (BIT_IS_SET(PINA,pin_num)>>pin_num);
    1ff8:	e9 e3       	ldi	r30, 0x39	; 57
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	48 2f       	mov	r20, r24
    2000:	50 e0       	ldi	r21, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 c0       	rjmp	.+4      	; 0x2012 <GPIO_readPin+0x80>
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	2a 95       	dec	r18
    2014:	e2 f7       	brpl	.-8      	; 0x200e <GPIO_readPin+0x7c>
    2016:	9a 01       	movw	r18, r20
    2018:	28 23       	and	r18, r24
    201a:	39 23       	and	r19, r25
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	88 2f       	mov	r24, r24
    2020:	90 e0       	ldi	r25, 0x00	; 0
    2022:	a9 01       	movw	r20, r18
    2024:	02 c0       	rjmp	.+4      	; 0x202a <GPIO_readPin+0x98>
    2026:	55 95       	asr	r21
    2028:	47 95       	ror	r20
    202a:	8a 95       	dec	r24
    202c:	e2 f7       	brpl	.-8      	; 0x2026 <GPIO_readPin+0x94>
    202e:	ca 01       	movw	r24, r20
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	5b c0       	rjmp	.+182    	; 0x20ea <GPIO_readPin+0x158>
			break;
		case PORTB_ID:
			return (BIT_IS_SET(PINB,pin_num)>>pin_num);
    2034:	e6 e3       	ldi	r30, 0x36	; 54
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
    203a:	48 2f       	mov	r20, r24
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 c0       	rjmp	.+4      	; 0x204e <GPIO_readPin+0xbc>
    204a:	88 0f       	add	r24, r24
    204c:	99 1f       	adc	r25, r25
    204e:	2a 95       	dec	r18
    2050:	e2 f7       	brpl	.-8      	; 0x204a <GPIO_readPin+0xb8>
    2052:	9a 01       	movw	r18, r20
    2054:	28 23       	and	r18, r24
    2056:	39 23       	and	r19, r25
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	88 2f       	mov	r24, r24
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	a9 01       	movw	r20, r18
    2060:	02 c0       	rjmp	.+4      	; 0x2066 <GPIO_readPin+0xd4>
    2062:	55 95       	asr	r21
    2064:	47 95       	ror	r20
    2066:	8a 95       	dec	r24
    2068:	e2 f7       	brpl	.-8      	; 0x2062 <GPIO_readPin+0xd0>
    206a:	ca 01       	movw	r24, r20
    206c:	8b 83       	std	Y+3, r24	; 0x03
    206e:	3d c0       	rjmp	.+122    	; 0x20ea <GPIO_readPin+0x158>
			break;
		case PORTC_ID:
			return (BIT_IS_SET(PINC,pin_num)>>pin_num);
    2070:	e3 e3       	ldi	r30, 0x33	; 51
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	48 2f       	mov	r20, r24
    2078:	50 e0       	ldi	r21, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 c0       	rjmp	.+4      	; 0x208a <GPIO_readPin+0xf8>
    2086:	88 0f       	add	r24, r24
    2088:	99 1f       	adc	r25, r25
    208a:	2a 95       	dec	r18
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <GPIO_readPin+0xf4>
    208e:	9a 01       	movw	r18, r20
    2090:	28 23       	and	r18, r24
    2092:	39 23       	and	r19, r25
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	88 2f       	mov	r24, r24
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a9 01       	movw	r20, r18
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <GPIO_readPin+0x110>
    209e:	55 95       	asr	r21
    20a0:	47 95       	ror	r20
    20a2:	8a 95       	dec	r24
    20a4:	e2 f7       	brpl	.-8      	; 0x209e <GPIO_readPin+0x10c>
    20a6:	ca 01       	movw	r24, r20
    20a8:	8b 83       	std	Y+3, r24	; 0x03
    20aa:	1f c0       	rjmp	.+62     	; 0x20ea <GPIO_readPin+0x158>
			break;
		case PORTD_ID:
			return (BIT_IS_SET(PIND,pin_num)>>pin_num);
    20ac:	e0 e3       	ldi	r30, 0x30	; 48
    20ae:	f0 e0       	ldi	r31, 0x00	; 0
    20b0:	80 81       	ld	r24, Z
    20b2:	48 2f       	mov	r20, r24
    20b4:	50 e0       	ldi	r21, 0x00	; 0
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <GPIO_readPin+0x134>
    20c2:	88 0f       	add	r24, r24
    20c4:	99 1f       	adc	r25, r25
    20c6:	2a 95       	dec	r18
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <GPIO_readPin+0x130>
    20ca:	9a 01       	movw	r18, r20
    20cc:	28 23       	and	r18, r24
    20ce:	39 23       	and	r19, r25
    20d0:	8a 81       	ldd	r24, Y+2	; 0x02
    20d2:	88 2f       	mov	r24, r24
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	a9 01       	movw	r20, r18
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <GPIO_readPin+0x14c>
    20da:	55 95       	asr	r21
    20dc:	47 95       	ror	r20
    20de:	8a 95       	dec	r24
    20e0:	e2 f7       	brpl	.-8      	; 0x20da <GPIO_readPin+0x148>
    20e2:	ca 01       	movw	r24, r20
    20e4:	8b 83       	std	Y+3, r24	; 0x03
    20e6:	01 c0       	rjmp	.+2      	; 0x20ea <GPIO_readPin+0x158>

		}

	}

	return LOGIC_LOW;
    20e8:	1b 82       	std	Y+3, r1	; 0x03
    20ea:	8b 81       	ldd	r24, Y+3	; 0x03
}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	cf 91       	pop	r28
    20f8:	df 91       	pop	r29
    20fa:	08 95       	ret

000020fc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    20fc:	df 93       	push	r29
    20fe:	cf 93       	push	r28
    2100:	00 d0       	rcall	.+0      	; 0x2102 <GPIO_setupPortDirection+0x6>
    2102:	00 d0       	rcall	.+0      	; 0x2104 <GPIO_setupPortDirection+0x8>
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    210c:	89 81       	ldd	r24, Y+1	; 0x01
    210e:	84 30       	cpi	r24, 0x04	; 4
    2110:	90 f5       	brcc	.+100    	; 0x2176 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	28 2f       	mov	r18, r24
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	3c 83       	std	Y+4, r19	; 0x04
    211a:	2b 83       	std	Y+3, r18	; 0x03
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	81 30       	cpi	r24, 0x01	; 1
    2122:	91 05       	cpc	r25, r1
    2124:	d1 f0       	breq	.+52     	; 0x215a <GPIO_setupPortDirection+0x5e>
    2126:	2b 81       	ldd	r18, Y+3	; 0x03
    2128:	3c 81       	ldd	r19, Y+4	; 0x04
    212a:	22 30       	cpi	r18, 0x02	; 2
    212c:	31 05       	cpc	r19, r1
    212e:	2c f4       	brge	.+10     	; 0x213a <GPIO_setupPortDirection+0x3e>
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	61 f0       	breq	.+24     	; 0x2150 <GPIO_setupPortDirection+0x54>
    2138:	1e c0       	rjmp	.+60     	; 0x2176 <GPIO_setupPortDirection+0x7a>
    213a:	2b 81       	ldd	r18, Y+3	; 0x03
    213c:	3c 81       	ldd	r19, Y+4	; 0x04
    213e:	22 30       	cpi	r18, 0x02	; 2
    2140:	31 05       	cpc	r19, r1
    2142:	81 f0       	breq	.+32     	; 0x2164 <GPIO_setupPortDirection+0x68>
    2144:	8b 81       	ldd	r24, Y+3	; 0x03
    2146:	9c 81       	ldd	r25, Y+4	; 0x04
    2148:	83 30       	cpi	r24, 0x03	; 3
    214a:	91 05       	cpc	r25, r1
    214c:	81 f0       	breq	.+32     	; 0x216e <GPIO_setupPortDirection+0x72>
    214e:	13 c0       	rjmp	.+38     	; 0x2176 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2150:	ea e3       	ldi	r30, 0x3A	; 58
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	80 83       	st	Z, r24
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    215a:	e7 e3       	ldi	r30, 0x37	; 55
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	80 83       	st	Z, r24
    2162:	09 c0       	rjmp	.+18     	; 0x2176 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2164:	e4 e3       	ldi	r30, 0x34	; 52
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	8a 81       	ldd	r24, Y+2	; 0x02
    216a:	80 83       	st	Z, r24
    216c:	04 c0       	rjmp	.+8      	; 0x2176 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    216e:	e1 e3       	ldi	r30, 0x31	; 49
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	80 83       	st	Z, r24
			break;
		}

	}
}
    2176:	0f 90       	pop	r0
    2178:	0f 90       	pop	r0
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	cf 91       	pop	r28
    2180:	df 91       	pop	r29
    2182:	08 95       	ret

00002184 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2184:	df 93       	push	r29
    2186:	cf 93       	push	r28
    2188:	00 d0       	rcall	.+0      	; 0x218a <GPIO_writePort+0x6>
    218a:	00 d0       	rcall	.+0      	; 0x218c <GPIO_writePort+0x8>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	89 83       	std	Y+1, r24	; 0x01
    2192:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	84 30       	cpi	r24, 0x04	; 4
    2198:	90 f5       	brcc	.+100    	; 0x21fe <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3c 83       	std	Y+4, r19	; 0x04
    21a2:	2b 83       	std	Y+3, r18	; 0x03
    21a4:	8b 81       	ldd	r24, Y+3	; 0x03
    21a6:	9c 81       	ldd	r25, Y+4	; 0x04
    21a8:	81 30       	cpi	r24, 0x01	; 1
    21aa:	91 05       	cpc	r25, r1
    21ac:	d1 f0       	breq	.+52     	; 0x21e2 <GPIO_writePort+0x5e>
    21ae:	2b 81       	ldd	r18, Y+3	; 0x03
    21b0:	3c 81       	ldd	r19, Y+4	; 0x04
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	31 05       	cpc	r19, r1
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <GPIO_writePort+0x3e>
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	9c 81       	ldd	r25, Y+4	; 0x04
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	61 f0       	breq	.+24     	; 0x21d8 <GPIO_writePort+0x54>
    21c0:	1e c0       	rjmp	.+60     	; 0x21fe <GPIO_writePort+0x7a>
    21c2:	2b 81       	ldd	r18, Y+3	; 0x03
    21c4:	3c 81       	ldd	r19, Y+4	; 0x04
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	81 f0       	breq	.+32     	; 0x21ec <GPIO_writePort+0x68>
    21cc:	8b 81       	ldd	r24, Y+3	; 0x03
    21ce:	9c 81       	ldd	r25, Y+4	; 0x04
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	91 05       	cpc	r25, r1
    21d4:	81 f0       	breq	.+32     	; 0x21f6 <GPIO_writePort+0x72>
    21d6:	13 c0       	rjmp	.+38     	; 0x21fe <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21d8:	eb e3       	ldi	r30, 0x3B	; 59
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	80 83       	st	Z, r24
    21e0:	0e c0       	rjmp	.+28     	; 0x21fe <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21e2:	e8 e3       	ldi	r30, 0x38	; 56
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	8a 81       	ldd	r24, Y+2	; 0x02
    21e8:	80 83       	st	Z, r24
    21ea:	09 c0       	rjmp	.+18     	; 0x21fe <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21ec:	e5 e3       	ldi	r30, 0x35	; 53
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	80 83       	st	Z, r24
    21f4:	04 c0       	rjmp	.+8      	; 0x21fe <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    21f6:	e2 e3       	ldi	r30, 0x32	; 50
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	8a 81       	ldd	r24, Y+2	; 0x02
    21fc:	80 83       	st	Z, r24
			break;
		}
	}
}
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	cf 91       	pop	r28
    2208:	df 91       	pop	r29
    220a:	08 95       	ret

0000220c <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	00 d0       	rcall	.+0      	; 0x2212 <GPIO_readPort+0x6>
    2212:	00 d0       	rcall	.+0      	; 0x2214 <GPIO_readPort+0x8>
    2214:	cd b7       	in	r28, 0x3d	; 61
    2216:	de b7       	in	r29, 0x3e	; 62
    2218:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    221a:	89 81       	ldd	r24, Y+1	; 0x01
    221c:	84 30       	cpi	r24, 0x04	; 4
    221e:	98 f5       	brcc	.+102    	; 0x2286 <GPIO_readPort+0x7a>
		/* Do Nothing*/
			}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2220:	89 81       	ldd	r24, Y+1	; 0x01
    2222:	28 2f       	mov	r18, r24
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	3c 83       	std	Y+4, r19	; 0x04
    2228:	2b 83       	std	Y+3, r18	; 0x03
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	91 05       	cpc	r25, r1
    2232:	d1 f0       	breq	.+52     	; 0x2268 <GPIO_readPort+0x5c>
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	22 30       	cpi	r18, 0x02	; 2
    223a:	31 05       	cpc	r19, r1
    223c:	2c f4       	brge	.+10     	; 0x2248 <GPIO_readPort+0x3c>
    223e:	8b 81       	ldd	r24, Y+3	; 0x03
    2240:	9c 81       	ldd	r25, Y+4	; 0x04
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	61 f0       	breq	.+24     	; 0x225e <GPIO_readPort+0x52>
    2246:	1f c0       	rjmp	.+62     	; 0x2286 <GPIO_readPort+0x7a>
    2248:	2b 81       	ldd	r18, Y+3	; 0x03
    224a:	3c 81       	ldd	r19, Y+4	; 0x04
    224c:	22 30       	cpi	r18, 0x02	; 2
    224e:	31 05       	cpc	r19, r1
    2250:	81 f0       	breq	.+32     	; 0x2272 <GPIO_readPort+0x66>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	83 30       	cpi	r24, 0x03	; 3
    2258:	91 05       	cpc	r25, r1
    225a:	81 f0       	breq	.+32     	; 0x227c <GPIO_readPort+0x70>
    225c:	14 c0       	rjmp	.+40     	; 0x2286 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			return PINA;
    225e:	e9 e3       	ldi	r30, 0x39	; 57
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	90 81       	ld	r25, Z
    2264:	9a 83       	std	Y+2, r25	; 0x02
    2266:	10 c0       	rjmp	.+32     	; 0x2288 <GPIO_readPort+0x7c>
			break;
		case PORTB_ID:
			return PINB;
    2268:	e6 e3       	ldi	r30, 0x36	; 54
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	20 81       	ld	r18, Z
    226e:	2a 83       	std	Y+2, r18	; 0x02
    2270:	0b c0       	rjmp	.+22     	; 0x2288 <GPIO_readPort+0x7c>
			break;
		case PORTC_ID:
			return PINC;
    2272:	e3 e3       	ldi	r30, 0x33	; 51
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	30 81       	ld	r19, Z
    2278:	3a 83       	std	Y+2, r19	; 0x02
    227a:	06 c0       	rjmp	.+12     	; 0x2288 <GPIO_readPort+0x7c>
			break;
		case PORTD_ID:
			return PIND;
    227c:	e0 e3       	ldi	r30, 0x30	; 48
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8a 83       	std	Y+2, r24	; 0x02
    2284:	01 c0       	rjmp	.+2      	; 0x2288 <GPIO_readPort+0x7c>
			break;
		}
	}
	return LOGIC_LOW;
    2286:	1a 82       	std	Y+2, r1	; 0x02
    2288:	8a 81       	ldd	r24, Y+2	; 0x02
}
    228a:	0f 90       	pop	r0
    228c:	0f 90       	pop	r0
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	cf 91       	pop	r28
    2294:	df 91       	pop	r29
    2296:	08 95       	ret

00002298 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    2298:	df 93       	push	r29
    229a:	cf 93       	push	r28
    229c:	cd b7       	in	r28, 0x3d	; 61
    229e:	de b7       	in	r29, 0x3e	; 62
    22a0:	60 97       	sbiw	r28, 0x10	; 16
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	64 e0       	ldi	r22, 0x04	; 4
    22b0:	40 e0       	ldi	r20, 0x00	; 0
    22b2:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	65 e0       	ldi	r22, 0x05	; 5
    22ba:	40 e0       	ldi	r20, 0x00	; 0
    22bc:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    22c0:	81 e0       	ldi	r24, 0x01	; 1
    22c2:	66 e0       	ldi	r22, 0x06	; 6
    22c4:	40 e0       	ldi	r20, 0x00	; 0
    22c6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	67 e0       	ldi	r22, 0x07	; 7
    22ce:	40 e0       	ldi	r20, 0x00	; 0
    22d0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    22d4:	83 e0       	ldi	r24, 0x03	; 3
    22d6:	62 e0       	ldi	r22, 0x02	; 2
    22d8:	40 e0       	ldi	r20, 0x00	; 0
    22da:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    22de:	83 e0       	ldi	r24, 0x03	; 3
    22e0:	63 e0       	ldi	r22, 0x03	; 3
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    22e8:	83 e0       	ldi	r24, 0x03	; 3
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    22f2:	83 e0       	ldi	r24, 0x03	; 3
    22f4:	65 e0       	ldi	r22, 0x05	; 5
    22f6:	40 e0       	ldi	r20, 0x00	; 0
    22f8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    22fc:	1f 86       	std	Y+15, r1	; 0x0f
    22fe:	b4 c0       	rjmp	.+360    	; 0x2468 <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    2300:	8f 85       	ldd	r24, Y+15	; 0x0f
    2302:	98 2f       	mov	r25, r24
    2304:	9c 5f       	subi	r25, 0xFC	; 252
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	69 2f       	mov	r22, r25
    230a:	41 e0       	ldi	r20, 0x01	; 1
    230c:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    2310:	8f 85       	ldd	r24, Y+15	; 0x0f
    2312:	98 2f       	mov	r25, r24
    2314:	9c 5f       	subi	r25, 0xFC	; 252
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	69 2f       	mov	r22, r25
    231a:	40 e0       	ldi	r20, 0x00	; 0
    231c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2320:	18 8a       	std	Y+16, r1	; 0x10
    2322:	22 c0       	rjmp	.+68     	; 0x2368 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    2324:	88 89       	ldd	r24, Y+16	; 0x10
    2326:	98 2f       	mov	r25, r24
    2328:	9e 5f       	subi	r25, 0xFE	; 254
    232a:	83 e0       	ldi	r24, 0x03	; 3
    232c:	69 2f       	mov	r22, r25
    232e:	0e 94 c9 0f 	call	0x1f92	; 0x1f92 <GPIO_readPin>
    2332:	88 23       	and	r24, r24
    2334:	b1 f4       	brne	.+44     	; 0x2362 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    2336:	8f 85       	ldd	r24, Y+15	; 0x0f
    2338:	88 2f       	mov	r24, r24
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	88 0f       	add	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	98 2f       	mov	r25, r24
    2346:	88 89       	ldd	r24, Y+16	; 0x10
    2348:	89 0f       	add	r24, r25
    234a:	8f 5f       	subi	r24, 0xFF	; 255
    234c:	0e 94 39 12 	call	0x2472	; 0x2472 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    2350:	60 96       	adiw	r28, 0x10	; 16
    2352:	0f b6       	in	r0, 0x3f	; 63
    2354:	f8 94       	cli
    2356:	de bf       	out	0x3e, r29	; 62
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	cd bf       	out	0x3d, r28	; 61
    235c:	cf 91       	pop	r28
    235e:	df 91       	pop	r29
    2360:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    2362:	88 89       	ldd	r24, Y+16	; 0x10
    2364:	8f 5f       	subi	r24, 0xFF	; 255
    2366:	88 8b       	std	Y+16, r24	; 0x10
    2368:	88 89       	ldd	r24, Y+16	; 0x10
    236a:	84 30       	cpi	r24, 0x04	; 4
    236c:	d8 f2       	brcs	.-74     	; 0x2324 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    236e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2370:	98 2f       	mov	r25, r24
    2372:	9c 5f       	subi	r25, 0xFC	; 252
    2374:	81 e0       	ldi	r24, 0x01	; 1
    2376:	69 2f       	mov	r22, r25
    2378:	40 e0       	ldi	r20, 0x00	; 0
    237a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 ea       	ldi	r26, 0xA0	; 160
    2384:	b0 e4       	ldi	r27, 0x40	; 64
    2386:	8b 87       	std	Y+11, r24	; 0x0b
    2388:	9c 87       	std	Y+12, r25	; 0x0c
    238a:	ad 87       	std	Y+13, r26	; 0x0d
    238c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2390:	7c 85       	ldd	r23, Y+12	; 0x0c
    2392:	8d 85       	ldd	r24, Y+13	; 0x0d
    2394:	9e 85       	ldd	r25, Y+14	; 0x0e
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	4a ef       	ldi	r20, 0xFA	; 250
    239c:	54 e4       	ldi	r21, 0x44	; 68
    239e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	8f 83       	std	Y+7, r24	; 0x07
    23a8:	98 87       	std	Y+8, r25	; 0x08
    23aa:	a9 87       	std	Y+9, r26	; 0x09
    23ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	20 e0       	ldi	r18, 0x00	; 0
    23b8:	30 e0       	ldi	r19, 0x00	; 0
    23ba:	40 e8       	ldi	r20, 0x80	; 128
    23bc:	5f e3       	ldi	r21, 0x3F	; 63
    23be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23c2:	88 23       	and	r24, r24
    23c4:	2c f4       	brge	.+10     	; 0x23d0 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	9e 83       	std	Y+6, r25	; 0x06
    23cc:	8d 83       	std	Y+5, r24	; 0x05
    23ce:	3f c0       	rjmp	.+126    	; 0x244e <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    23d0:	6f 81       	ldd	r22, Y+7	; 0x07
    23d2:	78 85       	ldd	r23, Y+8	; 0x08
    23d4:	89 85       	ldd	r24, Y+9	; 0x09
    23d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	3f ef       	ldi	r19, 0xFF	; 255
    23dc:	4f e7       	ldi	r20, 0x7F	; 127
    23de:	57 e4       	ldi	r21, 0x47	; 71
    23e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e4:	18 16       	cp	r1, r24
    23e6:	4c f5       	brge	.+82     	; 0x243a <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    23ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    23ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f0:	20 e0       	ldi	r18, 0x00	; 0
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	40 e2       	ldi	r20, 0x20	; 32
    23f6:	51 e4       	ldi	r21, 0x41	; 65
    23f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	bc 01       	movw	r22, r24
    2402:	cd 01       	movw	r24, r26
    2404:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	9e 83       	std	Y+6, r25	; 0x06
    240e:	8d 83       	std	Y+5, r24	; 0x05
    2410:	0f c0       	rjmp	.+30     	; 0x2430 <KEYPAD_getPressedKey+0x198>
    2412:	88 ec       	ldi	r24, 0xC8	; 200
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
    241a:	8b 81       	ldd	r24, Y+3	; 0x03
    241c:	9c 81       	ldd	r25, Y+4	; 0x04
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <KEYPAD_getPressedKey+0x186>
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2426:	8d 81       	ldd	r24, Y+5	; 0x05
    2428:	9e 81       	ldd	r25, Y+6	; 0x06
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	9e 83       	std	Y+6, r25	; 0x06
    242e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2430:	8d 81       	ldd	r24, Y+5	; 0x05
    2432:	9e 81       	ldd	r25, Y+6	; 0x06
    2434:	00 97       	sbiw	r24, 0x00	; 0
    2436:	69 f7       	brne	.-38     	; 0x2412 <KEYPAD_getPressedKey+0x17a>
    2438:	14 c0       	rjmp	.+40     	; 0x2462 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    243a:	6f 81       	ldd	r22, Y+7	; 0x07
    243c:	78 85       	ldd	r23, Y+8	; 0x08
    243e:	89 85       	ldd	r24, Y+9	; 0x09
    2440:	9a 85       	ldd	r25, Y+10	; 0x0a
    2442:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	9e 83       	std	Y+6, r25	; 0x06
    244c:	8d 83       	std	Y+5, r24	; 0x05
    244e:	8d 81       	ldd	r24, Y+5	; 0x05
    2450:	9e 81       	ldd	r25, Y+6	; 0x06
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	89 81       	ldd	r24, Y+1	; 0x01
    2458:	9a 81       	ldd	r25, Y+2	; 0x02
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	f1 f7       	brne	.-4      	; 0x245a <KEYPAD_getPressedKey+0x1c2>
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2462:	8f 85       	ldd	r24, Y+15	; 0x0f
    2464:	8f 5f       	subi	r24, 0xFF	; 255
    2466:	8f 87       	std	Y+15, r24	; 0x0f
    2468:	8f 85       	ldd	r24, Y+15	; 0x0f
    246a:	84 30       	cpi	r24, 0x04	; 4
    246c:	08 f4       	brcc	.+2      	; 0x2470 <KEYPAD_getPressedKey+0x1d8>
    246e:	48 cf       	rjmp	.-368    	; 0x2300 <KEYPAD_getPressedKey+0x68>
    2470:	45 cf       	rjmp	.-374    	; 0x22fc <KEYPAD_getPressedKey+0x64>

00002472 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2472:	df 93       	push	r29
    2474:	cf 93       	push	r28
    2476:	00 d0       	rcall	.+0      	; 0x2478 <KEYPAD_4x4_adjustKeyNumber+0x6>
    2478:	00 d0       	rcall	.+0      	; 0x247a <KEYPAD_4x4_adjustKeyNumber+0x8>
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2480:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2482:	8a 81       	ldd	r24, Y+2	; 0x02
    2484:	28 2f       	mov	r18, r24
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	3c 83       	std	Y+4, r19	; 0x04
    248a:	2b 83       	std	Y+3, r18	; 0x03
    248c:	8b 81       	ldd	r24, Y+3	; 0x03
    248e:	9c 81       	ldd	r25, Y+4	; 0x04
    2490:	88 30       	cpi	r24, 0x08	; 8
    2492:	91 05       	cpc	r25, r1
    2494:	09 f4       	brne	.+2      	; 0x2498 <KEYPAD_4x4_adjustKeyNumber+0x26>
    2496:	70 c0       	rjmp	.+224    	; 0x2578 <KEYPAD_4x4_adjustKeyNumber+0x106>
    2498:	2b 81       	ldd	r18, Y+3	; 0x03
    249a:	3c 81       	ldd	r19, Y+4	; 0x04
    249c:	29 30       	cpi	r18, 0x09	; 9
    249e:	31 05       	cpc	r19, r1
    24a0:	5c f5       	brge	.+86     	; 0x24f8 <KEYPAD_4x4_adjustKeyNumber+0x86>
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	84 30       	cpi	r24, 0x04	; 4
    24a8:	91 05       	cpc	r25, r1
    24aa:	09 f4       	brne	.+2      	; 0x24ae <KEYPAD_4x4_adjustKeyNumber+0x3c>
    24ac:	59 c0       	rjmp	.+178    	; 0x2560 <KEYPAD_4x4_adjustKeyNumber+0xee>
    24ae:	2b 81       	ldd	r18, Y+3	; 0x03
    24b0:	3c 81       	ldd	r19, Y+4	; 0x04
    24b2:	25 30       	cpi	r18, 0x05	; 5
    24b4:	31 05       	cpc	r19, r1
    24b6:	9c f4       	brge	.+38     	; 0x24de <KEYPAD_4x4_adjustKeyNumber+0x6c>
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	82 30       	cpi	r24, 0x02	; 2
    24be:	91 05       	cpc	r25, r1
    24c0:	09 f4       	brne	.+2      	; 0x24c4 <KEYPAD_4x4_adjustKeyNumber+0x52>
    24c2:	48 c0       	rjmp	.+144    	; 0x2554 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    24c4:	2b 81       	ldd	r18, Y+3	; 0x03
    24c6:	3c 81       	ldd	r19, Y+4	; 0x04
    24c8:	23 30       	cpi	r18, 0x03	; 3
    24ca:	31 05       	cpc	r19, r1
    24cc:	0c f0       	brlt	.+2      	; 0x24d0 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    24ce:	45 c0       	rjmp	.+138    	; 0x255a <KEYPAD_4x4_adjustKeyNumber+0xe8>
    24d0:	8b 81       	ldd	r24, Y+3	; 0x03
    24d2:	9c 81       	ldd	r25, Y+4	; 0x04
    24d4:	81 30       	cpi	r24, 0x01	; 1
    24d6:	91 05       	cpc	r25, r1
    24d8:	09 f4       	brne	.+2      	; 0x24dc <KEYPAD_4x4_adjustKeyNumber+0x6a>
    24da:	39 c0       	rjmp	.+114    	; 0x254e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    24dc:	67 c0       	rjmp	.+206    	; 0x25ac <KEYPAD_4x4_adjustKeyNumber+0x13a>
    24de:	2b 81       	ldd	r18, Y+3	; 0x03
    24e0:	3c 81       	ldd	r19, Y+4	; 0x04
    24e2:	26 30       	cpi	r18, 0x06	; 6
    24e4:	31 05       	cpc	r19, r1
    24e6:	09 f4       	brne	.+2      	; 0x24ea <KEYPAD_4x4_adjustKeyNumber+0x78>
    24e8:	41 c0       	rjmp	.+130    	; 0x256c <KEYPAD_4x4_adjustKeyNumber+0xfa>
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	87 30       	cpi	r24, 0x07	; 7
    24f0:	91 05       	cpc	r25, r1
    24f2:	0c f0       	brlt	.+2      	; 0x24f6 <KEYPAD_4x4_adjustKeyNumber+0x84>
    24f4:	3e c0       	rjmp	.+124    	; 0x2572 <KEYPAD_4x4_adjustKeyNumber+0x100>
    24f6:	37 c0       	rjmp	.+110    	; 0x2566 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    24f8:	2b 81       	ldd	r18, Y+3	; 0x03
    24fa:	3c 81       	ldd	r19, Y+4	; 0x04
    24fc:	2c 30       	cpi	r18, 0x0C	; 12
    24fe:	31 05       	cpc	r19, r1
    2500:	09 f4       	brne	.+2      	; 0x2504 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2502:	46 c0       	rjmp	.+140    	; 0x2590 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	8d 30       	cpi	r24, 0x0D	; 13
    250a:	91 05       	cpc	r25, r1
    250c:	5c f4       	brge	.+22     	; 0x2524 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    250e:	2b 81       	ldd	r18, Y+3	; 0x03
    2510:	3c 81       	ldd	r19, Y+4	; 0x04
    2512:	2a 30       	cpi	r18, 0x0A	; 10
    2514:	31 05       	cpc	r19, r1
    2516:	b1 f1       	breq	.+108    	; 0x2584 <KEYPAD_4x4_adjustKeyNumber+0x112>
    2518:	8b 81       	ldd	r24, Y+3	; 0x03
    251a:	9c 81       	ldd	r25, Y+4	; 0x04
    251c:	8b 30       	cpi	r24, 0x0B	; 11
    251e:	91 05       	cpc	r25, r1
    2520:	a4 f5       	brge	.+104    	; 0x258a <KEYPAD_4x4_adjustKeyNumber+0x118>
    2522:	2d c0       	rjmp	.+90     	; 0x257e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2524:	2b 81       	ldd	r18, Y+3	; 0x03
    2526:	3c 81       	ldd	r19, Y+4	; 0x04
    2528:	2e 30       	cpi	r18, 0x0E	; 14
    252a:	31 05       	cpc	r19, r1
    252c:	b9 f1       	breq	.+110    	; 0x259c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	8e 30       	cpi	r24, 0x0E	; 14
    2534:	91 05       	cpc	r25, r1
    2536:	7c f1       	brlt	.+94     	; 0x2596 <KEYPAD_4x4_adjustKeyNumber+0x124>
    2538:	2b 81       	ldd	r18, Y+3	; 0x03
    253a:	3c 81       	ldd	r19, Y+4	; 0x04
    253c:	2f 30       	cpi	r18, 0x0F	; 15
    253e:	31 05       	cpc	r19, r1
    2540:	79 f1       	breq	.+94     	; 0x25a0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	80 31       	cpi	r24, 0x10	; 16
    2548:	91 05       	cpc	r25, r1
    254a:	69 f1       	breq	.+90     	; 0x25a6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    254c:	2f c0       	rjmp	.+94     	; 0x25ac <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    254e:	87 e0       	ldi	r24, 0x07	; 7
    2550:	89 83       	std	Y+1, r24	; 0x01
    2552:	2e c0       	rjmp	.+92     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    2554:	88 e0       	ldi	r24, 0x08	; 8
    2556:	89 83       	std	Y+1, r24	; 0x01
    2558:	2b c0       	rjmp	.+86     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    255a:	89 e0       	ldi	r24, 0x09	; 9
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	28 c0       	rjmp	.+80     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    2560:	85 e2       	ldi	r24, 0x25	; 37
    2562:	89 83       	std	Y+1, r24	; 0x01
    2564:	25 c0       	rjmp	.+74     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    2566:	84 e0       	ldi	r24, 0x04	; 4
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	22 c0       	rjmp	.+68     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    256c:	85 e0       	ldi	r24, 0x05	; 5
    256e:	89 83       	std	Y+1, r24	; 0x01
    2570:	1f c0       	rjmp	.+62     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2572:	86 e0       	ldi	r24, 0x06	; 6
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	1c c0       	rjmp	.+56     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    2578:	8a e2       	ldi	r24, 0x2A	; 42
    257a:	89 83       	std	Y+1, r24	; 0x01
    257c:	19 c0       	rjmp	.+50     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    257e:	81 e0       	ldi	r24, 0x01	; 1
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	16 c0       	rjmp	.+44     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2584:	82 e0       	ldi	r24, 0x02	; 2
    2586:	89 83       	std	Y+1, r24	; 0x01
    2588:	13 c0       	rjmp	.+38     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    258a:	83 e0       	ldi	r24, 0x03	; 3
    258c:	89 83       	std	Y+1, r24	; 0x01
    258e:	10 c0       	rjmp	.+32     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2590:	8d e2       	ldi	r24, 0x2D	; 45
    2592:	89 83       	std	Y+1, r24	; 0x01
    2594:	0d c0       	rjmp	.+26     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    2596:	8d e0       	ldi	r24, 0x0D	; 13
    2598:	89 83       	std	Y+1, r24	; 0x01
    259a:	0a c0       	rjmp	.+20     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    259c:	19 82       	std	Y+1, r1	; 0x01
    259e:	08 c0       	rjmp	.+16     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    25a0:	8d e3       	ldi	r24, 0x3D	; 61
    25a2:	89 83       	std	Y+1, r24	; 0x01
    25a4:	05 c0       	rjmp	.+10     	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    25a6:	8b e2       	ldi	r24, 0x2B	; 43
    25a8:	89 83       	std	Y+1, r24	; 0x01
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    25ac:	8a 81       	ldd	r24, Y+2	; 0x02
    25ae:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
} 
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <LCD_sendCommand>:

/*
 * Description :
 * Function responsible for sending a command for the LCD
 */
void LCD_sendCommand(uint8 a_Command){
    25c0:	0f 93       	push	r16
    25c2:	1f 93       	push	r17
    25c4:	df 93       	push	r29
    25c6:	cf 93       	push	r28
    25c8:	cd b7       	in	r28, 0x3d	; 61
    25ca:	de b7       	in	r29, 0x3e	; 62
    25cc:	c3 56       	subi	r28, 0x63	; 99
    25ce:	d0 40       	sbci	r29, 0x00	; 0
    25d0:	0f b6       	in	r0, 0x3f	; 63
    25d2:	f8 94       	cli
    25d4:	de bf       	out	0x3e, r29	; 62
    25d6:	0f be       	out	0x3f, r0	; 63
    25d8:	cd bf       	out	0x3d, r28	; 61
    25da:	fe 01       	movw	r30, r28
    25dc:	ed 59       	subi	r30, 0x9D	; 157
    25de:	ff 4f       	sbci	r31, 0xFF	; 255
    25e0:	80 83       	st	Z, r24
	/*
	 * Write 0 to RS
	 * */
	GPIO_writePin(LCD_PORT_CONTROL,LCD_RS,LOGIC_LOW);
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    25ec:	fe 01       	movw	r30, r28
    25ee:	e1 5a       	subi	r30, 0xA1	; 161
    25f0:	ff 4f       	sbci	r31, 0xFF	; 255
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a0 e8       	ldi	r26, 0x80	; 128
    25f8:	bf e3       	ldi	r27, 0x3F	; 63
    25fa:	80 83       	st	Z, r24
    25fc:	91 83       	std	Z+1, r25	; 0x01
    25fe:	a2 83       	std	Z+2, r26	; 0x02
    2600:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2602:	8e 01       	movw	r16, r28
    2604:	05 5a       	subi	r16, 0xA5	; 165
    2606:	1f 4f       	sbci	r17, 0xFF	; 255
    2608:	fe 01       	movw	r30, r28
    260a:	e1 5a       	subi	r30, 0xA1	; 161
    260c:	ff 4f       	sbci	r31, 0xFF	; 255
    260e:	60 81       	ld	r22, Z
    2610:	71 81       	ldd	r23, Z+1	; 0x01
    2612:	82 81       	ldd	r24, Z+2	; 0x02
    2614:	93 81       	ldd	r25, Z+3	; 0x03
    2616:	20 e0       	ldi	r18, 0x00	; 0
    2618:	30 e0       	ldi	r19, 0x00	; 0
    261a:	4a ef       	ldi	r20, 0xFA	; 250
    261c:	54 e4       	ldi	r21, 0x44	; 68
    261e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2622:	dc 01       	movw	r26, r24
    2624:	cb 01       	movw	r24, r22
    2626:	f8 01       	movw	r30, r16
    2628:	80 83       	st	Z, r24
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	a2 83       	std	Z+2, r26	; 0x02
    262e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2630:	fe 01       	movw	r30, r28
    2632:	e5 5a       	subi	r30, 0xA5	; 165
    2634:	ff 4f       	sbci	r31, 0xFF	; 255
    2636:	60 81       	ld	r22, Z
    2638:	71 81       	ldd	r23, Z+1	; 0x01
    263a:	82 81       	ldd	r24, Z+2	; 0x02
    263c:	93 81       	ldd	r25, Z+3	; 0x03
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	44 f4       	brge	.+16     	; 0x265e <LCD_sendCommand+0x9e>
		__ticks = 1;
    264e:	fe 01       	movw	r30, r28
    2650:	e7 5a       	subi	r30, 0xA7	; 167
    2652:	ff 4f       	sbci	r31, 0xFF	; 255
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	64 c0       	rjmp	.+200    	; 0x2726 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    265e:	fe 01       	movw	r30, r28
    2660:	e5 5a       	subi	r30, 0xA5	; 165
    2662:	ff 4f       	sbci	r31, 0xFF	; 255
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	93 81       	ldd	r25, Z+3	; 0x03
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	3f ef       	ldi	r19, 0xFF	; 255
    2670:	4f e7       	ldi	r20, 0x7F	; 127
    2672:	57 e4       	ldi	r21, 0x47	; 71
    2674:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2678:	18 16       	cp	r1, r24
    267a:	0c f0       	brlt	.+2      	; 0x267e <LCD_sendCommand+0xbe>
    267c:	43 c0       	rjmp	.+134    	; 0x2704 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    267e:	fe 01       	movw	r30, r28
    2680:	e1 5a       	subi	r30, 0xA1	; 161
    2682:	ff 4f       	sbci	r31, 0xFF	; 255
    2684:	60 81       	ld	r22, Z
    2686:	71 81       	ldd	r23, Z+1	; 0x01
    2688:	82 81       	ldd	r24, Z+2	; 0x02
    268a:	93 81       	ldd	r25, Z+3	; 0x03
    268c:	20 e0       	ldi	r18, 0x00	; 0
    268e:	30 e0       	ldi	r19, 0x00	; 0
    2690:	40 e2       	ldi	r20, 0x20	; 32
    2692:	51 e4       	ldi	r21, 0x41	; 65
    2694:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2698:	dc 01       	movw	r26, r24
    269a:	cb 01       	movw	r24, r22
    269c:	8e 01       	movw	r16, r28
    269e:	07 5a       	subi	r16, 0xA7	; 167
    26a0:	1f 4f       	sbci	r17, 0xFF	; 255
    26a2:	bc 01       	movw	r22, r24
    26a4:	cd 01       	movw	r24, r26
    26a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26aa:	dc 01       	movw	r26, r24
    26ac:	cb 01       	movw	r24, r22
    26ae:	f8 01       	movw	r30, r16
    26b0:	91 83       	std	Z+1, r25	; 0x01
    26b2:	80 83       	st	Z, r24
    26b4:	1f c0       	rjmp	.+62     	; 0x26f4 <LCD_sendCommand+0x134>
    26b6:	fe 01       	movw	r30, r28
    26b8:	e9 5a       	subi	r30, 0xA9	; 169
    26ba:	ff 4f       	sbci	r31, 0xFF	; 255
    26bc:	88 ec       	ldi	r24, 0xC8	; 200
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	fe 01       	movw	r30, r28
    26c6:	e9 5a       	subi	r30, 0xA9	; 169
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	91 81       	ldd	r25, Z+1	; 0x01
    26ce:	01 97       	sbiw	r24, 0x01	; 1
    26d0:	f1 f7       	brne	.-4      	; 0x26ce <LCD_sendCommand+0x10e>
    26d2:	fe 01       	movw	r30, r28
    26d4:	e9 5a       	subi	r30, 0xA9	; 169
    26d6:	ff 4f       	sbci	r31, 0xFF	; 255
    26d8:	91 83       	std	Z+1, r25	; 0x01
    26da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	de 01       	movw	r26, r28
    26de:	a7 5a       	subi	r26, 0xA7	; 167
    26e0:	bf 4f       	sbci	r27, 0xFF	; 255
    26e2:	fe 01       	movw	r30, r28
    26e4:	e7 5a       	subi	r30, 0xA7	; 167
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	80 81       	ld	r24, Z
    26ea:	91 81       	ldd	r25, Z+1	; 0x01
    26ec:	01 97       	sbiw	r24, 0x01	; 1
    26ee:	11 96       	adiw	r26, 0x01	; 1
    26f0:	9c 93       	st	X, r25
    26f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	fe 01       	movw	r30, r28
    26f6:	e7 5a       	subi	r30, 0xA7	; 167
    26f8:	ff 4f       	sbci	r31, 0xFF	; 255
    26fa:	80 81       	ld	r24, Z
    26fc:	91 81       	ldd	r25, Z+1	; 0x01
    26fe:	00 97       	sbiw	r24, 0x00	; 0
    2700:	d1 f6       	brne	.-76     	; 0x26b6 <LCD_sendCommand+0xf6>
    2702:	27 c0       	rjmp	.+78     	; 0x2752 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2704:	8e 01       	movw	r16, r28
    2706:	07 5a       	subi	r16, 0xA7	; 167
    2708:	1f 4f       	sbci	r17, 0xFF	; 255
    270a:	fe 01       	movw	r30, r28
    270c:	e5 5a       	subi	r30, 0xA5	; 165
    270e:	ff 4f       	sbci	r31, 0xFF	; 255
    2710:	60 81       	ld	r22, Z
    2712:	71 81       	ldd	r23, Z+1	; 0x01
    2714:	82 81       	ldd	r24, Z+2	; 0x02
    2716:	93 81       	ldd	r25, Z+3	; 0x03
    2718:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    271c:	dc 01       	movw	r26, r24
    271e:	cb 01       	movw	r24, r22
    2720:	f8 01       	movw	r30, r16
    2722:	91 83       	std	Z+1, r25	; 0x01
    2724:	80 83       	st	Z, r24
    2726:	de 01       	movw	r26, r28
    2728:	ab 5a       	subi	r26, 0xAB	; 171
    272a:	bf 4f       	sbci	r27, 0xFF	; 255
    272c:	fe 01       	movw	r30, r28
    272e:	e7 5a       	subi	r30, 0xA7	; 167
    2730:	ff 4f       	sbci	r31, 0xFF	; 255
    2732:	80 81       	ld	r24, Z
    2734:	91 81       	ldd	r25, Z+1	; 0x01
    2736:	8d 93       	st	X+, r24
    2738:	9c 93       	st	X, r25
    273a:	fe 01       	movw	r30, r28
    273c:	eb 5a       	subi	r30, 0xAB	; 171
    273e:	ff 4f       	sbci	r31, 0xFF	; 255
    2740:	80 81       	ld	r24, Z
    2742:	91 81       	ldd	r25, Z+1	; 0x01
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	f1 f7       	brne	.-4      	; 0x2744 <LCD_sendCommand+0x184>
    2748:	fe 01       	movw	r30, r28
    274a:	eb 5a       	subi	r30, 0xAB	; 171
    274c:	ff 4f       	sbci	r31, 0xFF	; 255
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
	 * */
	_delay_ms(1);
	/*
	 * Enable
	 * */
	GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_HIGH);
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	41 e0       	ldi	r20, 0x01	; 1
    2758:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    275c:	fe 01       	movw	r30, r28
    275e:	ef 5a       	subi	r30, 0xAF	; 175
    2760:	ff 4f       	sbci	r31, 0xFF	; 255
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e8       	ldi	r26, 0x80	; 128
    2768:	bf e3       	ldi	r27, 0x3F	; 63
    276a:	80 83       	st	Z, r24
    276c:	91 83       	std	Z+1, r25	; 0x01
    276e:	a2 83       	std	Z+2, r26	; 0x02
    2770:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	8e 01       	movw	r16, r28
    2774:	03 5b       	subi	r16, 0xB3	; 179
    2776:	1f 4f       	sbci	r17, 0xFF	; 255
    2778:	fe 01       	movw	r30, r28
    277a:	ef 5a       	subi	r30, 0xAF	; 175
    277c:	ff 4f       	sbci	r31, 0xFF	; 255
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a ef       	ldi	r20, 0xFA	; 250
    278c:	54 e4       	ldi	r21, 0x44	; 68
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	f8 01       	movw	r30, r16
    2798:	80 83       	st	Z, r24
    279a:	91 83       	std	Z+1, r25	; 0x01
    279c:	a2 83       	std	Z+2, r26	; 0x02
    279e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    27a0:	fe 01       	movw	r30, r28
    27a2:	e3 5b       	subi	r30, 0xB3	; 179
    27a4:	ff 4f       	sbci	r31, 0xFF	; 255
    27a6:	60 81       	ld	r22, Z
    27a8:	71 81       	ldd	r23, Z+1	; 0x01
    27aa:	82 81       	ldd	r24, Z+2	; 0x02
    27ac:	93 81       	ldd	r25, Z+3	; 0x03
    27ae:	20 e0       	ldi	r18, 0x00	; 0
    27b0:	30 e0       	ldi	r19, 0x00	; 0
    27b2:	40 e8       	ldi	r20, 0x80	; 128
    27b4:	5f e3       	ldi	r21, 0x3F	; 63
    27b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27ba:	88 23       	and	r24, r24
    27bc:	44 f4       	brge	.+16     	; 0x27ce <LCD_sendCommand+0x20e>
		__ticks = 1;
    27be:	fe 01       	movw	r30, r28
    27c0:	e5 5b       	subi	r30, 0xB5	; 181
    27c2:	ff 4f       	sbci	r31, 0xFF	; 255
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	91 83       	std	Z+1, r25	; 0x01
    27ca:	80 83       	st	Z, r24
    27cc:	64 c0       	rjmp	.+200    	; 0x2896 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    27ce:	fe 01       	movw	r30, r28
    27d0:	e3 5b       	subi	r30, 0xB3	; 179
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	60 81       	ld	r22, Z
    27d6:	71 81       	ldd	r23, Z+1	; 0x01
    27d8:	82 81       	ldd	r24, Z+2	; 0x02
    27da:	93 81       	ldd	r25, Z+3	; 0x03
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	3f ef       	ldi	r19, 0xFF	; 255
    27e0:	4f e7       	ldi	r20, 0x7F	; 127
    27e2:	57 e4       	ldi	r21, 0x47	; 71
    27e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e8:	18 16       	cp	r1, r24
    27ea:	0c f0       	brlt	.+2      	; 0x27ee <LCD_sendCommand+0x22e>
    27ec:	43 c0       	rjmp	.+134    	; 0x2874 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ee:	fe 01       	movw	r30, r28
    27f0:	ef 5a       	subi	r30, 0xAF	; 175
    27f2:	ff 4f       	sbci	r31, 0xFF	; 255
    27f4:	60 81       	ld	r22, Z
    27f6:	71 81       	ldd	r23, Z+1	; 0x01
    27f8:	82 81       	ldd	r24, Z+2	; 0x02
    27fa:	93 81       	ldd	r25, Z+3	; 0x03
    27fc:	20 e0       	ldi	r18, 0x00	; 0
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e2       	ldi	r20, 0x20	; 32
    2802:	51 e4       	ldi	r21, 0x41	; 65
    2804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2808:	dc 01       	movw	r26, r24
    280a:	cb 01       	movw	r24, r22
    280c:	8e 01       	movw	r16, r28
    280e:	05 5b       	subi	r16, 0xB5	; 181
    2810:	1f 4f       	sbci	r17, 0xFF	; 255
    2812:	bc 01       	movw	r22, r24
    2814:	cd 01       	movw	r24, r26
    2816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    281a:	dc 01       	movw	r26, r24
    281c:	cb 01       	movw	r24, r22
    281e:	f8 01       	movw	r30, r16
    2820:	91 83       	std	Z+1, r25	; 0x01
    2822:	80 83       	st	Z, r24
    2824:	1f c0       	rjmp	.+62     	; 0x2864 <LCD_sendCommand+0x2a4>
    2826:	fe 01       	movw	r30, r28
    2828:	e7 5b       	subi	r30, 0xB7	; 183
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	88 ec       	ldi	r24, 0xC8	; 200
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	91 83       	std	Z+1, r25	; 0x01
    2832:	80 83       	st	Z, r24
    2834:	fe 01       	movw	r30, r28
    2836:	e7 5b       	subi	r30, 0xB7	; 183
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 81       	ld	r24, Z
    283c:	91 81       	ldd	r25, Z+1	; 0x01
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <LCD_sendCommand+0x27e>
    2842:	fe 01       	movw	r30, r28
    2844:	e7 5b       	subi	r30, 0xB7	; 183
    2846:	ff 4f       	sbci	r31, 0xFF	; 255
    2848:	91 83       	std	Z+1, r25	; 0x01
    284a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	de 01       	movw	r26, r28
    284e:	a5 5b       	subi	r26, 0xB5	; 181
    2850:	bf 4f       	sbci	r27, 0xFF	; 255
    2852:	fe 01       	movw	r30, r28
    2854:	e5 5b       	subi	r30, 0xB5	; 181
    2856:	ff 4f       	sbci	r31, 0xFF	; 255
    2858:	80 81       	ld	r24, Z
    285a:	91 81       	ldd	r25, Z+1	; 0x01
    285c:	01 97       	sbiw	r24, 0x01	; 1
    285e:	11 96       	adiw	r26, 0x01	; 1
    2860:	9c 93       	st	X, r25
    2862:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2864:	fe 01       	movw	r30, r28
    2866:	e5 5b       	subi	r30, 0xB5	; 181
    2868:	ff 4f       	sbci	r31, 0xFF	; 255
    286a:	80 81       	ld	r24, Z
    286c:	91 81       	ldd	r25, Z+1	; 0x01
    286e:	00 97       	sbiw	r24, 0x00	; 0
    2870:	d1 f6       	brne	.-76     	; 0x2826 <LCD_sendCommand+0x266>
    2872:	27 c0       	rjmp	.+78     	; 0x28c2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2874:	8e 01       	movw	r16, r28
    2876:	05 5b       	subi	r16, 0xB5	; 181
    2878:	1f 4f       	sbci	r17, 0xFF	; 255
    287a:	fe 01       	movw	r30, r28
    287c:	e3 5b       	subi	r30, 0xB3	; 179
    287e:	ff 4f       	sbci	r31, 0xFF	; 255
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288c:	dc 01       	movw	r26, r24
    288e:	cb 01       	movw	r24, r22
    2890:	f8 01       	movw	r30, r16
    2892:	91 83       	std	Z+1, r25	; 0x01
    2894:	80 83       	st	Z, r24
    2896:	de 01       	movw	r26, r28
    2898:	a9 5b       	subi	r26, 0xB9	; 185
    289a:	bf 4f       	sbci	r27, 0xFF	; 255
    289c:	fe 01       	movw	r30, r28
    289e:	e5 5b       	subi	r30, 0xB5	; 181
    28a0:	ff 4f       	sbci	r31, 0xFF	; 255
    28a2:	80 81       	ld	r24, Z
    28a4:	91 81       	ldd	r25, Z+1	; 0x01
    28a6:	8d 93       	st	X+, r24
    28a8:	9c 93       	st	X, r25
    28aa:	fe 01       	movw	r30, r28
    28ac:	e9 5b       	subi	r30, 0xB9	; 185
    28ae:	ff 4f       	sbci	r31, 0xFF	; 255
    28b0:	80 81       	ld	r24, Z
    28b2:	91 81       	ldd	r25, Z+1	; 0x01
    28b4:	01 97       	sbiw	r24, 0x01	; 1
    28b6:	f1 f7       	brne	.-4      	; 0x28b4 <LCD_sendCommand+0x2f4>
    28b8:	fe 01       	movw	r30, r28
    28ba:	e9 5b       	subi	r30, 0xB9	; 185
    28bc:	ff 4f       	sbci	r31, 0xFF	; 255
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	80 83       	st	Z, r24
	/*
	 * Delay 1 us as th=13ns
	 */
	_delay_ms(1);
#elif(NUMBER_OF_BITS==4)
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_1,GET_BIT(a_Command,4));
    28c2:	fe 01       	movw	r30, r28
    28c4:	ed 59       	subi	r30, 0x9D	; 157
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	88 2f       	mov	r24, r24
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	80 71       	andi	r24, 0x10	; 16
    28d0:	90 70       	andi	r25, 0x00	; 0
    28d2:	95 95       	asr	r25
    28d4:	87 95       	ror	r24
    28d6:	95 95       	asr	r25
    28d8:	87 95       	ror	r24
    28da:	95 95       	asr	r25
    28dc:	87 95       	ror	r24
    28de:	95 95       	asr	r25
    28e0:	87 95       	ror	r24
    28e2:	98 2f       	mov	r25, r24
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	64 e0       	ldi	r22, 0x04	; 4
    28e8:	49 2f       	mov	r20, r25
    28ea:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_2,GET_BIT(a_Command,5));
    28ee:	fe 01       	movw	r30, r28
    28f0:	ed 59       	subi	r30, 0x9D	; 157
    28f2:	ff 4f       	sbci	r31, 0xFF	; 255
    28f4:	80 81       	ld	r24, Z
    28f6:	88 2f       	mov	r24, r24
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	80 72       	andi	r24, 0x20	; 32
    28fc:	90 70       	andi	r25, 0x00	; 0
    28fe:	95 95       	asr	r25
    2900:	87 95       	ror	r24
    2902:	95 95       	asr	r25
    2904:	87 95       	ror	r24
    2906:	95 95       	asr	r25
    2908:	87 95       	ror	r24
    290a:	95 95       	asr	r25
    290c:	87 95       	ror	r24
    290e:	95 95       	asr	r25
    2910:	87 95       	ror	r24
    2912:	98 2f       	mov	r25, r24
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	65 e0       	ldi	r22, 0x05	; 5
    2918:	49 2f       	mov	r20, r25
    291a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_3,GET_BIT(a_Command,6));
    291e:	fe 01       	movw	r30, r28
    2920:	ed 59       	subi	r30, 0x9D	; 157
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	80 81       	ld	r24, Z
    2926:	88 2f       	mov	r24, r24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	80 74       	andi	r24, 0x40	; 64
    292c:	90 70       	andi	r25, 0x00	; 0
    292e:	08 2e       	mov	r0, r24
    2930:	89 2f       	mov	r24, r25
    2932:	00 0c       	add	r0, r0
    2934:	88 1f       	adc	r24, r24
    2936:	99 0b       	sbc	r25, r25
    2938:	00 0c       	add	r0, r0
    293a:	88 1f       	adc	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	98 2f       	mov	r25, r24
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	66 e0       	ldi	r22, 0x06	; 6
    2944:	49 2f       	mov	r20, r25
    2946:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_4,GET_BIT(a_Command,7));
    294a:	fe 01       	movw	r30, r28
    294c:	ed 59       	subi	r30, 0x9D	; 157
    294e:	ff 4f       	sbci	r31, 0xFF	; 255
    2950:	80 81       	ld	r24, Z
    2952:	98 2f       	mov	r25, r24
    2954:	99 1f       	adc	r25, r25
    2956:	99 27       	eor	r25, r25
    2958:	99 1f       	adc	r25, r25
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	67 e0       	ldi	r22, 0x07	; 7
    295e:	49 2f       	mov	r20, r25
    2960:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    2964:	fe 01       	movw	r30, r28
    2966:	ed 5b       	subi	r30, 0xBD	; 189
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	a0 e8       	ldi	r26, 0x80	; 128
    2970:	bf e3       	ldi	r27, 0x3F	; 63
    2972:	80 83       	st	Z, r24
    2974:	91 83       	std	Z+1, r25	; 0x01
    2976:	a2 83       	std	Z+2, r26	; 0x02
    2978:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    297a:	8e 01       	movw	r16, r28
    297c:	01 5c       	subi	r16, 0xC1	; 193
    297e:	1f 4f       	sbci	r17, 0xFF	; 255
    2980:	fe 01       	movw	r30, r28
    2982:	ed 5b       	subi	r30, 0xBD	; 189
    2984:	ff 4f       	sbci	r31, 0xFF	; 255
    2986:	60 81       	ld	r22, Z
    2988:	71 81       	ldd	r23, Z+1	; 0x01
    298a:	82 81       	ldd	r24, Z+2	; 0x02
    298c:	93 81       	ldd	r25, Z+3	; 0x03
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	4a ef       	ldi	r20, 0xFA	; 250
    2994:	54 e4       	ldi	r21, 0x44	; 68
    2996:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	f8 01       	movw	r30, r16
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    29a8:	fe 01       	movw	r30, r28
    29aa:	ff 96       	adiw	r30, 0x3f	; 63
    29ac:	60 81       	ld	r22, Z
    29ae:	71 81       	ldd	r23, Z+1	; 0x01
    29b0:	82 81       	ldd	r24, Z+2	; 0x02
    29b2:	93 81       	ldd	r25, Z+3	; 0x03
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e8       	ldi	r20, 0x80	; 128
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29c0:	88 23       	and	r24, r24
    29c2:	2c f4       	brge	.+10     	; 0x29ce <LCD_sendCommand+0x40e>
		__ticks = 1;
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	9e af       	std	Y+62, r25	; 0x3e
    29ca:	8d af       	std	Y+61, r24	; 0x3d
    29cc:	46 c0       	rjmp	.+140    	; 0x2a5a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    29ce:	fe 01       	movw	r30, r28
    29d0:	ff 96       	adiw	r30, 0x3f	; 63
    29d2:	60 81       	ld	r22, Z
    29d4:	71 81       	ldd	r23, Z+1	; 0x01
    29d6:	82 81       	ldd	r24, Z+2	; 0x02
    29d8:	93 81       	ldd	r25, Z+3	; 0x03
    29da:	20 e0       	ldi	r18, 0x00	; 0
    29dc:	3f ef       	ldi	r19, 0xFF	; 255
    29de:	4f e7       	ldi	r20, 0x7F	; 127
    29e0:	57 e4       	ldi	r21, 0x47	; 71
    29e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29e6:	18 16       	cp	r1, r24
    29e8:	64 f5       	brge	.+88     	; 0x2a42 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ea:	fe 01       	movw	r30, r28
    29ec:	ed 5b       	subi	r30, 0xBD	; 189
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	20 e0       	ldi	r18, 0x00	; 0
    29fa:	30 e0       	ldi	r19, 0x00	; 0
    29fc:	40 e2       	ldi	r20, 0x20	; 32
    29fe:	51 e4       	ldi	r21, 0x41	; 65
    2a00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a04:	dc 01       	movw	r26, r24
    2a06:	cb 01       	movw	r24, r22
    2a08:	bc 01       	movw	r22, r24
    2a0a:	cd 01       	movw	r24, r26
    2a0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a10:	dc 01       	movw	r26, r24
    2a12:	cb 01       	movw	r24, r22
    2a14:	9e af       	std	Y+62, r25	; 0x3e
    2a16:	8d af       	std	Y+61, r24	; 0x3d
    2a18:	0f c0       	rjmp	.+30     	; 0x2a38 <LCD_sendCommand+0x478>
    2a1a:	88 ec       	ldi	r24, 0xC8	; 200
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	9c af       	std	Y+60, r25	; 0x3c
    2a20:	8b af       	std	Y+59, r24	; 0x3b
    2a22:	8b ad       	ldd	r24, Y+59	; 0x3b
    2a24:	9c ad       	ldd	r25, Y+60	; 0x3c
    2a26:	01 97       	sbiw	r24, 0x01	; 1
    2a28:	f1 f7       	brne	.-4      	; 0x2a26 <LCD_sendCommand+0x466>
    2a2a:	9c af       	std	Y+60, r25	; 0x3c
    2a2c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a2e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a30:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a32:	01 97       	sbiw	r24, 0x01	; 1
    2a34:	9e af       	std	Y+62, r25	; 0x3e
    2a36:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a38:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a3a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a3c:	00 97       	sbiw	r24, 0x00	; 0
    2a3e:	69 f7       	brne	.-38     	; 0x2a1a <LCD_sendCommand+0x45a>
    2a40:	16 c0       	rjmp	.+44     	; 0x2a6e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a42:	fe 01       	movw	r30, r28
    2a44:	ff 96       	adiw	r30, 0x3f	; 63
    2a46:	60 81       	ld	r22, Z
    2a48:	71 81       	ldd	r23, Z+1	; 0x01
    2a4a:	82 81       	ldd	r24, Z+2	; 0x02
    2a4c:	93 81       	ldd	r25, Z+3	; 0x03
    2a4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	9e af       	std	Y+62, r25	; 0x3e
    2a58:	8d af       	std	Y+61, r24	; 0x3d
    2a5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2a5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2a5e:	9a af       	std	Y+58, r25	; 0x3a
    2a60:	89 af       	std	Y+57, r24	; 0x39
    2a62:	89 ad       	ldd	r24, Y+57	; 0x39
    2a64:	9a ad       	ldd	r25, Y+58	; 0x3a
    2a66:	01 97       	sbiw	r24, 0x01	; 1
    2a68:	f1 f7       	brne	.-4      	; 0x2a66 <LCD_sendCommand+0x4a6>
    2a6a:	9a af       	std	Y+58, r25	; 0x3a
    2a6c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1);

	GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_LOW);
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	61 e0       	ldi	r22, 0x01	; 1
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 e8       	ldi	r26, 0x80	; 128
    2a7e:	bf e3       	ldi	r27, 0x3F	; 63
    2a80:	8d ab       	std	Y+53, r24	; 0x35
    2a82:	9e ab       	std	Y+54, r25	; 0x36
    2a84:	af ab       	std	Y+55, r26	; 0x37
    2a86:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	6d a9       	ldd	r22, Y+53	; 0x35
    2a8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2a8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2a8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2a90:	20 e0       	ldi	r18, 0x00	; 0
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	4a ef       	ldi	r20, 0xFA	; 250
    2a96:	54 e4       	ldi	r21, 0x44	; 68
    2a98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	cb 01       	movw	r24, r22
    2aa0:	89 ab       	std	Y+49, r24	; 0x31
    2aa2:	9a ab       	std	Y+50, r25	; 0x32
    2aa4:	ab ab       	std	Y+51, r26	; 0x33
    2aa6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2aa8:	69 a9       	ldd	r22, Y+49	; 0x31
    2aaa:	7a a9       	ldd	r23, Y+50	; 0x32
    2aac:	8b a9       	ldd	r24, Y+51	; 0x33
    2aae:	9c a9       	ldd	r25, Y+52	; 0x34
    2ab0:	20 e0       	ldi	r18, 0x00	; 0
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	40 e8       	ldi	r20, 0x80	; 128
    2ab6:	5f e3       	ldi	r21, 0x3F	; 63
    2ab8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abc:	88 23       	and	r24, r24
    2abe:	2c f4       	brge	.+10     	; 0x2aca <LCD_sendCommand+0x50a>
		__ticks = 1;
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	98 ab       	std	Y+48, r25	; 0x30
    2ac6:	8f a7       	std	Y+47, r24	; 0x2f
    2ac8:	3f c0       	rjmp	.+126    	; 0x2b48 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2aca:	69 a9       	ldd	r22, Y+49	; 0x31
    2acc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ace:	8b a9       	ldd	r24, Y+51	; 0x33
    2ad0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	3f ef       	ldi	r19, 0xFF	; 255
    2ad6:	4f e7       	ldi	r20, 0x7F	; 127
    2ad8:	57 e4       	ldi	r21, 0x47	; 71
    2ada:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ade:	18 16       	cp	r1, r24
    2ae0:	4c f5       	brge	.+82     	; 0x2b34 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae2:	6d a9       	ldd	r22, Y+53	; 0x35
    2ae4:	7e a9       	ldd	r23, Y+54	; 0x36
    2ae6:	8f a9       	ldd	r24, Y+55	; 0x37
    2ae8:	98 ad       	ldd	r25, Y+56	; 0x38
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	40 e2       	ldi	r20, 0x20	; 32
    2af0:	51 e4       	ldi	r21, 0x41	; 65
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	bc 01       	movw	r22, r24
    2afc:	cd 01       	movw	r24, r26
    2afe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	98 ab       	std	Y+48, r25	; 0x30
    2b08:	8f a7       	std	Y+47, r24	; 0x2f
    2b0a:	0f c0       	rjmp	.+30     	; 0x2b2a <LCD_sendCommand+0x56a>
    2b0c:	88 ec       	ldi	r24, 0xC8	; 200
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	9e a7       	std	Y+46, r25	; 0x2e
    2b12:	8d a7       	std	Y+45, r24	; 0x2d
    2b14:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b16:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <LCD_sendCommand+0x558>
    2b1c:	9e a7       	std	Y+46, r25	; 0x2e
    2b1e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b20:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b22:	98 a9       	ldd	r25, Y+48	; 0x30
    2b24:	01 97       	sbiw	r24, 0x01	; 1
    2b26:	98 ab       	std	Y+48, r25	; 0x30
    2b28:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	69 f7       	brne	.-38     	; 0x2b0c <LCD_sendCommand+0x54c>
    2b32:	14 c0       	rjmp	.+40     	; 0x2b5c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b34:	69 a9       	ldd	r22, Y+49	; 0x31
    2b36:	7a a9       	ldd	r23, Y+50	; 0x32
    2b38:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b40:	dc 01       	movw	r26, r24
    2b42:	cb 01       	movw	r24, r22
    2b44:	98 ab       	std	Y+48, r25	; 0x30
    2b46:	8f a7       	std	Y+47, r24	; 0x2f
    2b48:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b4a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b4c:	9c a7       	std	Y+44, r25	; 0x2c
    2b4e:	8b a7       	std	Y+43, r24	; 0x2b
    2b50:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b52:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCD_sendCommand+0x594>
    2b58:	9c a7       	std	Y+44, r25	; 0x2c
    2b5a:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);
	GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_HIGH);
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	61 e0       	ldi	r22, 0x01	; 1
    2b60:	41 e0       	ldi	r20, 0x01	; 1
    2b62:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a0 e8       	ldi	r26, 0x80	; 128
    2b6c:	bf e3       	ldi	r27, 0x3F	; 63
    2b6e:	8f a3       	std	Y+39, r24	; 0x27
    2b70:	98 a7       	std	Y+40, r25	; 0x28
    2b72:	a9 a7       	std	Y+41, r26	; 0x29
    2b74:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	6f a1       	ldd	r22, Y+39	; 0x27
    2b78:	78 a5       	ldd	r23, Y+40	; 0x28
    2b7a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b7c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a ef       	ldi	r20, 0xFA	; 250
    2b84:	54 e4       	ldi	r21, 0x44	; 68
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	8b a3       	std	Y+35, r24	; 0x23
    2b90:	9c a3       	std	Y+36, r25	; 0x24
    2b92:	ad a3       	std	Y+37, r26	; 0x25
    2b94:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b96:	6b a1       	ldd	r22, Y+35	; 0x23
    2b98:	7c a1       	ldd	r23, Y+36	; 0x24
    2b9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	2c f4       	brge	.+10     	; 0x2bb8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9a a3       	std	Y+34, r25	; 0x22
    2bb4:	89 a3       	std	Y+33, r24	; 0x21
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2bb8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bba:	7c a1       	ldd	r23, Y+36	; 0x24
    2bbc:	8d a1       	ldd	r24, Y+37	; 0x25
    2bbe:	9e a1       	ldd	r25, Y+38	; 0x26
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	4c f5       	brge	.+82     	; 0x2c22 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	6f a1       	ldd	r22, Y+39	; 0x27
    2bd2:	78 a5       	ldd	r23, Y+40	; 0x28
    2bd4:	89 a5       	ldd	r24, Y+41	; 0x29
    2bd6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9a a3       	std	Y+34, r25	; 0x22
    2bf6:	89 a3       	std	Y+33, r24	; 0x21
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <LCD_sendCommand+0x658>
    2bfa:	88 ec       	ldi	r24, 0xC8	; 200
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	98 a3       	std	Y+32, r25	; 0x20
    2c00:	8f 8f       	std	Y+31, r24	; 0x1f
    2c02:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c04:	98 a1       	ldd	r25, Y+32	; 0x20
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <LCD_sendCommand+0x646>
    2c0a:	98 a3       	std	Y+32, r25	; 0x20
    2c0c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c10:	9a a1       	ldd	r25, Y+34	; 0x22
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	9a a3       	std	Y+34, r25	; 0x22
    2c16:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c18:	89 a1       	ldd	r24, Y+33	; 0x21
    2c1a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	69 f7       	brne	.-38     	; 0x2bfa <LCD_sendCommand+0x63a>
    2c20:	14 c0       	rjmp	.+40     	; 0x2c4a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	6b a1       	ldd	r22, Y+35	; 0x23
    2c24:	7c a1       	ldd	r23, Y+36	; 0x24
    2c26:	8d a1       	ldd	r24, Y+37	; 0x25
    2c28:	9e a1       	ldd	r25, Y+38	; 0x26
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9a a3       	std	Y+34, r25	; 0x22
    2c34:	89 a3       	std	Y+33, r24	; 0x21
    2c36:	89 a1       	ldd	r24, Y+33	; 0x21
    2c38:	9a a1       	ldd	r25, Y+34	; 0x22
    2c3a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c3c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c3e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c40:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_sendCommand+0x682>
    2c46:	9e 8f       	std	Y+30, r25	; 0x1e
    2c48:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_1,GET_BIT(a_Command,0));
    2c4a:	fe 01       	movw	r30, r28
    2c4c:	ed 59       	subi	r30, 0x9D	; 157
    2c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c50:	80 81       	ld	r24, Z
    2c52:	98 2f       	mov	r25, r24
    2c54:	91 70       	andi	r25, 0x01	; 1
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	64 e0       	ldi	r22, 0x04	; 4
    2c5a:	49 2f       	mov	r20, r25
    2c5c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_2,GET_BIT(a_Command,1));
    2c60:	fe 01       	movw	r30, r28
    2c62:	ed 59       	subi	r30, 0x9D	; 157
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	88 2f       	mov	r24, r24
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	82 70       	andi	r24, 0x02	; 2
    2c6e:	90 70       	andi	r25, 0x00	; 0
    2c70:	95 95       	asr	r25
    2c72:	87 95       	ror	r24
    2c74:	98 2f       	mov	r25, r24
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	65 e0       	ldi	r22, 0x05	; 5
    2c7a:	49 2f       	mov	r20, r25
    2c7c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_3,GET_BIT(a_Command,2));
    2c80:	fe 01       	movw	r30, r28
    2c82:	ed 59       	subi	r30, 0x9D	; 157
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	80 81       	ld	r24, Z
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	84 70       	andi	r24, 0x04	; 4
    2c8e:	90 70       	andi	r25, 0x00	; 0
    2c90:	95 95       	asr	r25
    2c92:	87 95       	ror	r24
    2c94:	95 95       	asr	r25
    2c96:	87 95       	ror	r24
    2c98:	98 2f       	mov	r25, r24
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	66 e0       	ldi	r22, 0x06	; 6
    2c9e:	49 2f       	mov	r20, r25
    2ca0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
	GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_4,GET_BIT(a_Command,3));
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	ed 59       	subi	r30, 0x9D	; 157
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 81       	ld	r24, Z
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	88 70       	andi	r24, 0x08	; 8
    2cb2:	90 70       	andi	r25, 0x00	; 0
    2cb4:	95 95       	asr	r25
    2cb6:	87 95       	ror	r24
    2cb8:	95 95       	asr	r25
    2cba:	87 95       	ror	r24
    2cbc:	95 95       	asr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	98 2f       	mov	r25, r24
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
    2cc4:	67 e0       	ldi	r22, 0x07	; 7
    2cc6:	49 2f       	mov	r20, r25
    2cc8:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    2ccc:	80 e0       	ldi	r24, 0x00	; 0
    2cce:	90 e0       	ldi	r25, 0x00	; 0
    2cd0:	a0 e8       	ldi	r26, 0x80	; 128
    2cd2:	bf e3       	ldi	r27, 0x3F	; 63
    2cd4:	89 8f       	std	Y+25, r24	; 0x19
    2cd6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cdc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ce0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ce2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ce4:	20 e0       	ldi	r18, 0x00	; 0
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	4a ef       	ldi	r20, 0xFA	; 250
    2cea:	54 e4       	ldi	r21, 0x44	; 68
    2cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	8d 8b       	std	Y+21, r24	; 0x15
    2cf6:	9e 8b       	std	Y+22, r25	; 0x16
    2cf8:	af 8b       	std	Y+23, r26	; 0x17
    2cfa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cfc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cfe:	7e 89       	ldd	r23, Y+22	; 0x16
    2d00:	8f 89       	ldd	r24, Y+23	; 0x17
    2d02:	98 8d       	ldd	r25, Y+24	; 0x18
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	40 e8       	ldi	r20, 0x80	; 128
    2d0a:	5f e3       	ldi	r21, 0x3F	; 63
    2d0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d10:	88 23       	and	r24, r24
    2d12:	2c f4       	brge	.+10     	; 0x2d1e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2d14:	81 e0       	ldi	r24, 0x01	; 1
    2d16:	90 e0       	ldi	r25, 0x00	; 0
    2d18:	9c 8b       	std	Y+20, r25	; 0x14
    2d1a:	8b 8b       	std	Y+19, r24	; 0x13
    2d1c:	3f c0       	rjmp	.+126    	; 0x2d9c <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2d1e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d20:	7e 89       	ldd	r23, Y+22	; 0x16
    2d22:	8f 89       	ldd	r24, Y+23	; 0x17
    2d24:	98 8d       	ldd	r25, Y+24	; 0x18
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	3f ef       	ldi	r19, 0xFF	; 255
    2d2a:	4f e7       	ldi	r20, 0x7F	; 127
    2d2c:	57 e4       	ldi	r21, 0x47	; 71
    2d2e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d32:	18 16       	cp	r1, r24
    2d34:	4c f5       	brge	.+82     	; 0x2d88 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d36:	69 8d       	ldd	r22, Y+25	; 0x19
    2d38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d3e:	20 e0       	ldi	r18, 0x00	; 0
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	40 e2       	ldi	r20, 0x20	; 32
    2d44:	51 e4       	ldi	r21, 0x41	; 65
    2d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4a:	dc 01       	movw	r26, r24
    2d4c:	cb 01       	movw	r24, r22
    2d4e:	bc 01       	movw	r22, r24
    2d50:	cd 01       	movw	r24, r26
    2d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d56:	dc 01       	movw	r26, r24
    2d58:	cb 01       	movw	r24, r22
    2d5a:	9c 8b       	std	Y+20, r25	; 0x14
    2d5c:	8b 8b       	std	Y+19, r24	; 0x13
    2d5e:	0f c0       	rjmp	.+30     	; 0x2d7e <LCD_sendCommand+0x7be>
    2d60:	88 ec       	ldi	r24, 0xC8	; 200
    2d62:	90 e0       	ldi	r25, 0x00	; 0
    2d64:	9a 8b       	std	Y+18, r25	; 0x12
    2d66:	89 8b       	std	Y+17, r24	; 0x11
    2d68:	89 89       	ldd	r24, Y+17	; 0x11
    2d6a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d6c:	01 97       	sbiw	r24, 0x01	; 1
    2d6e:	f1 f7       	brne	.-4      	; 0x2d6c <LCD_sendCommand+0x7ac>
    2d70:	9a 8b       	std	Y+18, r25	; 0x12
    2d72:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d74:	8b 89       	ldd	r24, Y+19	; 0x13
    2d76:	9c 89       	ldd	r25, Y+20	; 0x14
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	9c 8b       	std	Y+20, r25	; 0x14
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d80:	9c 89       	ldd	r25, Y+20	; 0x14
    2d82:	00 97       	sbiw	r24, 0x00	; 0
    2d84:	69 f7       	brne	.-38     	; 0x2d60 <LCD_sendCommand+0x7a0>
    2d86:	14 c0       	rjmp	.+40     	; 0x2db0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d88:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8a:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8c:	8f 89       	ldd	r24, Y+23	; 0x17
    2d8e:	98 8d       	ldd	r25, Y+24	; 0x18
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9c 8b       	std	Y+20, r25	; 0x14
    2d9a:	8b 8b       	std	Y+19, r24	; 0x13
    2d9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2da0:	98 8b       	std	Y+16, r25	; 0x10
    2da2:	8f 87       	std	Y+15, r24	; 0x0f
    2da4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2da6:	98 89       	ldd	r25, Y+16	; 0x10
    2da8:	01 97       	sbiw	r24, 0x01	; 1
    2daa:	f1 f7       	brne	.-4      	; 0x2da8 <LCD_sendCommand+0x7e8>
    2dac:	98 8b       	std	Y+16, r25	; 0x10
    2dae:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_LOW);
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	61 e0       	ldi	r22, 0x01	; 1
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	a0 e8       	ldi	r26, 0x80	; 128
    2dc0:	bf e3       	ldi	r27, 0x3F	; 63
    2dc2:	8b 87       	std	Y+11, r24	; 0x0b
    2dc4:	9c 87       	std	Y+12, r25	; 0x0c
    2dc6:	ad 87       	std	Y+13, r26	; 0x0d
    2dc8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd2:	20 e0       	ldi	r18, 0x00	; 0
    2dd4:	30 e0       	ldi	r19, 0x00	; 0
    2dd6:	4a ef       	ldi	r20, 0xFA	; 250
    2dd8:	54 e4       	ldi	r21, 0x44	; 68
    2dda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dde:	dc 01       	movw	r26, r24
    2de0:	cb 01       	movw	r24, r22
    2de2:	8f 83       	std	Y+7, r24	; 0x07
    2de4:	98 87       	std	Y+8, r25	; 0x08
    2de6:	a9 87       	std	Y+9, r26	; 0x09
    2de8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dea:	6f 81       	ldd	r22, Y+7	; 0x07
    2dec:	78 85       	ldd	r23, Y+8	; 0x08
    2dee:	89 85       	ldd	r24, Y+9	; 0x09
    2df0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	40 e8       	ldi	r20, 0x80	; 128
    2df8:	5f e3       	ldi	r21, 0x3F	; 63
    2dfa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dfe:	88 23       	and	r24, r24
    2e00:	2c f4       	brge	.+10     	; 0x2e0c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	90 e0       	ldi	r25, 0x00	; 0
    2e06:	9e 83       	std	Y+6, r25	; 0x06
    2e08:	8d 83       	std	Y+5, r24	; 0x05
    2e0a:	3f c0       	rjmp	.+126    	; 0x2e8a <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    2e0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0e:	78 85       	ldd	r23, Y+8	; 0x08
    2e10:	89 85       	ldd	r24, Y+9	; 0x09
    2e12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
    2e18:	4f e7       	ldi	r20, 0x7F	; 127
    2e1a:	57 e4       	ldi	r21, 0x47	; 71
    2e1c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e20:	18 16       	cp	r1, r24
    2e22:	4c f5       	brge	.+82     	; 0x2e76 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e2c:	20 e0       	ldi	r18, 0x00	; 0
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	40 e2       	ldi	r20, 0x20	; 32
    2e32:	51 e4       	ldi	r21, 0x41	; 65
    2e34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e38:	dc 01       	movw	r26, r24
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	bc 01       	movw	r22, r24
    2e3e:	cd 01       	movw	r24, r26
    2e40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	9e 83       	std	Y+6, r25	; 0x06
    2e4a:	8d 83       	std	Y+5, r24	; 0x05
    2e4c:	0f c0       	rjmp	.+30     	; 0x2e6c <LCD_sendCommand+0x8ac>
    2e4e:	88 ec       	ldi	r24, 0xC8	; 200
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	9c 83       	std	Y+4, r25	; 0x04
    2e54:	8b 83       	std	Y+3, r24	; 0x03
    2e56:	8b 81       	ldd	r24, Y+3	; 0x03
    2e58:	9c 81       	ldd	r25, Y+4	; 0x04
    2e5a:	01 97       	sbiw	r24, 0x01	; 1
    2e5c:	f1 f7       	brne	.-4      	; 0x2e5a <LCD_sendCommand+0x89a>
    2e5e:	9c 83       	std	Y+4, r25	; 0x04
    2e60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e62:	8d 81       	ldd	r24, Y+5	; 0x05
    2e64:	9e 81       	ldd	r25, Y+6	; 0x06
    2e66:	01 97       	sbiw	r24, 0x01	; 1
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e70:	00 97       	sbiw	r24, 0x00	; 0
    2e72:	69 f7       	brne	.-38     	; 0x2e4e <LCD_sendCommand+0x88e>
    2e74:	14 c0       	rjmp	.+40     	; 0x2e9e <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e76:	6f 81       	ldd	r22, Y+7	; 0x07
    2e78:	78 85       	ldd	r23, Y+8	; 0x08
    2e7a:	89 85       	ldd	r24, Y+9	; 0x09
    2e7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	9a 83       	std	Y+2, r25	; 0x02
    2e90:	89 83       	std	Y+1, r24	; 0x01
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	9a 81       	ldd	r25, Y+2	; 0x02
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <LCD_sendCommand+0x8d6>
    2e9a:	9a 83       	std	Y+2, r25	; 0x02
    2e9c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
#endif



}
    2e9e:	cd 59       	subi	r28, 0x9D	; 157
    2ea0:	df 4f       	sbci	r29, 0xFF	; 255
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	cf 91       	pop	r28
    2eae:	df 91       	pop	r29
    2eb0:	1f 91       	pop	r17
    2eb2:	0f 91       	pop	r16
    2eb4:	08 95       	ret

00002eb6 <LCD_displayCharacter>:

/*
 * Description :
 * Function responsible for displaying a character on the LCD
 */
void LCD_displayCharacter(uint8 a_Char){
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	df 93       	push	r29
    2ebc:	cf 93       	push	r28
    2ebe:	cd b7       	in	r28, 0x3d	; 61
    2ec0:	de b7       	in	r29, 0x3e	; 62
    2ec2:	c3 56       	subi	r28, 0x63	; 99
    2ec4:	d0 40       	sbci	r29, 0x00	; 0
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	de bf       	out	0x3e, r29	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	cd bf       	out	0x3d, r28	; 61
    2ed0:	fe 01       	movw	r30, r28
    2ed2:	ed 59       	subi	r30, 0x9D	; 157
    2ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed6:	80 83       	st	Z, r24
	/*
		 * Write 0 to RS
		 * */
		GPIO_writePin(LCD_PORT_CONTROL,LCD_RS,LOGIC_HIGH);
    2ed8:	81 e0       	ldi	r24, 0x01	; 1
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	41 e0       	ldi	r20, 0x01	; 1
    2ede:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    2ee2:	fe 01       	movw	r30, r28
    2ee4:	e1 5a       	subi	r30, 0xA1	; 161
    2ee6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ee8:	80 e0       	ldi	r24, 0x00	; 0
    2eea:	90 e0       	ldi	r25, 0x00	; 0
    2eec:	a0 e8       	ldi	r26, 0x80	; 128
    2eee:	bf e3       	ldi	r27, 0x3F	; 63
    2ef0:	80 83       	st	Z, r24
    2ef2:	91 83       	std	Z+1, r25	; 0x01
    2ef4:	a2 83       	std	Z+2, r26	; 0x02
    2ef6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef8:	8e 01       	movw	r16, r28
    2efa:	05 5a       	subi	r16, 0xA5	; 165
    2efc:	1f 4f       	sbci	r17, 0xFF	; 255
    2efe:	fe 01       	movw	r30, r28
    2f00:	e1 5a       	subi	r30, 0xA1	; 161
    2f02:	ff 4f       	sbci	r31, 0xFF	; 255
    2f04:	60 81       	ld	r22, Z
    2f06:	71 81       	ldd	r23, Z+1	; 0x01
    2f08:	82 81       	ldd	r24, Z+2	; 0x02
    2f0a:	93 81       	ldd	r25, Z+3	; 0x03
    2f0c:	20 e0       	ldi	r18, 0x00	; 0
    2f0e:	30 e0       	ldi	r19, 0x00	; 0
    2f10:	4a ef       	ldi	r20, 0xFA	; 250
    2f12:	54 e4       	ldi	r21, 0x44	; 68
    2f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f18:	dc 01       	movw	r26, r24
    2f1a:	cb 01       	movw	r24, r22
    2f1c:	f8 01       	movw	r30, r16
    2f1e:	80 83       	st	Z, r24
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	a2 83       	std	Z+2, r26	; 0x02
    2f24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f26:	fe 01       	movw	r30, r28
    2f28:	e5 5a       	subi	r30, 0xA5	; 165
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	60 81       	ld	r22, Z
    2f2e:	71 81       	ldd	r23, Z+1	; 0x01
    2f30:	82 81       	ldd	r24, Z+2	; 0x02
    2f32:	93 81       	ldd	r25, Z+3	; 0x03
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	40 e8       	ldi	r20, 0x80	; 128
    2f3a:	5f e3       	ldi	r21, 0x3F	; 63
    2f3c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f40:	88 23       	and	r24, r24
    2f42:	44 f4       	brge	.+16     	; 0x2f54 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2f44:	fe 01       	movw	r30, r28
    2f46:	e7 5a       	subi	r30, 0xA7	; 167
    2f48:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4a:	81 e0       	ldi	r24, 0x01	; 1
    2f4c:	90 e0       	ldi	r25, 0x00	; 0
    2f4e:	91 83       	std	Z+1, r25	; 0x01
    2f50:	80 83       	st	Z, r24
    2f52:	64 c0       	rjmp	.+200    	; 0x301c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2f54:	fe 01       	movw	r30, r28
    2f56:	e5 5a       	subi	r30, 0xA5	; 165
    2f58:	ff 4f       	sbci	r31, 0xFF	; 255
    2f5a:	60 81       	ld	r22, Z
    2f5c:	71 81       	ldd	r23, Z+1	; 0x01
    2f5e:	82 81       	ldd	r24, Z+2	; 0x02
    2f60:	93 81       	ldd	r25, Z+3	; 0x03
    2f62:	20 e0       	ldi	r18, 0x00	; 0
    2f64:	3f ef       	ldi	r19, 0xFF	; 255
    2f66:	4f e7       	ldi	r20, 0x7F	; 127
    2f68:	57 e4       	ldi	r21, 0x47	; 71
    2f6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f6e:	18 16       	cp	r1, r24
    2f70:	0c f0       	brlt	.+2      	; 0x2f74 <LCD_displayCharacter+0xbe>
    2f72:	43 c0       	rjmp	.+134    	; 0x2ffa <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f74:	fe 01       	movw	r30, r28
    2f76:	e1 5a       	subi	r30, 0xA1	; 161
    2f78:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7a:	60 81       	ld	r22, Z
    2f7c:	71 81       	ldd	r23, Z+1	; 0x01
    2f7e:	82 81       	ldd	r24, Z+2	; 0x02
    2f80:	93 81       	ldd	r25, Z+3	; 0x03
    2f82:	20 e0       	ldi	r18, 0x00	; 0
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	40 e2       	ldi	r20, 0x20	; 32
    2f88:	51 e4       	ldi	r21, 0x41	; 65
    2f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8e:	dc 01       	movw	r26, r24
    2f90:	cb 01       	movw	r24, r22
    2f92:	8e 01       	movw	r16, r28
    2f94:	07 5a       	subi	r16, 0xA7	; 167
    2f96:	1f 4f       	sbci	r17, 0xFF	; 255
    2f98:	bc 01       	movw	r22, r24
    2f9a:	cd 01       	movw	r24, r26
    2f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa0:	dc 01       	movw	r26, r24
    2fa2:	cb 01       	movw	r24, r22
    2fa4:	f8 01       	movw	r30, r16
    2fa6:	91 83       	std	Z+1, r25	; 0x01
    2fa8:	80 83       	st	Z, r24
    2faa:	1f c0       	rjmp	.+62     	; 0x2fea <LCD_displayCharacter+0x134>
    2fac:	fe 01       	movw	r30, r28
    2fae:	e9 5a       	subi	r30, 0xA9	; 169
    2fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb2:	88 ec       	ldi	r24, 0xC8	; 200
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
    2fba:	fe 01       	movw	r30, r28
    2fbc:	e9 5a       	subi	r30, 0xA9	; 169
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	91 81       	ldd	r25, Z+1	; 0x01
    2fc4:	01 97       	sbiw	r24, 0x01	; 1
    2fc6:	f1 f7       	brne	.-4      	; 0x2fc4 <LCD_displayCharacter+0x10e>
    2fc8:	fe 01       	movw	r30, r28
    2fca:	e9 5a       	subi	r30, 0xA9	; 169
    2fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fce:	91 83       	std	Z+1, r25	; 0x01
    2fd0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fd2:	de 01       	movw	r26, r28
    2fd4:	a7 5a       	subi	r26, 0xA7	; 167
    2fd6:	bf 4f       	sbci	r27, 0xFF	; 255
    2fd8:	fe 01       	movw	r30, r28
    2fda:	e7 5a       	subi	r30, 0xA7	; 167
    2fdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fde:	80 81       	ld	r24, Z
    2fe0:	91 81       	ldd	r25, Z+1	; 0x01
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	11 96       	adiw	r26, 0x01	; 1
    2fe6:	9c 93       	st	X, r25
    2fe8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fea:	fe 01       	movw	r30, r28
    2fec:	e7 5a       	subi	r30, 0xA7	; 167
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	80 81       	ld	r24, Z
    2ff2:	91 81       	ldd	r25, Z+1	; 0x01
    2ff4:	00 97       	sbiw	r24, 0x00	; 0
    2ff6:	d1 f6       	brne	.-76     	; 0x2fac <LCD_displayCharacter+0xf6>
    2ff8:	27 c0       	rjmp	.+78     	; 0x3048 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ffa:	8e 01       	movw	r16, r28
    2ffc:	07 5a       	subi	r16, 0xA7	; 167
    2ffe:	1f 4f       	sbci	r17, 0xFF	; 255
    3000:	fe 01       	movw	r30, r28
    3002:	e5 5a       	subi	r30, 0xA5	; 165
    3004:	ff 4f       	sbci	r31, 0xFF	; 255
    3006:	60 81       	ld	r22, Z
    3008:	71 81       	ldd	r23, Z+1	; 0x01
    300a:	82 81       	ldd	r24, Z+2	; 0x02
    300c:	93 81       	ldd	r25, Z+3	; 0x03
    300e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3012:	dc 01       	movw	r26, r24
    3014:	cb 01       	movw	r24, r22
    3016:	f8 01       	movw	r30, r16
    3018:	91 83       	std	Z+1, r25	; 0x01
    301a:	80 83       	st	Z, r24
    301c:	de 01       	movw	r26, r28
    301e:	ab 5a       	subi	r26, 0xAB	; 171
    3020:	bf 4f       	sbci	r27, 0xFF	; 255
    3022:	fe 01       	movw	r30, r28
    3024:	e7 5a       	subi	r30, 0xA7	; 167
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	80 81       	ld	r24, Z
    302a:	91 81       	ldd	r25, Z+1	; 0x01
    302c:	8d 93       	st	X+, r24
    302e:	9c 93       	st	X, r25
    3030:	fe 01       	movw	r30, r28
    3032:	eb 5a       	subi	r30, 0xAB	; 171
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	80 81       	ld	r24, Z
    3038:	91 81       	ldd	r25, Z+1	; 0x01
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	f1 f7       	brne	.-4      	; 0x303a <LCD_displayCharacter+0x184>
    303e:	fe 01       	movw	r30, r28
    3040:	eb 5a       	subi	r30, 0xAB	; 171
    3042:	ff 4f       	sbci	r31, 0xFF	; 255
    3044:	91 83       	std	Z+1, r25	; 0x01
    3046:	80 83       	st	Z, r24
		 * */
		_delay_ms(1);
		/*
		 * Enable
		 * */
		GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_HIGH);
    3048:	81 e0       	ldi	r24, 0x01	; 1
    304a:	61 e0       	ldi	r22, 0x01	; 1
    304c:	41 e0       	ldi	r20, 0x01	; 1
    304e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    3052:	fe 01       	movw	r30, r28
    3054:	ef 5a       	subi	r30, 0xAF	; 175
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 e0       	ldi	r24, 0x00	; 0
    305a:	90 e0       	ldi	r25, 0x00	; 0
    305c:	a0 e8       	ldi	r26, 0x80	; 128
    305e:	bf e3       	ldi	r27, 0x3F	; 63
    3060:	80 83       	st	Z, r24
    3062:	91 83       	std	Z+1, r25	; 0x01
    3064:	a2 83       	std	Z+2, r26	; 0x02
    3066:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3068:	8e 01       	movw	r16, r28
    306a:	03 5b       	subi	r16, 0xB3	; 179
    306c:	1f 4f       	sbci	r17, 0xFF	; 255
    306e:	fe 01       	movw	r30, r28
    3070:	ef 5a       	subi	r30, 0xAF	; 175
    3072:	ff 4f       	sbci	r31, 0xFF	; 255
    3074:	60 81       	ld	r22, Z
    3076:	71 81       	ldd	r23, Z+1	; 0x01
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	20 e0       	ldi	r18, 0x00	; 0
    307e:	30 e0       	ldi	r19, 0x00	; 0
    3080:	4a ef       	ldi	r20, 0xFA	; 250
    3082:	54 e4       	ldi	r21, 0x44	; 68
    3084:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3088:	dc 01       	movw	r26, r24
    308a:	cb 01       	movw	r24, r22
    308c:	f8 01       	movw	r30, r16
    308e:	80 83       	st	Z, r24
    3090:	91 83       	std	Z+1, r25	; 0x01
    3092:	a2 83       	std	Z+2, r26	; 0x02
    3094:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3096:	fe 01       	movw	r30, r28
    3098:	e3 5b       	subi	r30, 0xB3	; 179
    309a:	ff 4f       	sbci	r31, 0xFF	; 255
    309c:	60 81       	ld	r22, Z
    309e:	71 81       	ldd	r23, Z+1	; 0x01
    30a0:	82 81       	ldd	r24, Z+2	; 0x02
    30a2:	93 81       	ldd	r25, Z+3	; 0x03
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	40 e8       	ldi	r20, 0x80	; 128
    30aa:	5f e3       	ldi	r21, 0x3F	; 63
    30ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30b0:	88 23       	and	r24, r24
    30b2:	44 f4       	brge	.+16     	; 0x30c4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    30b4:	fe 01       	movw	r30, r28
    30b6:	e5 5b       	subi	r30, 0xB5	; 181
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	81 e0       	ldi	r24, 0x01	; 1
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	91 83       	std	Z+1, r25	; 0x01
    30c0:	80 83       	st	Z, r24
    30c2:	64 c0       	rjmp	.+200    	; 0x318c <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    30c4:	fe 01       	movw	r30, r28
    30c6:	e3 5b       	subi	r30, 0xB3	; 179
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	3f ef       	ldi	r19, 0xFF	; 255
    30d6:	4f e7       	ldi	r20, 0x7F	; 127
    30d8:	57 e4       	ldi	r21, 0x47	; 71
    30da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    30de:	18 16       	cp	r1, r24
    30e0:	0c f0       	brlt	.+2      	; 0x30e4 <LCD_displayCharacter+0x22e>
    30e2:	43 c0       	rjmp	.+134    	; 0x316a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30e4:	fe 01       	movw	r30, r28
    30e6:	ef 5a       	subi	r30, 0xAF	; 175
    30e8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ea:	60 81       	ld	r22, Z
    30ec:	71 81       	ldd	r23, Z+1	; 0x01
    30ee:	82 81       	ldd	r24, Z+2	; 0x02
    30f0:	93 81       	ldd	r25, Z+3	; 0x03
    30f2:	20 e0       	ldi	r18, 0x00	; 0
    30f4:	30 e0       	ldi	r19, 0x00	; 0
    30f6:	40 e2       	ldi	r20, 0x20	; 32
    30f8:	51 e4       	ldi	r21, 0x41	; 65
    30fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	8e 01       	movw	r16, r28
    3104:	05 5b       	subi	r16, 0xB5	; 181
    3106:	1f 4f       	sbci	r17, 0xFF	; 255
    3108:	bc 01       	movw	r22, r24
    310a:	cd 01       	movw	r24, r26
    310c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3110:	dc 01       	movw	r26, r24
    3112:	cb 01       	movw	r24, r22
    3114:	f8 01       	movw	r30, r16
    3116:	91 83       	std	Z+1, r25	; 0x01
    3118:	80 83       	st	Z, r24
    311a:	1f c0       	rjmp	.+62     	; 0x315a <LCD_displayCharacter+0x2a4>
    311c:	fe 01       	movw	r30, r28
    311e:	e7 5b       	subi	r30, 0xB7	; 183
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	88 ec       	ldi	r24, 0xC8	; 200
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	91 83       	std	Z+1, r25	; 0x01
    3128:	80 83       	st	Z, r24
    312a:	fe 01       	movw	r30, r28
    312c:	e7 5b       	subi	r30, 0xB7	; 183
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	80 81       	ld	r24, Z
    3132:	91 81       	ldd	r25, Z+1	; 0x01
    3134:	01 97       	sbiw	r24, 0x01	; 1
    3136:	f1 f7       	brne	.-4      	; 0x3134 <LCD_displayCharacter+0x27e>
    3138:	fe 01       	movw	r30, r28
    313a:	e7 5b       	subi	r30, 0xB7	; 183
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	91 83       	std	Z+1, r25	; 0x01
    3140:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3142:	de 01       	movw	r26, r28
    3144:	a5 5b       	subi	r26, 0xB5	; 181
    3146:	bf 4f       	sbci	r27, 0xFF	; 255
    3148:	fe 01       	movw	r30, r28
    314a:	e5 5b       	subi	r30, 0xB5	; 181
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	11 96       	adiw	r26, 0x01	; 1
    3156:	9c 93       	st	X, r25
    3158:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    315a:	fe 01       	movw	r30, r28
    315c:	e5 5b       	subi	r30, 0xB5	; 181
    315e:	ff 4f       	sbci	r31, 0xFF	; 255
    3160:	80 81       	ld	r24, Z
    3162:	91 81       	ldd	r25, Z+1	; 0x01
    3164:	00 97       	sbiw	r24, 0x00	; 0
    3166:	d1 f6       	brne	.-76     	; 0x311c <LCD_displayCharacter+0x266>
    3168:	27 c0       	rjmp	.+78     	; 0x31b8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    316a:	8e 01       	movw	r16, r28
    316c:	05 5b       	subi	r16, 0xB5	; 181
    316e:	1f 4f       	sbci	r17, 0xFF	; 255
    3170:	fe 01       	movw	r30, r28
    3172:	e3 5b       	subi	r30, 0xB3	; 179
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	60 81       	ld	r22, Z
    3178:	71 81       	ldd	r23, Z+1	; 0x01
    317a:	82 81       	ldd	r24, Z+2	; 0x02
    317c:	93 81       	ldd	r25, Z+3	; 0x03
    317e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3182:	dc 01       	movw	r26, r24
    3184:	cb 01       	movw	r24, r22
    3186:	f8 01       	movw	r30, r16
    3188:	91 83       	std	Z+1, r25	; 0x01
    318a:	80 83       	st	Z, r24
    318c:	de 01       	movw	r26, r28
    318e:	a9 5b       	subi	r26, 0xB9	; 185
    3190:	bf 4f       	sbci	r27, 0xFF	; 255
    3192:	fe 01       	movw	r30, r28
    3194:	e5 5b       	subi	r30, 0xB5	; 181
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	80 81       	ld	r24, Z
    319a:	91 81       	ldd	r25, Z+1	; 0x01
    319c:	8d 93       	st	X+, r24
    319e:	9c 93       	st	X, r25
    31a0:	fe 01       	movw	r30, r28
    31a2:	e9 5b       	subi	r30, 0xB9	; 185
    31a4:	ff 4f       	sbci	r31, 0xFF	; 255
    31a6:	80 81       	ld	r24, Z
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	01 97       	sbiw	r24, 0x01	; 1
    31ac:	f1 f7       	brne	.-4      	; 0x31aa <LCD_displayCharacter+0x2f4>
    31ae:	fe 01       	movw	r30, r28
    31b0:	e9 5b       	subi	r30, 0xB9	; 185
    31b2:	ff 4f       	sbci	r31, 0xFF	; 255
    31b4:	91 83       	std	Z+1, r25	; 0x01
    31b6:	80 83       	st	Z, r24
		/*
		 * Delay 1 us as th=13ns
		 */
		_delay_ms(1);
	#elif(NUMBER_OF_BITS==4)
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_1,GET_BIT(a_Char,4));
    31b8:	fe 01       	movw	r30, r28
    31ba:	ed 59       	subi	r30, 0x9D	; 157
    31bc:	ff 4f       	sbci	r31, 0xFF	; 255
    31be:	80 81       	ld	r24, Z
    31c0:	88 2f       	mov	r24, r24
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	80 71       	andi	r24, 0x10	; 16
    31c6:	90 70       	andi	r25, 0x00	; 0
    31c8:	95 95       	asr	r25
    31ca:	87 95       	ror	r24
    31cc:	95 95       	asr	r25
    31ce:	87 95       	ror	r24
    31d0:	95 95       	asr	r25
    31d2:	87 95       	ror	r24
    31d4:	95 95       	asr	r25
    31d6:	87 95       	ror	r24
    31d8:	98 2f       	mov	r25, r24
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	64 e0       	ldi	r22, 0x04	; 4
    31de:	49 2f       	mov	r20, r25
    31e0:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_2,GET_BIT(a_Char,5));
    31e4:	fe 01       	movw	r30, r28
    31e6:	ed 59       	subi	r30, 0x9D	; 157
    31e8:	ff 4f       	sbci	r31, 0xFF	; 255
    31ea:	80 81       	ld	r24, Z
    31ec:	88 2f       	mov	r24, r24
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	80 72       	andi	r24, 0x20	; 32
    31f2:	90 70       	andi	r25, 0x00	; 0
    31f4:	95 95       	asr	r25
    31f6:	87 95       	ror	r24
    31f8:	95 95       	asr	r25
    31fa:	87 95       	ror	r24
    31fc:	95 95       	asr	r25
    31fe:	87 95       	ror	r24
    3200:	95 95       	asr	r25
    3202:	87 95       	ror	r24
    3204:	95 95       	asr	r25
    3206:	87 95       	ror	r24
    3208:	98 2f       	mov	r25, r24
    320a:	80 e0       	ldi	r24, 0x00	; 0
    320c:	65 e0       	ldi	r22, 0x05	; 5
    320e:	49 2f       	mov	r20, r25
    3210:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_3,GET_BIT(a_Char,6));
    3214:	fe 01       	movw	r30, r28
    3216:	ed 59       	subi	r30, 0x9D	; 157
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	80 81       	ld	r24, Z
    321c:	88 2f       	mov	r24, r24
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	80 74       	andi	r24, 0x40	; 64
    3222:	90 70       	andi	r25, 0x00	; 0
    3224:	08 2e       	mov	r0, r24
    3226:	89 2f       	mov	r24, r25
    3228:	00 0c       	add	r0, r0
    322a:	88 1f       	adc	r24, r24
    322c:	99 0b       	sbc	r25, r25
    322e:	00 0c       	add	r0, r0
    3230:	88 1f       	adc	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	98 2f       	mov	r25, r24
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	66 e0       	ldi	r22, 0x06	; 6
    323a:	49 2f       	mov	r20, r25
    323c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_4,GET_BIT(a_Char,7));
    3240:	fe 01       	movw	r30, r28
    3242:	ed 59       	subi	r30, 0x9D	; 157
    3244:	ff 4f       	sbci	r31, 0xFF	; 255
    3246:	80 81       	ld	r24, Z
    3248:	98 2f       	mov	r25, r24
    324a:	99 1f       	adc	r25, r25
    324c:	99 27       	eor	r25, r25
    324e:	99 1f       	adc	r25, r25
    3250:	80 e0       	ldi	r24, 0x00	; 0
    3252:	67 e0       	ldi	r22, 0x07	; 7
    3254:	49 2f       	mov	r20, r25
    3256:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    325a:	fe 01       	movw	r30, r28
    325c:	ed 5b       	subi	r30, 0xBD	; 189
    325e:	ff 4f       	sbci	r31, 0xFF	; 255
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	a0 e8       	ldi	r26, 0x80	; 128
    3266:	bf e3       	ldi	r27, 0x3F	; 63
    3268:	80 83       	st	Z, r24
    326a:	91 83       	std	Z+1, r25	; 0x01
    326c:	a2 83       	std	Z+2, r26	; 0x02
    326e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3270:	8e 01       	movw	r16, r28
    3272:	01 5c       	subi	r16, 0xC1	; 193
    3274:	1f 4f       	sbci	r17, 0xFF	; 255
    3276:	fe 01       	movw	r30, r28
    3278:	ed 5b       	subi	r30, 0xBD	; 189
    327a:	ff 4f       	sbci	r31, 0xFF	; 255
    327c:	60 81       	ld	r22, Z
    327e:	71 81       	ldd	r23, Z+1	; 0x01
    3280:	82 81       	ldd	r24, Z+2	; 0x02
    3282:	93 81       	ldd	r25, Z+3	; 0x03
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	4a ef       	ldi	r20, 0xFA	; 250
    328a:	54 e4       	ldi	r21, 0x44	; 68
    328c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	f8 01       	movw	r30, r16
    3296:	80 83       	st	Z, r24
    3298:	91 83       	std	Z+1, r25	; 0x01
    329a:	a2 83       	std	Z+2, r26	; 0x02
    329c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    329e:	fe 01       	movw	r30, r28
    32a0:	ff 96       	adiw	r30, 0x3f	; 63
    32a2:	60 81       	ld	r22, Z
    32a4:	71 81       	ldd	r23, Z+1	; 0x01
    32a6:	82 81       	ldd	r24, Z+2	; 0x02
    32a8:	93 81       	ldd	r25, Z+3	; 0x03
    32aa:	20 e0       	ldi	r18, 0x00	; 0
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	40 e8       	ldi	r20, 0x80	; 128
    32b0:	5f e3       	ldi	r21, 0x3F	; 63
    32b2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32b6:	88 23       	and	r24, r24
    32b8:	2c f4       	brge	.+10     	; 0x32c4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	90 e0       	ldi	r25, 0x00	; 0
    32be:	9e af       	std	Y+62, r25	; 0x3e
    32c0:	8d af       	std	Y+61, r24	; 0x3d
    32c2:	46 c0       	rjmp	.+140    	; 0x3350 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    32c4:	fe 01       	movw	r30, r28
    32c6:	ff 96       	adiw	r30, 0x3f	; 63
    32c8:	60 81       	ld	r22, Z
    32ca:	71 81       	ldd	r23, Z+1	; 0x01
    32cc:	82 81       	ldd	r24, Z+2	; 0x02
    32ce:	93 81       	ldd	r25, Z+3	; 0x03
    32d0:	20 e0       	ldi	r18, 0x00	; 0
    32d2:	3f ef       	ldi	r19, 0xFF	; 255
    32d4:	4f e7       	ldi	r20, 0x7F	; 127
    32d6:	57 e4       	ldi	r21, 0x47	; 71
    32d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    32dc:	18 16       	cp	r1, r24
    32de:	64 f5       	brge	.+88     	; 0x3338 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    32e0:	fe 01       	movw	r30, r28
    32e2:	ed 5b       	subi	r30, 0xBD	; 189
    32e4:	ff 4f       	sbci	r31, 0xFF	; 255
    32e6:	60 81       	ld	r22, Z
    32e8:	71 81       	ldd	r23, Z+1	; 0x01
    32ea:	82 81       	ldd	r24, Z+2	; 0x02
    32ec:	93 81       	ldd	r25, Z+3	; 0x03
    32ee:	20 e0       	ldi	r18, 0x00	; 0
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	40 e2       	ldi	r20, 0x20	; 32
    32f4:	51 e4       	ldi	r21, 0x41	; 65
    32f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32fa:	dc 01       	movw	r26, r24
    32fc:	cb 01       	movw	r24, r22
    32fe:	bc 01       	movw	r22, r24
    3300:	cd 01       	movw	r24, r26
    3302:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3306:	dc 01       	movw	r26, r24
    3308:	cb 01       	movw	r24, r22
    330a:	9e af       	std	Y+62, r25	; 0x3e
    330c:	8d af       	std	Y+61, r24	; 0x3d
    330e:	0f c0       	rjmp	.+30     	; 0x332e <LCD_displayCharacter+0x478>
    3310:	88 ec       	ldi	r24, 0xC8	; 200
    3312:	90 e0       	ldi	r25, 0x00	; 0
    3314:	9c af       	std	Y+60, r25	; 0x3c
    3316:	8b af       	std	Y+59, r24	; 0x3b
    3318:	8b ad       	ldd	r24, Y+59	; 0x3b
    331a:	9c ad       	ldd	r25, Y+60	; 0x3c
    331c:	01 97       	sbiw	r24, 0x01	; 1
    331e:	f1 f7       	brne	.-4      	; 0x331c <LCD_displayCharacter+0x466>
    3320:	9c af       	std	Y+60, r25	; 0x3c
    3322:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3324:	8d ad       	ldd	r24, Y+61	; 0x3d
    3326:	9e ad       	ldd	r25, Y+62	; 0x3e
    3328:	01 97       	sbiw	r24, 0x01	; 1
    332a:	9e af       	std	Y+62, r25	; 0x3e
    332c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    332e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3330:	9e ad       	ldd	r25, Y+62	; 0x3e
    3332:	00 97       	sbiw	r24, 0x00	; 0
    3334:	69 f7       	brne	.-38     	; 0x3310 <LCD_displayCharacter+0x45a>
    3336:	16 c0       	rjmp	.+44     	; 0x3364 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3338:	fe 01       	movw	r30, r28
    333a:	ff 96       	adiw	r30, 0x3f	; 63
    333c:	60 81       	ld	r22, Z
    333e:	71 81       	ldd	r23, Z+1	; 0x01
    3340:	82 81       	ldd	r24, Z+2	; 0x02
    3342:	93 81       	ldd	r25, Z+3	; 0x03
    3344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3348:	dc 01       	movw	r26, r24
    334a:	cb 01       	movw	r24, r22
    334c:	9e af       	std	Y+62, r25	; 0x3e
    334e:	8d af       	std	Y+61, r24	; 0x3d
    3350:	8d ad       	ldd	r24, Y+61	; 0x3d
    3352:	9e ad       	ldd	r25, Y+62	; 0x3e
    3354:	9a af       	std	Y+58, r25	; 0x3a
    3356:	89 af       	std	Y+57, r24	; 0x39
    3358:	89 ad       	ldd	r24, Y+57	; 0x39
    335a:	9a ad       	ldd	r25, Y+58	; 0x3a
    335c:	01 97       	sbiw	r24, 0x01	; 1
    335e:	f1 f7       	brne	.-4      	; 0x335c <LCD_displayCharacter+0x4a6>
    3360:	9a af       	std	Y+58, r25	; 0x3a
    3362:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);

		GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_LOW);
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	61 e0       	ldi	r22, 0x01	; 1
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	90 e0       	ldi	r25, 0x00	; 0
    3372:	a0 e8       	ldi	r26, 0x80	; 128
    3374:	bf e3       	ldi	r27, 0x3F	; 63
    3376:	8d ab       	std	Y+53, r24	; 0x35
    3378:	9e ab       	std	Y+54, r25	; 0x36
    337a:	af ab       	std	Y+55, r26	; 0x37
    337c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    337e:	6d a9       	ldd	r22, Y+53	; 0x35
    3380:	7e a9       	ldd	r23, Y+54	; 0x36
    3382:	8f a9       	ldd	r24, Y+55	; 0x37
    3384:	98 ad       	ldd	r25, Y+56	; 0x38
    3386:	20 e0       	ldi	r18, 0x00	; 0
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	4a ef       	ldi	r20, 0xFA	; 250
    338c:	54 e4       	ldi	r21, 0x44	; 68
    338e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3392:	dc 01       	movw	r26, r24
    3394:	cb 01       	movw	r24, r22
    3396:	89 ab       	std	Y+49, r24	; 0x31
    3398:	9a ab       	std	Y+50, r25	; 0x32
    339a:	ab ab       	std	Y+51, r26	; 0x33
    339c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    339e:	69 a9       	ldd	r22, Y+49	; 0x31
    33a0:	7a a9       	ldd	r23, Y+50	; 0x32
    33a2:	8b a9       	ldd	r24, Y+51	; 0x33
    33a4:	9c a9       	ldd	r25, Y+52	; 0x34
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	40 e8       	ldi	r20, 0x80	; 128
    33ac:	5f e3       	ldi	r21, 0x3F	; 63
    33ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    33b2:	88 23       	and	r24, r24
    33b4:	2c f4       	brge	.+10     	; 0x33c0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	98 ab       	std	Y+48, r25	; 0x30
    33bc:	8f a7       	std	Y+47, r24	; 0x2f
    33be:	3f c0       	rjmp	.+126    	; 0x343e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    33c0:	69 a9       	ldd	r22, Y+49	; 0x31
    33c2:	7a a9       	ldd	r23, Y+50	; 0x32
    33c4:	8b a9       	ldd	r24, Y+51	; 0x33
    33c6:	9c a9       	ldd	r25, Y+52	; 0x34
    33c8:	20 e0       	ldi	r18, 0x00	; 0
    33ca:	3f ef       	ldi	r19, 0xFF	; 255
    33cc:	4f e7       	ldi	r20, 0x7F	; 127
    33ce:	57 e4       	ldi	r21, 0x47	; 71
    33d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    33d4:	18 16       	cp	r1, r24
    33d6:	4c f5       	brge	.+82     	; 0x342a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    33d8:	6d a9       	ldd	r22, Y+53	; 0x35
    33da:	7e a9       	ldd	r23, Y+54	; 0x36
    33dc:	8f a9       	ldd	r24, Y+55	; 0x37
    33de:	98 ad       	ldd	r25, Y+56	; 0x38
    33e0:	20 e0       	ldi	r18, 0x00	; 0
    33e2:	30 e0       	ldi	r19, 0x00	; 0
    33e4:	40 e2       	ldi	r20, 0x20	; 32
    33e6:	51 e4       	ldi	r21, 0x41	; 65
    33e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33ec:	dc 01       	movw	r26, r24
    33ee:	cb 01       	movw	r24, r22
    33f0:	bc 01       	movw	r22, r24
    33f2:	cd 01       	movw	r24, r26
    33f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f8:	dc 01       	movw	r26, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	98 ab       	std	Y+48, r25	; 0x30
    33fe:	8f a7       	std	Y+47, r24	; 0x2f
    3400:	0f c0       	rjmp	.+30     	; 0x3420 <LCD_displayCharacter+0x56a>
    3402:	88 ec       	ldi	r24, 0xC8	; 200
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	9e a7       	std	Y+46, r25	; 0x2e
    3408:	8d a7       	std	Y+45, r24	; 0x2d
    340a:	8d a5       	ldd	r24, Y+45	; 0x2d
    340c:	9e a5       	ldd	r25, Y+46	; 0x2e
    340e:	01 97       	sbiw	r24, 0x01	; 1
    3410:	f1 f7       	brne	.-4      	; 0x340e <LCD_displayCharacter+0x558>
    3412:	9e a7       	std	Y+46, r25	; 0x2e
    3414:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3416:	8f a5       	ldd	r24, Y+47	; 0x2f
    3418:	98 a9       	ldd	r25, Y+48	; 0x30
    341a:	01 97       	sbiw	r24, 0x01	; 1
    341c:	98 ab       	std	Y+48, r25	; 0x30
    341e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3420:	8f a5       	ldd	r24, Y+47	; 0x2f
    3422:	98 a9       	ldd	r25, Y+48	; 0x30
    3424:	00 97       	sbiw	r24, 0x00	; 0
    3426:	69 f7       	brne	.-38     	; 0x3402 <LCD_displayCharacter+0x54c>
    3428:	14 c0       	rjmp	.+40     	; 0x3452 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    342a:	69 a9       	ldd	r22, Y+49	; 0x31
    342c:	7a a9       	ldd	r23, Y+50	; 0x32
    342e:	8b a9       	ldd	r24, Y+51	; 0x33
    3430:	9c a9       	ldd	r25, Y+52	; 0x34
    3432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	98 ab       	std	Y+48, r25	; 0x30
    343c:	8f a7       	std	Y+47, r24	; 0x2f
    343e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3440:	98 a9       	ldd	r25, Y+48	; 0x30
    3442:	9c a7       	std	Y+44, r25	; 0x2c
    3444:	8b a7       	std	Y+43, r24	; 0x2b
    3446:	8b a5       	ldd	r24, Y+43	; 0x2b
    3448:	9c a5       	ldd	r25, Y+44	; 0x2c
    344a:	01 97       	sbiw	r24, 0x01	; 1
    344c:	f1 f7       	brne	.-4      	; 0x344a <LCD_displayCharacter+0x594>
    344e:	9c a7       	std	Y+44, r25	; 0x2c
    3450:	8b a7       	std	Y+43, r24	; 0x2b

		_delay_ms(1);
		GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_HIGH);
    3452:	81 e0       	ldi	r24, 0x01	; 1
    3454:	61 e0       	ldi	r22, 0x01	; 1
    3456:	41 e0       	ldi	r20, 0x01	; 1
    3458:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a0 e8       	ldi	r26, 0x80	; 128
    3462:	bf e3       	ldi	r27, 0x3F	; 63
    3464:	8f a3       	std	Y+39, r24	; 0x27
    3466:	98 a7       	std	Y+40, r25	; 0x28
    3468:	a9 a7       	std	Y+41, r26	; 0x29
    346a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    346c:	6f a1       	ldd	r22, Y+39	; 0x27
    346e:	78 a5       	ldd	r23, Y+40	; 0x28
    3470:	89 a5       	ldd	r24, Y+41	; 0x29
    3472:	9a a5       	ldd	r25, Y+42	; 0x2a
    3474:	20 e0       	ldi	r18, 0x00	; 0
    3476:	30 e0       	ldi	r19, 0x00	; 0
    3478:	4a ef       	ldi	r20, 0xFA	; 250
    347a:	54 e4       	ldi	r21, 0x44	; 68
    347c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3480:	dc 01       	movw	r26, r24
    3482:	cb 01       	movw	r24, r22
    3484:	8b a3       	std	Y+35, r24	; 0x23
    3486:	9c a3       	std	Y+36, r25	; 0x24
    3488:	ad a3       	std	Y+37, r26	; 0x25
    348a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    348c:	6b a1       	ldd	r22, Y+35	; 0x23
    348e:	7c a1       	ldd	r23, Y+36	; 0x24
    3490:	8d a1       	ldd	r24, Y+37	; 0x25
    3492:	9e a1       	ldd	r25, Y+38	; 0x26
    3494:	20 e0       	ldi	r18, 0x00	; 0
    3496:	30 e0       	ldi	r19, 0x00	; 0
    3498:	40 e8       	ldi	r20, 0x80	; 128
    349a:	5f e3       	ldi	r21, 0x3F	; 63
    349c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    34a0:	88 23       	and	r24, r24
    34a2:	2c f4       	brge	.+10     	; 0x34ae <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    34a4:	81 e0       	ldi	r24, 0x01	; 1
    34a6:	90 e0       	ldi	r25, 0x00	; 0
    34a8:	9a a3       	std	Y+34, r25	; 0x22
    34aa:	89 a3       	std	Y+33, r24	; 0x21
    34ac:	3f c0       	rjmp	.+126    	; 0x352c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    34ae:	6b a1       	ldd	r22, Y+35	; 0x23
    34b0:	7c a1       	ldd	r23, Y+36	; 0x24
    34b2:	8d a1       	ldd	r24, Y+37	; 0x25
    34b4:	9e a1       	ldd	r25, Y+38	; 0x26
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	3f ef       	ldi	r19, 0xFF	; 255
    34ba:	4f e7       	ldi	r20, 0x7F	; 127
    34bc:	57 e4       	ldi	r21, 0x47	; 71
    34be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34c2:	18 16       	cp	r1, r24
    34c4:	4c f5       	brge	.+82     	; 0x3518 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c6:	6f a1       	ldd	r22, Y+39	; 0x27
    34c8:	78 a5       	ldd	r23, Y+40	; 0x28
    34ca:	89 a5       	ldd	r24, Y+41	; 0x29
    34cc:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ce:	20 e0       	ldi	r18, 0x00	; 0
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	40 e2       	ldi	r20, 0x20	; 32
    34d4:	51 e4       	ldi	r21, 0x41	; 65
    34d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	bc 01       	movw	r22, r24
    34e0:	cd 01       	movw	r24, r26
    34e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e6:	dc 01       	movw	r26, r24
    34e8:	cb 01       	movw	r24, r22
    34ea:	9a a3       	std	Y+34, r25	; 0x22
    34ec:	89 a3       	std	Y+33, r24	; 0x21
    34ee:	0f c0       	rjmp	.+30     	; 0x350e <LCD_displayCharacter+0x658>
    34f0:	88 ec       	ldi	r24, 0xC8	; 200
    34f2:	90 e0       	ldi	r25, 0x00	; 0
    34f4:	98 a3       	std	Y+32, r25	; 0x20
    34f6:	8f 8f       	std	Y+31, r24	; 0x1f
    34f8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34fa:	98 a1       	ldd	r25, Y+32	; 0x20
    34fc:	01 97       	sbiw	r24, 0x01	; 1
    34fe:	f1 f7       	brne	.-4      	; 0x34fc <LCD_displayCharacter+0x646>
    3500:	98 a3       	std	Y+32, r25	; 0x20
    3502:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3504:	89 a1       	ldd	r24, Y+33	; 0x21
    3506:	9a a1       	ldd	r25, Y+34	; 0x22
    3508:	01 97       	sbiw	r24, 0x01	; 1
    350a:	9a a3       	std	Y+34, r25	; 0x22
    350c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350e:	89 a1       	ldd	r24, Y+33	; 0x21
    3510:	9a a1       	ldd	r25, Y+34	; 0x22
    3512:	00 97       	sbiw	r24, 0x00	; 0
    3514:	69 f7       	brne	.-38     	; 0x34f0 <LCD_displayCharacter+0x63a>
    3516:	14 c0       	rjmp	.+40     	; 0x3540 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3518:	6b a1       	ldd	r22, Y+35	; 0x23
    351a:	7c a1       	ldd	r23, Y+36	; 0x24
    351c:	8d a1       	ldd	r24, Y+37	; 0x25
    351e:	9e a1       	ldd	r25, Y+38	; 0x26
    3520:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3524:	dc 01       	movw	r26, r24
    3526:	cb 01       	movw	r24, r22
    3528:	9a a3       	std	Y+34, r25	; 0x22
    352a:	89 a3       	std	Y+33, r24	; 0x21
    352c:	89 a1       	ldd	r24, Y+33	; 0x21
    352e:	9a a1       	ldd	r25, Y+34	; 0x22
    3530:	9e 8f       	std	Y+30, r25	; 0x1e
    3532:	8d 8f       	std	Y+29, r24	; 0x1d
    3534:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3536:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3538:	01 97       	sbiw	r24, 0x01	; 1
    353a:	f1 f7       	brne	.-4      	; 0x3538 <LCD_displayCharacter+0x682>
    353c:	9e 8f       	std	Y+30, r25	; 0x1e
    353e:	8d 8f       	std	Y+29, r24	; 0x1d

		_delay_ms(1);

		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_1,GET_BIT(a_Char,0));
    3540:	fe 01       	movw	r30, r28
    3542:	ed 59       	subi	r30, 0x9D	; 157
    3544:	ff 4f       	sbci	r31, 0xFF	; 255
    3546:	80 81       	ld	r24, Z
    3548:	98 2f       	mov	r25, r24
    354a:	91 70       	andi	r25, 0x01	; 1
    354c:	80 e0       	ldi	r24, 0x00	; 0
    354e:	64 e0       	ldi	r22, 0x04	; 4
    3550:	49 2f       	mov	r20, r25
    3552:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_2,GET_BIT(a_Char,1));
    3556:	fe 01       	movw	r30, r28
    3558:	ed 59       	subi	r30, 0x9D	; 157
    355a:	ff 4f       	sbci	r31, 0xFF	; 255
    355c:	80 81       	ld	r24, Z
    355e:	88 2f       	mov	r24, r24
    3560:	90 e0       	ldi	r25, 0x00	; 0
    3562:	82 70       	andi	r24, 0x02	; 2
    3564:	90 70       	andi	r25, 0x00	; 0
    3566:	95 95       	asr	r25
    3568:	87 95       	ror	r24
    356a:	98 2f       	mov	r25, r24
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	65 e0       	ldi	r22, 0x05	; 5
    3570:	49 2f       	mov	r20, r25
    3572:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_3,GET_BIT(a_Char,2));
    3576:	fe 01       	movw	r30, r28
    3578:	ed 59       	subi	r30, 0x9D	; 157
    357a:	ff 4f       	sbci	r31, 0xFF	; 255
    357c:	80 81       	ld	r24, Z
    357e:	88 2f       	mov	r24, r24
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	84 70       	andi	r24, 0x04	; 4
    3584:	90 70       	andi	r25, 0x00	; 0
    3586:	95 95       	asr	r25
    3588:	87 95       	ror	r24
    358a:	95 95       	asr	r25
    358c:	87 95       	ror	r24
    358e:	98 2f       	mov	r25, r24
    3590:	80 e0       	ldi	r24, 0x00	; 0
    3592:	66 e0       	ldi	r22, 0x06	; 6
    3594:	49 2f       	mov	r20, r25
    3596:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
		GPIO_writePin(LCD_PORT_DATA,LCD_DATA_PIN_4,GET_BIT(a_Char,3));
    359a:	fe 01       	movw	r30, r28
    359c:	ed 59       	subi	r30, 0x9D	; 157
    359e:	ff 4f       	sbci	r31, 0xFF	; 255
    35a0:	80 81       	ld	r24, Z
    35a2:	88 2f       	mov	r24, r24
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	88 70       	andi	r24, 0x08	; 8
    35a8:	90 70       	andi	r25, 0x00	; 0
    35aa:	95 95       	asr	r25
    35ac:	87 95       	ror	r24
    35ae:	95 95       	asr	r25
    35b0:	87 95       	ror	r24
    35b2:	95 95       	asr	r25
    35b4:	87 95       	ror	r24
    35b6:	98 2f       	mov	r25, r24
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	67 e0       	ldi	r22, 0x07	; 7
    35bc:	49 2f       	mov	r20, r25
    35be:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	a0 e8       	ldi	r26, 0x80	; 128
    35c8:	bf e3       	ldi	r27, 0x3F	; 63
    35ca:	89 8f       	std	Y+25, r24	; 0x19
    35cc:	9a 8f       	std	Y+26, r25	; 0x1a
    35ce:	ab 8f       	std	Y+27, r26	; 0x1b
    35d0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	69 8d       	ldd	r22, Y+25	; 0x19
    35d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4a ef       	ldi	r20, 0xFA	; 250
    35e0:	54 e4       	ldi	r21, 0x44	; 68
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8d 8b       	std	Y+21, r24	; 0x15
    35ec:	9e 8b       	std	Y+22, r25	; 0x16
    35ee:	af 8b       	std	Y+23, r26	; 0x17
    35f0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    35f2:	6d 89       	ldd	r22, Y+21	; 0x15
    35f4:	7e 89       	ldd	r23, Y+22	; 0x16
    35f6:	8f 89       	ldd	r24, Y+23	; 0x17
    35f8:	98 8d       	ldd	r25, Y+24	; 0x18
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5f e3       	ldi	r21, 0x3F	; 63
    3602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3606:	88 23       	and	r24, r24
    3608:	2c f4       	brge	.+10     	; 0x3614 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	9c 8b       	std	Y+20, r25	; 0x14
    3610:	8b 8b       	std	Y+19, r24	; 0x13
    3612:	3f c0       	rjmp	.+126    	; 0x3692 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3614:	6d 89       	ldd	r22, Y+21	; 0x15
    3616:	7e 89       	ldd	r23, Y+22	; 0x16
    3618:	8f 89       	ldd	r24, Y+23	; 0x17
    361a:	98 8d       	ldd	r25, Y+24	; 0x18
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	3f ef       	ldi	r19, 0xFF	; 255
    3620:	4f e7       	ldi	r20, 0x7F	; 127
    3622:	57 e4       	ldi	r21, 0x47	; 71
    3624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3628:	18 16       	cp	r1, r24
    362a:	4c f5       	brge	.+82     	; 0x367e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362c:	69 8d       	ldd	r22, Y+25	; 0x19
    362e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3630:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3632:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e2       	ldi	r20, 0x20	; 32
    363a:	51 e4       	ldi	r21, 0x41	; 65
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	bc 01       	movw	r22, r24
    3646:	cd 01       	movw	r24, r26
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9c 8b       	std	Y+20, r25	; 0x14
    3652:	8b 8b       	std	Y+19, r24	; 0x13
    3654:	0f c0       	rjmp	.+30     	; 0x3674 <LCD_displayCharacter+0x7be>
    3656:	88 ec       	ldi	r24, 0xC8	; 200
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	9a 8b       	std	Y+18, r25	; 0x12
    365c:	89 8b       	std	Y+17, r24	; 0x11
    365e:	89 89       	ldd	r24, Y+17	; 0x11
    3660:	9a 89       	ldd	r25, Y+18	; 0x12
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <LCD_displayCharacter+0x7ac>
    3666:	9a 8b       	std	Y+18, r25	; 0x12
    3668:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366a:	8b 89       	ldd	r24, Y+19	; 0x13
    366c:	9c 89       	ldd	r25, Y+20	; 0x14
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	9c 8b       	std	Y+20, r25	; 0x14
    3672:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3674:	8b 89       	ldd	r24, Y+19	; 0x13
    3676:	9c 89       	ldd	r25, Y+20	; 0x14
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	69 f7       	brne	.-38     	; 0x3656 <LCD_displayCharacter+0x7a0>
    367c:	14 c0       	rjmp	.+40     	; 0x36a6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367e:	6d 89       	ldd	r22, Y+21	; 0x15
    3680:	7e 89       	ldd	r23, Y+22	; 0x16
    3682:	8f 89       	ldd	r24, Y+23	; 0x17
    3684:	98 8d       	ldd	r25, Y+24	; 0x18
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9c 8b       	std	Y+20, r25	; 0x14
    3690:	8b 8b       	std	Y+19, r24	; 0x13
    3692:	8b 89       	ldd	r24, Y+19	; 0x13
    3694:	9c 89       	ldd	r25, Y+20	; 0x14
    3696:	98 8b       	std	Y+16, r25	; 0x10
    3698:	8f 87       	std	Y+15, r24	; 0x0f
    369a:	8f 85       	ldd	r24, Y+15	; 0x0f
    369c:	98 89       	ldd	r25, Y+16	; 0x10
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <LCD_displayCharacter+0x7e8>
    36a2:	98 8b       	std	Y+16, r25	; 0x10
    36a4:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1);

		GPIO_writePin(LCD_PORT_CONTROL,LCD_EN,LOGIC_LOW);
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	61 e0       	ldi	r22, 0x01	; 1
    36aa:	40 e0       	ldi	r20, 0x00	; 0
    36ac:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <GPIO_writePin>
    36b0:	80 e0       	ldi	r24, 0x00	; 0
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	a0 e8       	ldi	r26, 0x80	; 128
    36b6:	bf e3       	ldi	r27, 0x3F	; 63
    36b8:	8b 87       	std	Y+11, r24	; 0x0b
    36ba:	9c 87       	std	Y+12, r25	; 0x0c
    36bc:	ad 87       	std	Y+13, r26	; 0x0d
    36be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    36c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    36c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    36c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    36c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    36c8:	20 e0       	ldi	r18, 0x00	; 0
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	4a ef       	ldi	r20, 0xFA	; 250
    36ce:	54 e4       	ldi	r21, 0x44	; 68
    36d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36d4:	dc 01       	movw	r26, r24
    36d6:	cb 01       	movw	r24, r22
    36d8:	8f 83       	std	Y+7, r24	; 0x07
    36da:	98 87       	std	Y+8, r25	; 0x08
    36dc:	a9 87       	std	Y+9, r26	; 0x09
    36de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    36e0:	6f 81       	ldd	r22, Y+7	; 0x07
    36e2:	78 85       	ldd	r23, Y+8	; 0x08
    36e4:	89 85       	ldd	r24, Y+9	; 0x09
    36e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    36e8:	20 e0       	ldi	r18, 0x00	; 0
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	40 e8       	ldi	r20, 0x80	; 128
    36ee:	5f e3       	ldi	r21, 0x3F	; 63
    36f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36f4:	88 23       	and	r24, r24
    36f6:	2c f4       	brge	.+10     	; 0x3702 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	9e 83       	std	Y+6, r25	; 0x06
    36fe:	8d 83       	std	Y+5, r24	; 0x05
    3700:	3f c0       	rjmp	.+126    	; 0x3780 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3702:	6f 81       	ldd	r22, Y+7	; 0x07
    3704:	78 85       	ldd	r23, Y+8	; 0x08
    3706:	89 85       	ldd	r24, Y+9	; 0x09
    3708:	9a 85       	ldd	r25, Y+10	; 0x0a
    370a:	20 e0       	ldi	r18, 0x00	; 0
    370c:	3f ef       	ldi	r19, 0xFF	; 255
    370e:	4f e7       	ldi	r20, 0x7F	; 127
    3710:	57 e4       	ldi	r21, 0x47	; 71
    3712:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3716:	18 16       	cp	r1, r24
    3718:	4c f5       	brge	.+82     	; 0x376c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    371a:	6b 85       	ldd	r22, Y+11	; 0x0b
    371c:	7c 85       	ldd	r23, Y+12	; 0x0c
    371e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3720:	9e 85       	ldd	r25, Y+14	; 0x0e
    3722:	20 e0       	ldi	r18, 0x00	; 0
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	40 e2       	ldi	r20, 0x20	; 32
    3728:	51 e4       	ldi	r21, 0x41	; 65
    372a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    372e:	dc 01       	movw	r26, r24
    3730:	cb 01       	movw	r24, r22
    3732:	bc 01       	movw	r22, r24
    3734:	cd 01       	movw	r24, r26
    3736:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    373a:	dc 01       	movw	r26, r24
    373c:	cb 01       	movw	r24, r22
    373e:	9e 83       	std	Y+6, r25	; 0x06
    3740:	8d 83       	std	Y+5, r24	; 0x05
    3742:	0f c0       	rjmp	.+30     	; 0x3762 <LCD_displayCharacter+0x8ac>
    3744:	88 ec       	ldi	r24, 0xC8	; 200
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	9c 83       	std	Y+4, r25	; 0x04
    374a:	8b 83       	std	Y+3, r24	; 0x03
    374c:	8b 81       	ldd	r24, Y+3	; 0x03
    374e:	9c 81       	ldd	r25, Y+4	; 0x04
    3750:	01 97       	sbiw	r24, 0x01	; 1
    3752:	f1 f7       	brne	.-4      	; 0x3750 <LCD_displayCharacter+0x89a>
    3754:	9c 83       	std	Y+4, r25	; 0x04
    3756:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3758:	8d 81       	ldd	r24, Y+5	; 0x05
    375a:	9e 81       	ldd	r25, Y+6	; 0x06
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	9e 83       	std	Y+6, r25	; 0x06
    3760:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3762:	8d 81       	ldd	r24, Y+5	; 0x05
    3764:	9e 81       	ldd	r25, Y+6	; 0x06
    3766:	00 97       	sbiw	r24, 0x00	; 0
    3768:	69 f7       	brne	.-38     	; 0x3744 <LCD_displayCharacter+0x88e>
    376a:	14 c0       	rjmp	.+40     	; 0x3794 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    376c:	6f 81       	ldd	r22, Y+7	; 0x07
    376e:	78 85       	ldd	r23, Y+8	; 0x08
    3770:	89 85       	ldd	r24, Y+9	; 0x09
    3772:	9a 85       	ldd	r25, Y+10	; 0x0a
    3774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	9e 83       	std	Y+6, r25	; 0x06
    377e:	8d 83       	std	Y+5, r24	; 0x05
    3780:	8d 81       	ldd	r24, Y+5	; 0x05
    3782:	9e 81       	ldd	r25, Y+6	; 0x06
    3784:	9a 83       	std	Y+2, r25	; 0x02
    3786:	89 83       	std	Y+1, r24	; 0x01
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	01 97       	sbiw	r24, 0x01	; 1
    378e:	f1 f7       	brne	.-4      	; 0x378c <LCD_displayCharacter+0x8d6>
    3790:	9a 83       	std	Y+2, r25	; 0x02
    3792:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
	#endif



}
    3794:	cd 59       	subi	r28, 0x9D	; 157
    3796:	df 4f       	sbci	r29, 0xFF	; 255
    3798:	0f b6       	in	r0, 0x3f	; 63
    379a:	f8 94       	cli
    379c:	de bf       	out	0x3e, r29	; 62
    379e:	0f be       	out	0x3f, r0	; 63
    37a0:	cd bf       	out	0x3d, r28	; 61
    37a2:	cf 91       	pop	r28
    37a4:	df 91       	pop	r29
    37a6:	1f 91       	pop	r17
    37a8:	0f 91       	pop	r16
    37aa:	08 95       	ret

000037ac <LCD_init>:
/*
 * Description :
 * Function responsible for initialization of the LCD
 */

void LCD_init(void){
    37ac:	df 93       	push	r29
    37ae:	cf 93       	push	r28
    37b0:	cd b7       	in	r28, 0x3d	; 61
    37b2:	de b7       	in	r29, 0x3e	; 62
    37b4:	2e 97       	sbiw	r28, 0x0e	; 14
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	f8 94       	cli
    37ba:	de bf       	out	0x3e, r29	; 62
    37bc:	0f be       	out	0x3f, r0	; 63
    37be:	cd bf       	out	0x3d, r28	; 61
	/*
	 *  Setup RS & EN as output PINS
	 */
	GPIO_setupPinDirection(LCD_PORT_CONTROL,LCD_RS,PIN_OUTPUT);
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	60 e0       	ldi	r22, 0x00	; 0
    37c4:	41 e0       	ldi	r20, 0x01	; 1
    37c6:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_PORT_CONTROL,LCD_EN,PIN_OUTPUT);
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	61 e0       	ldi	r22, 0x01	; 1
    37ce:	41 e0       	ldi	r20, 0x01	; 1
    37d0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
#if(NUMBER_OF_BITS==8)
	GPIO_setupPortDirection(LCD_PORT_DATA,PORT_OUTPUT);


#elif(NUMBER_OF_BITS==4)
	GPIO_setupPinDirection(LCD_PORT_DATA,LCD_DATA_PIN_1,PIN_OUTPUT);
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	64 e0       	ldi	r22, 0x04	; 4
    37d8:	41 e0       	ldi	r20, 0x01	; 1
    37da:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_PORT_DATA,LCD_DATA_PIN_2,PIN_OUTPUT);
    37de:	80 e0       	ldi	r24, 0x00	; 0
    37e0:	65 e0       	ldi	r22, 0x05	; 5
    37e2:	41 e0       	ldi	r20, 0x01	; 1
    37e4:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_PORT_DATA,LCD_DATA_PIN_3,PIN_OUTPUT);
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	66 e0       	ldi	r22, 0x06	; 6
    37ec:	41 e0       	ldi	r20, 0x01	; 1
    37ee:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_PORT_DATA,LCD_DATA_PIN_4,PIN_OUTPUT);
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	67 e0       	ldi	r22, 0x07	; 7
    37f6:	41 e0       	ldi	r20, 0x01	; 1
    37f8:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <GPIO_setupPinDirection>
    37fc:	80 e0       	ldi	r24, 0x00	; 0
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	a0 ea       	ldi	r26, 0xA0	; 160
    3802:	b1 e4       	ldi	r27, 0x41	; 65
    3804:	8b 87       	std	Y+11, r24	; 0x0b
    3806:	9c 87       	std	Y+12, r25	; 0x0c
    3808:	ad 87       	std	Y+13, r26	; 0x0d
    380a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    380c:	6b 85       	ldd	r22, Y+11	; 0x0b
    380e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3810:	8d 85       	ldd	r24, Y+13	; 0x0d
    3812:	9e 85       	ldd	r25, Y+14	; 0x0e
    3814:	20 e0       	ldi	r18, 0x00	; 0
    3816:	30 e0       	ldi	r19, 0x00	; 0
    3818:	4a ef       	ldi	r20, 0xFA	; 250
    381a:	54 e4       	ldi	r21, 0x44	; 68
    381c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3820:	dc 01       	movw	r26, r24
    3822:	cb 01       	movw	r24, r22
    3824:	8f 83       	std	Y+7, r24	; 0x07
    3826:	98 87       	std	Y+8, r25	; 0x08
    3828:	a9 87       	std	Y+9, r26	; 0x09
    382a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    382c:	6f 81       	ldd	r22, Y+7	; 0x07
    382e:	78 85       	ldd	r23, Y+8	; 0x08
    3830:	89 85       	ldd	r24, Y+9	; 0x09
    3832:	9a 85       	ldd	r25, Y+10	; 0x0a
    3834:	20 e0       	ldi	r18, 0x00	; 0
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	40 e8       	ldi	r20, 0x80	; 128
    383a:	5f e3       	ldi	r21, 0x3F	; 63
    383c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3840:	88 23       	and	r24, r24
    3842:	2c f4       	brge	.+10     	; 0x384e <LCD_init+0xa2>
		__ticks = 1;
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	90 e0       	ldi	r25, 0x00	; 0
    3848:	9e 83       	std	Y+6, r25	; 0x06
    384a:	8d 83       	std	Y+5, r24	; 0x05
    384c:	3f c0       	rjmp	.+126    	; 0x38cc <LCD_init+0x120>
	else if (__tmp > 65535)
    384e:	6f 81       	ldd	r22, Y+7	; 0x07
    3850:	78 85       	ldd	r23, Y+8	; 0x08
    3852:	89 85       	ldd	r24, Y+9	; 0x09
    3854:	9a 85       	ldd	r25, Y+10	; 0x0a
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	3f ef       	ldi	r19, 0xFF	; 255
    385a:	4f e7       	ldi	r20, 0x7F	; 127
    385c:	57 e4       	ldi	r21, 0x47	; 71
    385e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3862:	18 16       	cp	r1, r24
    3864:	4c f5       	brge	.+82     	; 0x38b8 <LCD_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3866:	6b 85       	ldd	r22, Y+11	; 0x0b
    3868:	7c 85       	ldd	r23, Y+12	; 0x0c
    386a:	8d 85       	ldd	r24, Y+13	; 0x0d
    386c:	9e 85       	ldd	r25, Y+14	; 0x0e
    386e:	20 e0       	ldi	r18, 0x00	; 0
    3870:	30 e0       	ldi	r19, 0x00	; 0
    3872:	40 e2       	ldi	r20, 0x20	; 32
    3874:	51 e4       	ldi	r21, 0x41	; 65
    3876:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    387a:	dc 01       	movw	r26, r24
    387c:	cb 01       	movw	r24, r22
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3886:	dc 01       	movw	r26, r24
    3888:	cb 01       	movw	r24, r22
    388a:	9e 83       	std	Y+6, r25	; 0x06
    388c:	8d 83       	std	Y+5, r24	; 0x05
    388e:	0f c0       	rjmp	.+30     	; 0x38ae <LCD_init+0x102>
    3890:	88 ec       	ldi	r24, 0xC8	; 200
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	9c 83       	std	Y+4, r25	; 0x04
    3896:	8b 83       	std	Y+3, r24	; 0x03
    3898:	8b 81       	ldd	r24, Y+3	; 0x03
    389a:	9c 81       	ldd	r25, Y+4	; 0x04
    389c:	01 97       	sbiw	r24, 0x01	; 1
    389e:	f1 f7       	brne	.-4      	; 0x389c <LCD_init+0xf0>
    38a0:	9c 83       	std	Y+4, r25	; 0x04
    38a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38a4:	8d 81       	ldd	r24, Y+5	; 0x05
    38a6:	9e 81       	ldd	r25, Y+6	; 0x06
    38a8:	01 97       	sbiw	r24, 0x01	; 1
    38aa:	9e 83       	std	Y+6, r25	; 0x06
    38ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ae:	8d 81       	ldd	r24, Y+5	; 0x05
    38b0:	9e 81       	ldd	r25, Y+6	; 0x06
    38b2:	00 97       	sbiw	r24, 0x00	; 0
    38b4:	69 f7       	brne	.-38     	; 0x3890 <LCD_init+0xe4>
    38b6:	14 c0       	rjmp	.+40     	; 0x38e0 <LCD_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38b8:	6f 81       	ldd	r22, Y+7	; 0x07
    38ba:	78 85       	ldd	r23, Y+8	; 0x08
    38bc:	89 85       	ldd	r24, Y+9	; 0x09
    38be:	9a 85       	ldd	r25, Y+10	; 0x0a
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	9e 83       	std	Y+6, r25	; 0x06
    38ca:	8d 83       	std	Y+5, r24	; 0x05
    38cc:	8d 81       	ldd	r24, Y+5	; 0x05
    38ce:	9e 81       	ldd	r25, Y+6	; 0x06
    38d0:	9a 83       	std	Y+2, r25	; 0x02
    38d2:	89 83       	std	Y+1, r24	; 0x01
    38d4:	89 81       	ldd	r24, Y+1	; 0x01
    38d6:	9a 81       	ldd	r25, Y+2	; 0x02
    38d8:	01 97       	sbiw	r24, 0x01	; 1
    38da:	f1 f7       	brne	.-4      	; 0x38d8 <LCD_init+0x12c>
    38dc:	9a 83       	std	Y+2, r25	; 0x02
    38de:	89 83       	std	Y+1, r24	; 0x01
	 */
#if(NUMBER_OF_BITS==8)
	LCD_sendCommand(LCD_COMMAND_TWO_LINE_8_BIT);

#elif(NUMBER_OF_BITS==4)
	LCD_sendCommand(LCD_COMMAND_4_BIT_INIT_1);
    38e0:	83 e3       	ldi	r24, 0x33	; 51
    38e2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
	LCD_sendCommand(LCD_COMMAND_4_BIT_INIT_2);
    38e6:	82 e3       	ldi	r24, 0x32	; 50
    38e8:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
	LCD_sendCommand(LCD_COMMAND_TWO_LINE_4_BIT);
    38ec:	88 e2       	ldi	r24, 0x28	; 40
    38ee:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>


	/*
	 * close the cursor
	 */
	LCD_sendCommand(LCD_COMMAND_CURSOR_OFF);
    38f2:	8c e0       	ldi	r24, 0x0C	; 12
    38f4:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
	/*
	 * clear the screen
	 */
	LCD_sendCommand(LCD_COMMAND_CLEAR_SCREEN);
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
}
    38fe:	2e 96       	adiw	r28, 0x0e	; 14
    3900:	0f b6       	in	r0, 0x3f	; 63
    3902:	f8 94       	cli
    3904:	de bf       	out	0x3e, r29	; 62
    3906:	0f be       	out	0x3f, r0	; 63
    3908:	cd bf       	out	0x3d, r28	; 61
    390a:	cf 91       	pop	r28
    390c:	df 91       	pop	r29
    390e:	08 95       	ret

00003910 <LCD_displayString>:

/*
 * Description :
 * Function responsible for displaying a String on the LCD
 */
void LCD_displayString(const char * a_str){
    3910:	df 93       	push	r29
    3912:	cf 93       	push	r28
    3914:	00 d0       	rcall	.+0      	; 0x3916 <LCD_displayString+0x6>
    3916:	0f 92       	push	r0
    3918:	cd b7       	in	r28, 0x3d	; 61
    391a:	de b7       	in	r29, 0x3e	; 62
    391c:	9b 83       	std	Y+3, r25	; 0x03
    391e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    3920:	19 82       	std	Y+1, r1	; 0x01
    3922:	0e c0       	rjmp	.+28     	; 0x3940 <LCD_displayString+0x30>
	while(a_str[counter]!='\0'){
		LCD_displayCharacter(a_str[counter]);
    3924:	89 81       	ldd	r24, Y+1	; 0x01
    3926:	28 2f       	mov	r18, r24
    3928:	30 e0       	ldi	r19, 0x00	; 0
    392a:	8a 81       	ldd	r24, Y+2	; 0x02
    392c:	9b 81       	ldd	r25, Y+3	; 0x03
    392e:	fc 01       	movw	r30, r24
    3930:	e2 0f       	add	r30, r18
    3932:	f3 1f       	adc	r31, r19
    3934:	80 81       	ld	r24, Z
    3936:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayCharacter>
		counter++;
    393a:	89 81       	ldd	r24, Y+1	; 0x01
    393c:	8f 5f       	subi	r24, 0xFF	; 255
    393e:	89 83       	std	Y+1, r24	; 0x01
 * Description :
 * Function responsible for displaying a String on the LCD
 */
void LCD_displayString(const char * a_str){
	uint8 counter=0;
	while(a_str[counter]!='\0'){
    3940:	89 81       	ldd	r24, Y+1	; 0x01
    3942:	28 2f       	mov	r18, r24
    3944:	30 e0       	ldi	r19, 0x00	; 0
    3946:	8a 81       	ldd	r24, Y+2	; 0x02
    3948:	9b 81       	ldd	r25, Y+3	; 0x03
    394a:	fc 01       	movw	r30, r24
    394c:	e2 0f       	add	r30, r18
    394e:	f3 1f       	adc	r31, r19
    3950:	80 81       	ld	r24, Z
    3952:	88 23       	and	r24, r24
    3954:	39 f7       	brne	.-50     	; 0x3924 <LCD_displayString+0x14>
		LCD_displayCharacter(a_str[counter]);
		counter++;
	}
}
    3956:	0f 90       	pop	r0
    3958:	0f 90       	pop	r0
    395a:	0f 90       	pop	r0
    395c:	cf 91       	pop	r28
    395e:	df 91       	pop	r29
    3960:	08 95       	ret

00003962 <LCD_moveCursor>:

/*
 * Description :
 * Function responsible for moving the cursor to a certain position
 */
void LCD_moveCursor(uint8 a_row,uint8 a_col){
    3962:	df 93       	push	r29
    3964:	cf 93       	push	r28
    3966:	00 d0       	rcall	.+0      	; 0x3968 <LCD_moveCursor+0x6>
    3968:	00 d0       	rcall	.+0      	; 0x396a <LCD_moveCursor+0x8>
    396a:	0f 92       	push	r0
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	8a 83       	std	Y+2, r24	; 0x02
    3972:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address=0;
    3974:	19 82       	std	Y+1, r1	; 0x01
	switch(a_row){
    3976:	8a 81       	ldd	r24, Y+2	; 0x02
    3978:	28 2f       	mov	r18, r24
    397a:	30 e0       	ldi	r19, 0x00	; 0
    397c:	3d 83       	std	Y+5, r19	; 0x05
    397e:	2c 83       	std	Y+4, r18	; 0x04
    3980:	8c 81       	ldd	r24, Y+4	; 0x04
    3982:	9d 81       	ldd	r25, Y+5	; 0x05
    3984:	81 30       	cpi	r24, 0x01	; 1
    3986:	91 05       	cpc	r25, r1
    3988:	c9 f0       	breq	.+50     	; 0x39bc <LCD_moveCursor+0x5a>
    398a:	2c 81       	ldd	r18, Y+4	; 0x04
    398c:	3d 81       	ldd	r19, Y+5	; 0x05
    398e:	22 30       	cpi	r18, 0x02	; 2
    3990:	31 05       	cpc	r19, r1
    3992:	2c f4       	brge	.+10     	; 0x399e <LCD_moveCursor+0x3c>
    3994:	8c 81       	ldd	r24, Y+4	; 0x04
    3996:	9d 81       	ldd	r25, Y+5	; 0x05
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	61 f0       	breq	.+24     	; 0x39b4 <LCD_moveCursor+0x52>
    399c:	1d c0       	rjmp	.+58     	; 0x39d8 <LCD_moveCursor+0x76>
    399e:	2c 81       	ldd	r18, Y+4	; 0x04
    39a0:	3d 81       	ldd	r19, Y+5	; 0x05
    39a2:	22 30       	cpi	r18, 0x02	; 2
    39a4:	31 05       	cpc	r19, r1
    39a6:	79 f0       	breq	.+30     	; 0x39c6 <LCD_moveCursor+0x64>
    39a8:	8c 81       	ldd	r24, Y+4	; 0x04
    39aa:	9d 81       	ldd	r25, Y+5	; 0x05
    39ac:	83 30       	cpi	r24, 0x03	; 3
    39ae:	91 05       	cpc	r25, r1
    39b0:	79 f0       	breq	.+30     	; 0x39d0 <LCD_moveCursor+0x6e>
    39b2:	12 c0       	rjmp	.+36     	; 0x39d8 <LCD_moveCursor+0x76>
	case 0:
		Address=0x80|a_col;
    39b4:	8b 81       	ldd	r24, Y+3	; 0x03
    39b6:	80 68       	ori	r24, 0x80	; 128
    39b8:	89 83       	std	Y+1, r24	; 0x01
    39ba:	0e c0       	rjmp	.+28     	; 0x39d8 <LCD_moveCursor+0x76>
		break;
	case 1:
		Address=(a_col+0x40)|0x80;
    39bc:	8b 81       	ldd	r24, Y+3	; 0x03
    39be:	80 5c       	subi	r24, 0xC0	; 192
    39c0:	80 68       	ori	r24, 0x80	; 128
    39c2:	89 83       	std	Y+1, r24	; 0x01
    39c4:	09 c0       	rjmp	.+18     	; 0x39d8 <LCD_moveCursor+0x76>
		break;
	case 2:
		Address=(a_col+0x10)|0x80;
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	80 5f       	subi	r24, 0xF0	; 240
    39ca:	80 68       	ori	r24, 0x80	; 128
    39cc:	89 83       	std	Y+1, r24	; 0x01
    39ce:	04 c0       	rjmp	.+8      	; 0x39d8 <LCD_moveCursor+0x76>
		break;
	case 3:
		Address=(a_col+0x50)|0x80;
    39d0:	8b 81       	ldd	r24, Y+3	; 0x03
    39d2:	80 5b       	subi	r24, 0xB0	; 176
    39d4:	80 68       	ori	r24, 0x80	; 128
    39d6:	89 83       	std	Y+1, r24	; 0x01
		break;

	}
	LCD_sendCommand(Address);
    39d8:	89 81       	ldd	r24, Y+1	; 0x01
    39da:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
}
    39de:	0f 90       	pop	r0
    39e0:	0f 90       	pop	r0
    39e2:	0f 90       	pop	r0
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <LCD_displayStringRowCol>:

/*
 * Description :
 * Function responsible for displaying a String on the LCD in a certain position
 */
void LCD_displayStringRowCol(const char * a_str,uint8 a_row,uint8 a_col){
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	00 d0       	rcall	.+0      	; 0x39f4 <LCD_displayStringRowCol+0x6>
    39f4:	00 d0       	rcall	.+0      	; 0x39f6 <LCD_displayStringRowCol+0x8>
    39f6:	cd b7       	in	r28, 0x3d	; 61
    39f8:	de b7       	in	r29, 0x3e	; 62
    39fa:	9a 83       	std	Y+2, r25	; 0x02
    39fc:	89 83       	std	Y+1, r24	; 0x01
    39fe:	6b 83       	std	Y+3, r22	; 0x03
    3a00:	4c 83       	std	Y+4, r20	; 0x04
	LCD_moveCursor(a_row,a_col);
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	6c 81       	ldd	r22, Y+4	; 0x04
    3a06:	0e 94 b1 1c 	call	0x3962	; 0x3962 <LCD_moveCursor>
	LCD_displayString(a_str);
    3a0a:	89 81       	ldd	r24, Y+1	; 0x01
    3a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a0e:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
}
    3a12:	0f 90       	pop	r0
    3a14:	0f 90       	pop	r0
    3a16:	0f 90       	pop	r0
    3a18:	0f 90       	pop	r0
    3a1a:	cf 91       	pop	r28
    3a1c:	df 91       	pop	r29
    3a1e:	08 95       	ret

00003a20 <LCD_clearScreen>:
/*
 * Description :
 * Function responsible for clearing the LCD
 */
void LCD_clearScreen(void){
    3a20:	df 93       	push	r29
    3a22:	cf 93       	push	r28
    3a24:	cd b7       	in	r28, 0x3d	; 61
    3a26:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_COMMAND_CLEAR_SCREEN);
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
}
    3a2e:	cf 91       	pop	r28
    3a30:	df 91       	pop	r29
    3a32:	08 95       	ret

00003a34 <LCD_intgerToString>:

/*
 * Description :
 * Function responsible for displaying an integer on the LCD
 */
void LCD_intgerToString(uint16 a_num){
    3a34:	df 93       	push	r29
    3a36:	cf 93       	push	r28
    3a38:	cd b7       	in	r28, 0x3d	; 61
    3a3a:	de b7       	in	r29, 0x3e	; 62
    3a3c:	62 97       	sbiw	r28, 0x12	; 18
    3a3e:	0f b6       	in	r0, 0x3f	; 63
    3a40:	f8 94       	cli
    3a42:	de bf       	out	0x3e, r29	; 62
    3a44:	0f be       	out	0x3f, r0	; 63
    3a46:	cd bf       	out	0x3d, r28	; 61
    3a48:	9a 8b       	std	Y+18, r25	; 0x12
    3a4a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16];
	itoa(a_num,buff,10);
    3a4c:	89 89       	ldd	r24, Y+17	; 0x11
    3a4e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a50:	9e 01       	movw	r18, r28
    3a52:	2f 5f       	subi	r18, 0xFF	; 255
    3a54:	3f 4f       	sbci	r19, 0xFF	; 255
    3a56:	b9 01       	movw	r22, r18
    3a58:	4a e0       	ldi	r20, 0x0A	; 10
    3a5a:	50 e0       	ldi	r21, 0x00	; 0
    3a5c:	0e 94 af 1f 	call	0x3f5e	; 0x3f5e <itoa>
	LCD_displayString(buff);
    3a60:	ce 01       	movw	r24, r28
    3a62:	01 96       	adiw	r24, 0x01	; 1
    3a64:	0e 94 88 1c 	call	0x3910	; 0x3910 <LCD_displayString>
}
    3a68:	62 96       	adiw	r28, 0x12	; 18
    3a6a:	0f b6       	in	r0, 0x3f	; 63
    3a6c:	f8 94       	cli
    3a6e:	de bf       	out	0x3e, r29	; 62
    3a70:	0f be       	out	0x3f, r0	; 63
    3a72:	cd bf       	out	0x3d, r28	; 61
    3a74:	cf 91       	pop	r28
    3a76:	df 91       	pop	r29
    3a78:	08 95       	ret

00003a7a <LCD_CreateCustomCharacter>:
/*
 * Description :
 * Function responsible for creating a custom character on the LCD
 */
void LCD_CreateCustomCharacter(uint8 *pucPattern,const uint8 cLocation)
{
    3a7a:	df 93       	push	r29
    3a7c:	cf 93       	push	r28
    3a7e:	00 d0       	rcall	.+0      	; 0x3a80 <LCD_CreateCustomCharacter+0x6>
    3a80:	00 d0       	rcall	.+0      	; 0x3a82 <LCD_CreateCustomCharacter+0x8>
    3a82:	cd b7       	in	r28, 0x3d	; 61
    3a84:	de b7       	in	r29, 0x3e	; 62
    3a86:	9b 83       	std	Y+3, r25	; 0x03
    3a88:	8a 83       	std	Y+2, r24	; 0x02
    3a8a:	6c 83       	std	Y+4, r22	; 0x04
    uint8 iLoop=0;
    3a8c:	19 82       	std	Y+1, r1	; 0x01
    LCD_sendCommand(0x40+(cLocation*8)); //Send the Address of CGRAM
    3a8e:	8c 81       	ldd	r24, Y+4	; 0x04
    3a90:	88 2f       	mov	r24, r24
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	08 96       	adiw	r24, 0x08	; 8
    3a96:	88 0f       	add	r24, r24
    3a98:	99 1f       	adc	r25, r25
    3a9a:	88 0f       	add	r24, r24
    3a9c:	99 1f       	adc	r25, r25
    3a9e:	88 0f       	add	r24, r24
    3aa0:	99 1f       	adc	r25, r25
    3aa2:	0e 94 e0 12 	call	0x25c0	; 0x25c0 <LCD_sendCommand>
    for(iLoop=0; iLoop<8; iLoop++)
    3aa6:	19 82       	std	Y+1, r1	; 0x01
    3aa8:	0e c0       	rjmp	.+28     	; 0x3ac6 <LCD_CreateCustomCharacter+0x4c>
        LCD_displayCharacter(pucPattern[iLoop]); //Pass the bytes of pattern on LCD
    3aaa:	89 81       	ldd	r24, Y+1	; 0x01
    3aac:	28 2f       	mov	r18, r24
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ab2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ab4:	fc 01       	movw	r30, r24
    3ab6:	e2 0f       	add	r30, r18
    3ab8:	f3 1f       	adc	r31, r19
    3aba:	80 81       	ld	r24, Z
    3abc:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <LCD_displayCharacter>
 */
void LCD_CreateCustomCharacter(uint8 *pucPattern,const uint8 cLocation)
{
    uint8 iLoop=0;
    LCD_sendCommand(0x40+(cLocation*8)); //Send the Address of CGRAM
    for(iLoop=0; iLoop<8; iLoop++)
    3ac0:	89 81       	ldd	r24, Y+1	; 0x01
    3ac2:	8f 5f       	subi	r24, 0xFF	; 255
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	89 81       	ldd	r24, Y+1	; 0x01
    3ac8:	88 30       	cpi	r24, 0x08	; 8
    3aca:	78 f3       	brcs	.-34     	; 0x3aaa <LCD_CreateCustomCharacter+0x30>
        LCD_displayCharacter(pucPattern[iLoop]); //Pass the bytes of pattern on LCD
}
    3acc:	0f 90       	pop	r0
    3ace:	0f 90       	pop	r0
    3ad0:	0f 90       	pop	r0
    3ad2:	0f 90       	pop	r0
    3ad4:	cf 91       	pop	r28
    3ad6:	df 91       	pop	r29
    3ad8:	08 95       	ret

00003ada <Timer1_init>:
static volatile void (*g_callBackPtr)(void) = NULL_PTR;
/*
 * Description :
 * Function to initialize the Timer driver
 */
void Timer1_init(const Timer1_ConfigType * Config_Ptr){
    3ada:	df 93       	push	r29
    3adc:	cf 93       	push	r28
    3ade:	00 d0       	rcall	.+0      	; 0x3ae0 <Timer1_init+0x6>
    3ae0:	00 d0       	rcall	.+0      	; 0x3ae2 <Timer1_init+0x8>
    3ae2:	cd b7       	in	r28, 0x3d	; 61
    3ae4:	de b7       	in	r29, 0x3e	; 62
    3ae6:	9a 83       	std	Y+2, r25	; 0x02
    3ae8:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_Ptr->mode){
    3aea:	e9 81       	ldd	r30, Y+1	; 0x01
    3aec:	fa 81       	ldd	r31, Y+2	; 0x02
    3aee:	85 81       	ldd	r24, Z+5	; 0x05
    3af0:	28 2f       	mov	r18, r24
    3af2:	30 e0       	ldi	r19, 0x00	; 0
    3af4:	3c 83       	std	Y+4, r19	; 0x04
    3af6:	2b 83       	std	Y+3, r18	; 0x03
    3af8:	8b 81       	ldd	r24, Y+3	; 0x03
    3afa:	9c 81       	ldd	r25, Y+4	; 0x04
    3afc:	00 97       	sbiw	r24, 0x00	; 0
    3afe:	31 f0       	breq	.+12     	; 0x3b0c <Timer1_init+0x32>
    3b00:	2b 81       	ldd	r18, Y+3	; 0x03
    3b02:	3c 81       	ldd	r19, Y+4	; 0x04
    3b04:	24 30       	cpi	r18, 0x04	; 4
    3b06:	31 05       	cpc	r19, r1
    3b08:	e1 f0       	breq	.+56     	; 0x3b42 <Timer1_init+0x68>
    3b0a:	3a c0       	rjmp	.+116    	; 0x3b80 <Timer1_init+0xa6>
	case NORMAL:
		/*
		 * Put the inital value in TCNT1
		 */
		TCNT1 = Config_Ptr->initial_value;
    3b0c:	ac e4       	ldi	r26, 0x4C	; 76
    3b0e:	b0 e0       	ldi	r27, 0x00	; 0
    3b10:	e9 81       	ldd	r30, Y+1	; 0x01
    3b12:	fa 81       	ldd	r31, Y+2	; 0x02
    3b14:	80 81       	ld	r24, Z
    3b16:	91 81       	ldd	r25, Z+1	; 0x01
    3b18:	11 96       	adiw	r26, 0x01	; 1
    3b1a:	9c 93       	st	X, r25
    3b1c:	8e 93       	st	-X, r24
		/*
		 * clear the register for normal mode
		 * set FOC1A=1 to use unit A
		 */
		TCCR1A= (1<<FOC1A);
    3b1e:	ef e4       	ldi	r30, 0x4F	; 79
    3b20:	f0 e0       	ldi	r31, 0x00	; 0
    3b22:	88 e0       	ldi	r24, 0x08	; 8
    3b24:	80 83       	st	Z, r24
		/*
		 * Set the prescaler
		 */
		TCCR1B= Config_Ptr->prescaler;
    3b26:	ae e4       	ldi	r26, 0x4E	; 78
    3b28:	b0 e0       	ldi	r27, 0x00	; 0
    3b2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b2e:	84 81       	ldd	r24, Z+4	; 0x04
    3b30:	8c 93       	st	X, r24

		/*
		 * Enable OverFlow Mode Interrupt
		 */
		SET_BIT(TIMSK,TOIE1);
    3b32:	a9 e5       	ldi	r26, 0x59	; 89
    3b34:	b0 e0       	ldi	r27, 0x00	; 0
    3b36:	e9 e5       	ldi	r30, 0x59	; 89
    3b38:	f0 e0       	ldi	r31, 0x00	; 0
    3b3a:	80 81       	ld	r24, Z
    3b3c:	84 60       	ori	r24, 0x04	; 4
    3b3e:	8c 93       	st	X, r24
    3b40:	1f c0       	rjmp	.+62     	; 0x3b80 <Timer1_init+0xa6>
		break;
	case COMPARE:
		/*
		 * Reset the timer
		 */
		TCNT1 = 0;
    3b42:	ec e4       	ldi	r30, 0x4C	; 76
    3b44:	f0 e0       	ldi	r31, 0x00	; 0
    3b46:	11 82       	std	Z+1, r1	; 0x01
    3b48:	10 82       	st	Z, r1
		/*
		 * Set the Compare Value
		 */
		OCR1A = Config_Ptr->compare_value;
    3b4a:	aa e4       	ldi	r26, 0x4A	; 74
    3b4c:	b0 e0       	ldi	r27, 0x00	; 0
    3b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b50:	fa 81       	ldd	r31, Y+2	; 0x02
    3b52:	82 81       	ldd	r24, Z+2	; 0x02
    3b54:	93 81       	ldd	r25, Z+3	; 0x03
    3b56:	11 96       	adiw	r26, 0x01	; 1
    3b58:	9c 93       	st	X, r25
    3b5a:	8e 93       	st	-X, r24
		/*
		 *  set FOC1A=1 to use unit A
		 */
		TCCR1A = (1<<FOC1A);
    3b5c:	ef e4       	ldi	r30, 0x4F	; 79
    3b5e:	f0 e0       	ldi	r31, 0x00	; 0
    3b60:	88 e0       	ldi	r24, 0x08	; 8
    3b62:	80 83       	st	Z, r24
		/*
		 * Set the Prescaler
		 * Configure it to compare mode
		 */
		TCCR1B = (1<<WGM12) | Config_Ptr->prescaler;
    3b64:	ae e4       	ldi	r26, 0x4E	; 78
    3b66:	b0 e0       	ldi	r27, 0x00	; 0
    3b68:	e9 81       	ldd	r30, Y+1	; 0x01
    3b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b6c:	84 81       	ldd	r24, Z+4	; 0x04
    3b6e:	88 60       	ori	r24, 0x08	; 8
    3b70:	8c 93       	st	X, r24

		/* Enable Timer1 Compare A Interrupt */
		SET_BIT(TIMSK,OCIE1A);
    3b72:	a9 e5       	ldi	r26, 0x59	; 89
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	e9 e5       	ldi	r30, 0x59	; 89
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	80 81       	ld	r24, Z
    3b7c:	80 61       	ori	r24, 0x10	; 16
    3b7e:	8c 93       	st	X, r24



	}

}
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	0f 90       	pop	r0
    3b86:	0f 90       	pop	r0
    3b88:	cf 91       	pop	r28
    3b8a:	df 91       	pop	r29
    3b8c:	08 95       	ret

00003b8e <Timer1_deInit>:

/*
 * Description :
 * Function to disable the Timer1 driver
 */
void Timer1_deInit(void){
    3b8e:	df 93       	push	r29
    3b90:	cf 93       	push	r28
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    3b96:	ec e4       	ldi	r30, 0x4C	; 76
    3b98:	f0 e0       	ldi	r31, 0x00	; 0
    3b9a:	11 82       	std	Z+1, r1	; 0x01
    3b9c:	10 82       	st	Z, r1
	OCR1A = 0;
    3b9e:	ea e4       	ldi	r30, 0x4A	; 74
    3ba0:	f0 e0       	ldi	r31, 0x00	; 0
    3ba2:	11 82       	std	Z+1, r1	; 0x01
    3ba4:	10 82       	st	Z, r1
	TCCR1A= 0;
    3ba6:	ef e4       	ldi	r30, 0x4F	; 79
    3ba8:	f0 e0       	ldi	r31, 0x00	; 0
    3baa:	10 82       	st	Z, r1
	TCCR1B = 0;
    3bac:	ee e4       	ldi	r30, 0x4E	; 78
    3bae:	f0 e0       	ldi	r31, 0x00	; 0
    3bb0:	10 82       	st	Z, r1
	TIMSK &= ~((1 << TOIE1) | (1 << OCIE1A));
    3bb2:	a9 e5       	ldi	r26, 0x59	; 89
    3bb4:	b0 e0       	ldi	r27, 0x00	; 0
    3bb6:	e9 e5       	ldi	r30, 0x59	; 89
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	80 81       	ld	r24, Z
    3bbc:	8b 7e       	andi	r24, 0xEB	; 235
    3bbe:	8c 93       	st	X, r24

}
    3bc0:	cf 91       	pop	r28
    3bc2:	df 91       	pop	r29
    3bc4:	08 95       	ret

00003bc6 <Timer1_setCallBack>:

/*
 * Description :
 * Function to set the Call Back function address
 */
void Timer1_setCallBack(void(*a_ptr)(void)){
    3bc6:	df 93       	push	r29
    3bc8:	cf 93       	push	r28
    3bca:	00 d0       	rcall	.+0      	; 0x3bcc <Timer1_setCallBack+0x6>
    3bcc:	cd b7       	in	r28, 0x3d	; 61
    3bce:	de b7       	in	r29, 0x3e	; 62
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr;
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    3bd8:	90 93 2e 01 	sts	0x012E, r25
    3bdc:	80 93 2d 01 	sts	0x012D, r24
}
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	cf 91       	pop	r28
    3be6:	df 91       	pop	r29
    3be8:	08 95       	ret

00003bea <__vector_9>:
ISR(TIMER1_OVF_vect){
    3bea:	1f 92       	push	r1
    3bec:	0f 92       	push	r0
    3bee:	0f b6       	in	r0, 0x3f	; 63
    3bf0:	0f 92       	push	r0
    3bf2:	11 24       	eor	r1, r1
    3bf4:	2f 93       	push	r18
    3bf6:	3f 93       	push	r19
    3bf8:	4f 93       	push	r20
    3bfa:	5f 93       	push	r21
    3bfc:	6f 93       	push	r22
    3bfe:	7f 93       	push	r23
    3c00:	8f 93       	push	r24
    3c02:	9f 93       	push	r25
    3c04:	af 93       	push	r26
    3c06:	bf 93       	push	r27
    3c08:	ef 93       	push	r30
    3c0a:	ff 93       	push	r31
    3c0c:	df 93       	push	r29
    3c0e:	cf 93       	push	r28
    3c10:	cd b7       	in	r28, 0x3d	; 61
    3c12:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR){
    3c14:	80 91 2d 01 	lds	r24, 0x012D
    3c18:	90 91 2e 01 	lds	r25, 0x012E
    3c1c:	00 97       	sbiw	r24, 0x00	; 0
    3c1e:	29 f0       	breq	.+10     	; 0x3c2a <__vector_9+0x40>
		g_callBackPtr();
    3c20:	e0 91 2d 01 	lds	r30, 0x012D
    3c24:	f0 91 2e 01 	lds	r31, 0x012E
    3c28:	09 95       	icall

	}
}
    3c2a:	cf 91       	pop	r28
    3c2c:	df 91       	pop	r29
    3c2e:	ff 91       	pop	r31
    3c30:	ef 91       	pop	r30
    3c32:	bf 91       	pop	r27
    3c34:	af 91       	pop	r26
    3c36:	9f 91       	pop	r25
    3c38:	8f 91       	pop	r24
    3c3a:	7f 91       	pop	r23
    3c3c:	6f 91       	pop	r22
    3c3e:	5f 91       	pop	r21
    3c40:	4f 91       	pop	r20
    3c42:	3f 91       	pop	r19
    3c44:	2f 91       	pop	r18
    3c46:	0f 90       	pop	r0
    3c48:	0f be       	out	0x3f, r0	; 63
    3c4a:	0f 90       	pop	r0
    3c4c:	1f 90       	pop	r1
    3c4e:	18 95       	reti

00003c50 <__vector_7>:
ISR(TIMER1_COMPA_vect){
    3c50:	1f 92       	push	r1
    3c52:	0f 92       	push	r0
    3c54:	0f b6       	in	r0, 0x3f	; 63
    3c56:	0f 92       	push	r0
    3c58:	11 24       	eor	r1, r1
    3c5a:	2f 93       	push	r18
    3c5c:	3f 93       	push	r19
    3c5e:	4f 93       	push	r20
    3c60:	5f 93       	push	r21
    3c62:	6f 93       	push	r22
    3c64:	7f 93       	push	r23
    3c66:	8f 93       	push	r24
    3c68:	9f 93       	push	r25
    3c6a:	af 93       	push	r26
    3c6c:	bf 93       	push	r27
    3c6e:	ef 93       	push	r30
    3c70:	ff 93       	push	r31
    3c72:	df 93       	push	r29
    3c74:	cf 93       	push	r28
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr!=NULL_PTR){
    3c7a:	80 91 2d 01 	lds	r24, 0x012D
    3c7e:	90 91 2e 01 	lds	r25, 0x012E
    3c82:	00 97       	sbiw	r24, 0x00	; 0
    3c84:	29 f0       	breq	.+10     	; 0x3c90 <__vector_7+0x40>
		g_callBackPtr();
    3c86:	e0 91 2d 01 	lds	r30, 0x012D
    3c8a:	f0 91 2e 01 	lds	r31, 0x012E
    3c8e:	09 95       	icall
	}

}
    3c90:	cf 91       	pop	r28
    3c92:	df 91       	pop	r29
    3c94:	ff 91       	pop	r31
    3c96:	ef 91       	pop	r30
    3c98:	bf 91       	pop	r27
    3c9a:	af 91       	pop	r26
    3c9c:	9f 91       	pop	r25
    3c9e:	8f 91       	pop	r24
    3ca0:	7f 91       	pop	r23
    3ca2:	6f 91       	pop	r22
    3ca4:	5f 91       	pop	r21
    3ca6:	4f 91       	pop	r20
    3ca8:	3f 91       	pop	r19
    3caa:	2f 91       	pop	r18
    3cac:	0f 90       	pop	r0
    3cae:	0f be       	out	0x3f, r0	; 63
    3cb0:	0f 90       	pop	r0
    3cb2:	1f 90       	pop	r1
    3cb4:	18 95       	reti

00003cb6 <UART_init>:
 * Functional responsible for Initialize the UART device by:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr){
    3cb6:	df 93       	push	r29
    3cb8:	cf 93       	push	r28
    3cba:	00 d0       	rcall	.+0      	; 0x3cbc <UART_init+0x6>
    3cbc:	00 d0       	rcall	.+0      	; 0x3cbe <UART_init+0x8>
    3cbe:	cd b7       	in	r28, 0x3d	; 61
    3cc0:	de b7       	in	r29, 0x3e	; 62
    3cc2:	9c 83       	std	Y+4, r25	; 0x04
    3cc4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value=0;
    3cc6:	1a 82       	std	Y+2, r1	; 0x02
    3cc8:	19 82       	std	Y+1, r1	; 0x01
	UCSRA = (1<<U2X);
    3cca:	eb e2       	ldi	r30, 0x2B	; 43
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	82 e0       	ldi	r24, 0x02	; 2
    3cd0:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3cd2:	ea e2       	ldi	r30, 0x2A	; 42
    3cd4:	f0 e0       	ldi	r31, 0x00	; 0
    3cd6:	88 e1       	ldi	r24, 0x18	; 24
    3cd8:	80 83       	st	Z, r24
		 * UPM1:0  = 00 Disable parity bit
		 * USBS    = 0 One stop bit
		 * UCSZ1:0 = 11 For 8-bit data mode
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
	UCSRC = (1<<URSEL) | (Config_Ptr->bit_data<<UCSZ0)|(Config_Ptr->parity<<UPM0)|(Config_Ptr->stop_bit<<USBS);
    3cda:	a0 e4       	ldi	r26, 0x40	; 64
    3cdc:	b0 e0       	ldi	r27, 0x00	; 0
    3cde:	eb 81       	ldd	r30, Y+3	; 0x03
    3ce0:	fc 81       	ldd	r31, Y+4	; 0x04
    3ce2:	80 81       	ld	r24, Z
    3ce4:	88 2f       	mov	r24, r24
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	88 0f       	add	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	28 2f       	mov	r18, r24
    3cee:	20 68       	ori	r18, 0x80	; 128
    3cf0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cf2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cf4:	81 81       	ldd	r24, Z+1	; 0x01
    3cf6:	88 2f       	mov	r24, r24
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	82 95       	swap	r24
    3cfc:	92 95       	swap	r25
    3cfe:	90 7f       	andi	r25, 0xF0	; 240
    3d00:	98 27       	eor	r25, r24
    3d02:	80 7f       	andi	r24, 0xF0	; 240
    3d04:	98 27       	eor	r25, r24
    3d06:	28 2b       	or	r18, r24
    3d08:	eb 81       	ldd	r30, Y+3	; 0x03
    3d0a:	fc 81       	ldd	r31, Y+4	; 0x04
    3d0c:	82 81       	ldd	r24, Z+2	; 0x02
    3d0e:	88 2f       	mov	r24, r24
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	88 0f       	add	r24, r24
    3d14:	99 1f       	adc	r25, r25
    3d16:	88 0f       	add	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	88 0f       	add	r24, r24
    3d1c:	99 1f       	adc	r25, r25
    3d1e:	82 2b       	or	r24, r18
    3d20:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3d22:	eb 81       	ldd	r30, Y+3	; 0x03
    3d24:	fc 81       	ldd	r31, Y+4	; 0x04
    3d26:	83 81       	ldd	r24, Z+3	; 0x03
    3d28:	94 81       	ldd	r25, Z+4	; 0x04
    3d2a:	a5 81       	ldd	r26, Z+5	; 0x05
    3d2c:	b6 81       	ldd	r27, Z+6	; 0x06
    3d2e:	88 0f       	add	r24, r24
    3d30:	99 1f       	adc	r25, r25
    3d32:	aa 1f       	adc	r26, r26
    3d34:	bb 1f       	adc	r27, r27
    3d36:	88 0f       	add	r24, r24
    3d38:	99 1f       	adc	r25, r25
    3d3a:	aa 1f       	adc	r26, r26
    3d3c:	bb 1f       	adc	r27, r27
    3d3e:	88 0f       	add	r24, r24
    3d40:	99 1f       	adc	r25, r25
    3d42:	aa 1f       	adc	r26, r26
    3d44:	bb 1f       	adc	r27, r27
    3d46:	9c 01       	movw	r18, r24
    3d48:	ad 01       	movw	r20, r26
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	92 e1       	ldi	r25, 0x12	; 18
    3d4e:	aa e7       	ldi	r26, 0x7A	; 122
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	bc 01       	movw	r22, r24
    3d54:	cd 01       	movw	r24, r26
    3d56:	0e 94 56 1f 	call	0x3eac	; 0x3eac <__udivmodsi4>
    3d5a:	da 01       	movw	r26, r20
    3d5c:	c9 01       	movw	r24, r18
    3d5e:	01 97       	sbiw	r24, 0x01	; 1
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3d64:	e0 e4       	ldi	r30, 0x40	; 64
    3d66:	f0 e0       	ldi	r31, 0x00	; 0
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6c:	89 2f       	mov	r24, r25
    3d6e:	99 27       	eor	r25, r25
    3d70:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3d72:	e9 e2       	ldi	r30, 0x29	; 41
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	89 81       	ldd	r24, Y+1	; 0x01
    3d78:	80 83       	st	Z, r24
}
    3d7a:	0f 90       	pop	r0
    3d7c:	0f 90       	pop	r0
    3d7e:	0f 90       	pop	r0
    3d80:	0f 90       	pop	r0
    3d82:	cf 91       	pop	r28
    3d84:	df 91       	pop	r29
    3d86:	08 95       	ret

00003d88 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    3d88:	df 93       	push	r29
    3d8a:	cf 93       	push	r28
    3d8c:	0f 92       	push	r0
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    3d92:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3d94:	eb e2       	ldi	r30, 0x2B	; 43
    3d96:	f0 e0       	ldi	r31, 0x00	; 0
    3d98:	80 81       	ld	r24, Z
    3d9a:	88 2f       	mov	r24, r24
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	80 72       	andi	r24, 0x20	; 32
    3da0:	90 70       	andi	r25, 0x00	; 0
    3da2:	00 97       	sbiw	r24, 0x00	; 0
    3da4:	b9 f3       	breq	.-18     	; 0x3d94 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3da6:	ec e2       	ldi	r30, 0x2C	; 44
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	89 81       	ldd	r24, Y+1	; 0x01
    3dac:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    3dae:	0f 90       	pop	r0
    3db0:	cf 91       	pop	r28
    3db2:	df 91       	pop	r29
    3db4:	08 95       	ret

00003db6 <UART_recieveByte>:


uint8 UART_recieveByte(void)
{
    3db6:	df 93       	push	r29
    3db8:	cf 93       	push	r28
    3dba:	cd b7       	in	r28, 0x3d	; 61
    3dbc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    3dbe:	eb e2       	ldi	r30, 0x2B	; 43
    3dc0:	f0 e0       	ldi	r31, 0x00	; 0
    3dc2:	80 81       	ld	r24, Z
    3dc4:	88 23       	and	r24, r24
    3dc6:	dc f7       	brge	.-10     	; 0x3dbe <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    3dc8:	ec e2       	ldi	r30, 0x2C	; 44
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
}
    3dce:	cf 91       	pop	r28
    3dd0:	df 91       	pop	r29
    3dd2:	08 95       	ret

00003dd4 <UART_sendString>:


void UART_sendString(const uint8 *Str)
{
    3dd4:	df 93       	push	r29
    3dd6:	cf 93       	push	r28
    3dd8:	00 d0       	rcall	.+0      	; 0x3dda <UART_sendString+0x6>
    3dda:	0f 92       	push	r0
    3ddc:	cd b7       	in	r28, 0x3d	; 61
    3dde:	de b7       	in	r29, 0x3e	; 62
    3de0:	9b 83       	std	Y+3, r25	; 0x03
    3de2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3de4:	19 82       	std	Y+1, r1	; 0x01
    3de6:	0e c0       	rjmp	.+28     	; 0x3e04 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3de8:	89 81       	ldd	r24, Y+1	; 0x01
    3dea:	28 2f       	mov	r18, r24
    3dec:	30 e0       	ldi	r19, 0x00	; 0
    3dee:	8a 81       	ldd	r24, Y+2	; 0x02
    3df0:	9b 81       	ldd	r25, Y+3	; 0x03
    3df2:	fc 01       	movw	r30, r24
    3df4:	e2 0f       	add	r30, r18
    3df6:	f3 1f       	adc	r31, r19
    3df8:	80 81       	ld	r24, Z
    3dfa:	0e 94 c4 1e 	call	0x3d88	; 0x3d88 <UART_sendByte>
		i++;
    3dfe:	89 81       	ldd	r24, Y+1	; 0x01
    3e00:	8f 5f       	subi	r24, 0xFF	; 255
    3e02:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3e04:	89 81       	ldd	r24, Y+1	; 0x01
    3e06:	28 2f       	mov	r18, r24
    3e08:	30 e0       	ldi	r19, 0x00	; 0
    3e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e0e:	fc 01       	movw	r30, r24
    3e10:	e2 0f       	add	r30, r18
    3e12:	f3 1f       	adc	r31, r19
    3e14:	80 81       	ld	r24, Z
    3e16:	88 23       	and	r24, r24
    3e18:	39 f7       	brne	.-50     	; 0x3de8 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	cf 91       	pop	r28
    3e22:	df 91       	pop	r29
    3e24:	08 95       	ret

00003e26 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3e26:	0f 93       	push	r16
    3e28:	1f 93       	push	r17
    3e2a:	df 93       	push	r29
    3e2c:	cf 93       	push	r28
    3e2e:	00 d0       	rcall	.+0      	; 0x3e30 <UART_receiveString+0xa>
    3e30:	0f 92       	push	r0
    3e32:	cd b7       	in	r28, 0x3d	; 61
    3e34:	de b7       	in	r29, 0x3e	; 62
    3e36:	9b 83       	std	Y+3, r25	; 0x03
    3e38:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3e3a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3e3c:	89 81       	ldd	r24, Y+1	; 0x01
    3e3e:	28 2f       	mov	r18, r24
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	8a 81       	ldd	r24, Y+2	; 0x02
    3e44:	9b 81       	ldd	r25, Y+3	; 0x03
    3e46:	8c 01       	movw	r16, r24
    3e48:	02 0f       	add	r16, r18
    3e4a:	13 1f       	adc	r17, r19
    3e4c:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <UART_recieveByte>
    3e50:	f8 01       	movw	r30, r16
    3e52:	80 83       	st	Z, r24
    3e54:	0f c0       	rjmp	.+30     	; 0x3e74 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3e56:	89 81       	ldd	r24, Y+1	; 0x01
    3e58:	8f 5f       	subi	r24, 0xFF	; 255
    3e5a:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3e5c:	89 81       	ldd	r24, Y+1	; 0x01
    3e5e:	28 2f       	mov	r18, r24
    3e60:	30 e0       	ldi	r19, 0x00	; 0
    3e62:	8a 81       	ldd	r24, Y+2	; 0x02
    3e64:	9b 81       	ldd	r25, Y+3	; 0x03
    3e66:	8c 01       	movw	r16, r24
    3e68:	02 0f       	add	r16, r18
    3e6a:	13 1f       	adc	r17, r19
    3e6c:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <UART_recieveByte>
    3e70:	f8 01       	movw	r30, r16
    3e72:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3e74:	89 81       	ldd	r24, Y+1	; 0x01
    3e76:	28 2f       	mov	r18, r24
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3e7e:	fc 01       	movw	r30, r24
    3e80:	e2 0f       	add	r30, r18
    3e82:	f3 1f       	adc	r31, r19
    3e84:	80 81       	ld	r24, Z
    3e86:	83 32       	cpi	r24, 0x23	; 35
    3e88:	31 f7       	brne	.-52     	; 0x3e56 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    3e8a:	89 81       	ldd	r24, Y+1	; 0x01
    3e8c:	28 2f       	mov	r18, r24
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	8a 81       	ldd	r24, Y+2	; 0x02
    3e92:	9b 81       	ldd	r25, Y+3	; 0x03
    3e94:	fc 01       	movw	r30, r24
    3e96:	e2 0f       	add	r30, r18
    3e98:	f3 1f       	adc	r31, r19
    3e9a:	10 82       	st	Z, r1
}
    3e9c:	0f 90       	pop	r0
    3e9e:	0f 90       	pop	r0
    3ea0:	0f 90       	pop	r0
    3ea2:	cf 91       	pop	r28
    3ea4:	df 91       	pop	r29
    3ea6:	1f 91       	pop	r17
    3ea8:	0f 91       	pop	r16
    3eaa:	08 95       	ret

00003eac <__udivmodsi4>:
    3eac:	a1 e2       	ldi	r26, 0x21	; 33
    3eae:	1a 2e       	mov	r1, r26
    3eb0:	aa 1b       	sub	r26, r26
    3eb2:	bb 1b       	sub	r27, r27
    3eb4:	fd 01       	movw	r30, r26
    3eb6:	0d c0       	rjmp	.+26     	; 0x3ed2 <__udivmodsi4_ep>

00003eb8 <__udivmodsi4_loop>:
    3eb8:	aa 1f       	adc	r26, r26
    3eba:	bb 1f       	adc	r27, r27
    3ebc:	ee 1f       	adc	r30, r30
    3ebe:	ff 1f       	adc	r31, r31
    3ec0:	a2 17       	cp	r26, r18
    3ec2:	b3 07       	cpc	r27, r19
    3ec4:	e4 07       	cpc	r30, r20
    3ec6:	f5 07       	cpc	r31, r21
    3ec8:	20 f0       	brcs	.+8      	; 0x3ed2 <__udivmodsi4_ep>
    3eca:	a2 1b       	sub	r26, r18
    3ecc:	b3 0b       	sbc	r27, r19
    3ece:	e4 0b       	sbc	r30, r20
    3ed0:	f5 0b       	sbc	r31, r21

00003ed2 <__udivmodsi4_ep>:
    3ed2:	66 1f       	adc	r22, r22
    3ed4:	77 1f       	adc	r23, r23
    3ed6:	88 1f       	adc	r24, r24
    3ed8:	99 1f       	adc	r25, r25
    3eda:	1a 94       	dec	r1
    3edc:	69 f7       	brne	.-38     	; 0x3eb8 <__udivmodsi4_loop>
    3ede:	60 95       	com	r22
    3ee0:	70 95       	com	r23
    3ee2:	80 95       	com	r24
    3ee4:	90 95       	com	r25
    3ee6:	9b 01       	movw	r18, r22
    3ee8:	ac 01       	movw	r20, r24
    3eea:	bd 01       	movw	r22, r26
    3eec:	cf 01       	movw	r24, r30
    3eee:	08 95       	ret

00003ef0 <__prologue_saves__>:
    3ef0:	2f 92       	push	r2
    3ef2:	3f 92       	push	r3
    3ef4:	4f 92       	push	r4
    3ef6:	5f 92       	push	r5
    3ef8:	6f 92       	push	r6
    3efa:	7f 92       	push	r7
    3efc:	8f 92       	push	r8
    3efe:	9f 92       	push	r9
    3f00:	af 92       	push	r10
    3f02:	bf 92       	push	r11
    3f04:	cf 92       	push	r12
    3f06:	df 92       	push	r13
    3f08:	ef 92       	push	r14
    3f0a:	ff 92       	push	r15
    3f0c:	0f 93       	push	r16
    3f0e:	1f 93       	push	r17
    3f10:	cf 93       	push	r28
    3f12:	df 93       	push	r29
    3f14:	cd b7       	in	r28, 0x3d	; 61
    3f16:	de b7       	in	r29, 0x3e	; 62
    3f18:	ca 1b       	sub	r28, r26
    3f1a:	db 0b       	sbc	r29, r27
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	09 94       	ijmp

00003f28 <__epilogue_restores__>:
    3f28:	2a 88       	ldd	r2, Y+18	; 0x12
    3f2a:	39 88       	ldd	r3, Y+17	; 0x11
    3f2c:	48 88       	ldd	r4, Y+16	; 0x10
    3f2e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f30:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f32:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f34:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f36:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f38:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f3a:	b9 84       	ldd	r11, Y+9	; 0x09
    3f3c:	c8 84       	ldd	r12, Y+8	; 0x08
    3f3e:	df 80       	ldd	r13, Y+7	; 0x07
    3f40:	ee 80       	ldd	r14, Y+6	; 0x06
    3f42:	fd 80       	ldd	r15, Y+5	; 0x05
    3f44:	0c 81       	ldd	r16, Y+4	; 0x04
    3f46:	1b 81       	ldd	r17, Y+3	; 0x03
    3f48:	aa 81       	ldd	r26, Y+2	; 0x02
    3f4a:	b9 81       	ldd	r27, Y+1	; 0x01
    3f4c:	ce 0f       	add	r28, r30
    3f4e:	d1 1d       	adc	r29, r1
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	ed 01       	movw	r28, r26
    3f5c:	08 95       	ret

00003f5e <itoa>:
    3f5e:	fb 01       	movw	r30, r22
    3f60:	9f 01       	movw	r18, r30
    3f62:	e8 94       	clt
    3f64:	42 30       	cpi	r20, 0x02	; 2
    3f66:	c4 f0       	brlt	.+48     	; 0x3f98 <itoa+0x3a>
    3f68:	45 32       	cpi	r20, 0x25	; 37
    3f6a:	b4 f4       	brge	.+44     	; 0x3f98 <itoa+0x3a>
    3f6c:	4a 30       	cpi	r20, 0x0A	; 10
    3f6e:	29 f4       	brne	.+10     	; 0x3f7a <itoa+0x1c>
    3f70:	97 fb       	bst	r25, 7
    3f72:	1e f4       	brtc	.+6      	; 0x3f7a <itoa+0x1c>
    3f74:	90 95       	com	r25
    3f76:	81 95       	neg	r24
    3f78:	9f 4f       	sbci	r25, 0xFF	; 255
    3f7a:	64 2f       	mov	r22, r20
    3f7c:	77 27       	eor	r23, r23
    3f7e:	0e 94 e0 1f 	call	0x3fc0	; 0x3fc0 <__udivmodhi4>
    3f82:	80 5d       	subi	r24, 0xD0	; 208
    3f84:	8a 33       	cpi	r24, 0x3A	; 58
    3f86:	0c f0       	brlt	.+2      	; 0x3f8a <itoa+0x2c>
    3f88:	89 5d       	subi	r24, 0xD9	; 217
    3f8a:	81 93       	st	Z+, r24
    3f8c:	cb 01       	movw	r24, r22
    3f8e:	00 97       	sbiw	r24, 0x00	; 0
    3f90:	a1 f7       	brne	.-24     	; 0x3f7a <itoa+0x1c>
    3f92:	16 f4       	brtc	.+4      	; 0x3f98 <itoa+0x3a>
    3f94:	5d e2       	ldi	r21, 0x2D	; 45
    3f96:	51 93       	st	Z+, r21
    3f98:	10 82       	st	Z, r1
    3f9a:	c9 01       	movw	r24, r18
    3f9c:	0c 94 d0 1f 	jmp	0x3fa0	; 0x3fa0 <strrev>

00003fa0 <strrev>:
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	fc 01       	movw	r30, r24
    3fa4:	67 2f       	mov	r22, r23
    3fa6:	71 91       	ld	r23, Z+
    3fa8:	77 23       	and	r23, r23
    3faa:	e1 f7       	brne	.-8      	; 0x3fa4 <strrev+0x4>
    3fac:	32 97       	sbiw	r30, 0x02	; 2
    3fae:	04 c0       	rjmp	.+8      	; 0x3fb8 <strrev+0x18>
    3fb0:	7c 91       	ld	r23, X
    3fb2:	6d 93       	st	X+, r22
    3fb4:	70 83       	st	Z, r23
    3fb6:	62 91       	ld	r22, -Z
    3fb8:	ae 17       	cp	r26, r30
    3fba:	bf 07       	cpc	r27, r31
    3fbc:	c8 f3       	brcs	.-14     	; 0x3fb0 <strrev+0x10>
    3fbe:	08 95       	ret

00003fc0 <__udivmodhi4>:
    3fc0:	aa 1b       	sub	r26, r26
    3fc2:	bb 1b       	sub	r27, r27
    3fc4:	51 e1       	ldi	r21, 0x11	; 17
    3fc6:	07 c0       	rjmp	.+14     	; 0x3fd6 <__udivmodhi4_ep>

00003fc8 <__udivmodhi4_loop>:
    3fc8:	aa 1f       	adc	r26, r26
    3fca:	bb 1f       	adc	r27, r27
    3fcc:	a6 17       	cp	r26, r22
    3fce:	b7 07       	cpc	r27, r23
    3fd0:	10 f0       	brcs	.+4      	; 0x3fd6 <__udivmodhi4_ep>
    3fd2:	a6 1b       	sub	r26, r22
    3fd4:	b7 0b       	sbc	r27, r23

00003fd6 <__udivmodhi4_ep>:
    3fd6:	88 1f       	adc	r24, r24
    3fd8:	99 1f       	adc	r25, r25
    3fda:	5a 95       	dec	r21
    3fdc:	a9 f7       	brne	.-22     	; 0x3fc8 <__udivmodhi4_loop>
    3fde:	80 95       	com	r24
    3fe0:	90 95       	com	r25
    3fe2:	bc 01       	movw	r22, r24
    3fe4:	cd 01       	movw	r24, r26
    3fe6:	08 95       	ret

00003fe8 <_exit>:
    3fe8:	f8 94       	cli

00003fea <__stop_program>:
    3fea:	ff cf       	rjmp	.-2      	; 0x3fea <__stop_program>
